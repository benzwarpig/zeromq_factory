// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CostmapMsgToPlanning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CostmapMsgToPlanning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CostmapMsgToPlanning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "RobotPose.pb.h"
#include "MyOccupancyGrid.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CostmapMsgToPlanning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CostmapMsgToPlanning_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CostmapMsgToPlanning_2eproto;
namespace LSLAM {
class CostmapMsgToPlanning;
struct CostmapMsgToPlanningDefaultTypeInternal;
extern CostmapMsgToPlanningDefaultTypeInternal _CostmapMsgToPlanning_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::CostmapMsgToPlanning* Arena::CreateMaybeMessage<::LSLAM::CostmapMsgToPlanning>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class CostmapMsgToPlanning final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.CostmapMsgToPlanning) */ {
 public:
  inline CostmapMsgToPlanning() : CostmapMsgToPlanning(nullptr) {}
  ~CostmapMsgToPlanning() override;
  explicit PROTOBUF_CONSTEXPR CostmapMsgToPlanning(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CostmapMsgToPlanning(const CostmapMsgToPlanning& from);
  CostmapMsgToPlanning(CostmapMsgToPlanning&& from) noexcept
    : CostmapMsgToPlanning() {
    *this = ::std::move(from);
  }

  inline CostmapMsgToPlanning& operator=(const CostmapMsgToPlanning& from) {
    CopyFrom(from);
    return *this;
  }
  inline CostmapMsgToPlanning& operator=(CostmapMsgToPlanning&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CostmapMsgToPlanning& default_instance() {
    return *internal_default_instance();
  }
  static inline const CostmapMsgToPlanning* internal_default_instance() {
    return reinterpret_cast<const CostmapMsgToPlanning*>(
               &_CostmapMsgToPlanning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CostmapMsgToPlanning& a, CostmapMsgToPlanning& b) {
    a.Swap(&b);
  }
  inline void Swap(CostmapMsgToPlanning* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CostmapMsgToPlanning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CostmapMsgToPlanning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CostmapMsgToPlanning>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CostmapMsgToPlanning& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CostmapMsgToPlanning& from) {
    CostmapMsgToPlanning::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CostmapMsgToPlanning* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.CostmapMsgToPlanning";
  }
  protected:
  explicit CostmapMsgToPlanning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalMapFieldNumber = 1,
    kLocalMapFieldNumber = 2,
    kRobotPoseFieldNumber = 3,
  };
  // .LSLAM.MyOccupancyGrid global_map = 1;
  bool has_global_map() const;
  private:
  bool _internal_has_global_map() const;
  public:
  void clear_global_map();
  const ::LSLAM::MyOccupancyGrid& global_map() const;
  PROTOBUF_NODISCARD ::LSLAM::MyOccupancyGrid* release_global_map();
  ::LSLAM::MyOccupancyGrid* mutable_global_map();
  void set_allocated_global_map(::LSLAM::MyOccupancyGrid* global_map);
  private:
  const ::LSLAM::MyOccupancyGrid& _internal_global_map() const;
  ::LSLAM::MyOccupancyGrid* _internal_mutable_global_map();
  public:
  void unsafe_arena_set_allocated_global_map(
      ::LSLAM::MyOccupancyGrid* global_map);
  ::LSLAM::MyOccupancyGrid* unsafe_arena_release_global_map();

  // .LSLAM.MyOccupancyGrid local_map = 2;
  bool has_local_map() const;
  private:
  bool _internal_has_local_map() const;
  public:
  void clear_local_map();
  const ::LSLAM::MyOccupancyGrid& local_map() const;
  PROTOBUF_NODISCARD ::LSLAM::MyOccupancyGrid* release_local_map();
  ::LSLAM::MyOccupancyGrid* mutable_local_map();
  void set_allocated_local_map(::LSLAM::MyOccupancyGrid* local_map);
  private:
  const ::LSLAM::MyOccupancyGrid& _internal_local_map() const;
  ::LSLAM::MyOccupancyGrid* _internal_mutable_local_map();
  public:
  void unsafe_arena_set_allocated_local_map(
      ::LSLAM::MyOccupancyGrid* local_map);
  ::LSLAM::MyOccupancyGrid* unsafe_arena_release_local_map();

  // .LSLAM.RobotPose robot_pose = 3;
  bool has_robot_pose() const;
  private:
  bool _internal_has_robot_pose() const;
  public:
  void clear_robot_pose();
  const ::LSLAM::RobotPose& robot_pose() const;
  PROTOBUF_NODISCARD ::LSLAM::RobotPose* release_robot_pose();
  ::LSLAM::RobotPose* mutable_robot_pose();
  void set_allocated_robot_pose(::LSLAM::RobotPose* robot_pose);
  private:
  const ::LSLAM::RobotPose& _internal_robot_pose() const;
  ::LSLAM::RobotPose* _internal_mutable_robot_pose();
  public:
  void unsafe_arena_set_allocated_robot_pose(
      ::LSLAM::RobotPose* robot_pose);
  ::LSLAM::RobotPose* unsafe_arena_release_robot_pose();

  // @@protoc_insertion_point(class_scope:LSLAM.CostmapMsgToPlanning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::LSLAM::MyOccupancyGrid* global_map_;
    ::LSLAM::MyOccupancyGrid* local_map_;
    ::LSLAM::RobotPose* robot_pose_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CostmapMsgToPlanning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CostmapMsgToPlanning

// .LSLAM.MyOccupancyGrid global_map = 1;
inline bool CostmapMsgToPlanning::_internal_has_global_map() const {
  return this != internal_default_instance() && _impl_.global_map_ != nullptr;
}
inline bool CostmapMsgToPlanning::has_global_map() const {
  return _internal_has_global_map();
}
inline const ::LSLAM::MyOccupancyGrid& CostmapMsgToPlanning::_internal_global_map() const {
  const ::LSLAM::MyOccupancyGrid* p = _impl_.global_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::MyOccupancyGrid&>(
      ::LSLAM::_MyOccupancyGrid_default_instance_);
}
inline const ::LSLAM::MyOccupancyGrid& CostmapMsgToPlanning::global_map() const {
  // @@protoc_insertion_point(field_get:LSLAM.CostmapMsgToPlanning.global_map)
  return _internal_global_map();
}
inline void CostmapMsgToPlanning::unsafe_arena_set_allocated_global_map(
    ::LSLAM::MyOccupancyGrid* global_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.global_map_);
  }
  _impl_.global_map_ = global_map;
  if (global_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.CostmapMsgToPlanning.global_map)
}
inline ::LSLAM::MyOccupancyGrid* CostmapMsgToPlanning::release_global_map() {
  
  ::LSLAM::MyOccupancyGrid* temp = _impl_.global_map_;
  _impl_.global_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::MyOccupancyGrid* CostmapMsgToPlanning::unsafe_arena_release_global_map() {
  // @@protoc_insertion_point(field_release:LSLAM.CostmapMsgToPlanning.global_map)
  
  ::LSLAM::MyOccupancyGrid* temp = _impl_.global_map_;
  _impl_.global_map_ = nullptr;
  return temp;
}
inline ::LSLAM::MyOccupancyGrid* CostmapMsgToPlanning::_internal_mutable_global_map() {
  
  if (_impl_.global_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::MyOccupancyGrid>(GetArenaForAllocation());
    _impl_.global_map_ = p;
  }
  return _impl_.global_map_;
}
inline ::LSLAM::MyOccupancyGrid* CostmapMsgToPlanning::mutable_global_map() {
  ::LSLAM::MyOccupancyGrid* _msg = _internal_mutable_global_map();
  // @@protoc_insertion_point(field_mutable:LSLAM.CostmapMsgToPlanning.global_map)
  return _msg;
}
inline void CostmapMsgToPlanning::set_allocated_global_map(::LSLAM::MyOccupancyGrid* global_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.global_map_);
  }
  if (global_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_map));
    if (message_arena != submessage_arena) {
      global_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_map, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.global_map_ = global_map;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.CostmapMsgToPlanning.global_map)
}

// .LSLAM.MyOccupancyGrid local_map = 2;
inline bool CostmapMsgToPlanning::_internal_has_local_map() const {
  return this != internal_default_instance() && _impl_.local_map_ != nullptr;
}
inline bool CostmapMsgToPlanning::has_local_map() const {
  return _internal_has_local_map();
}
inline const ::LSLAM::MyOccupancyGrid& CostmapMsgToPlanning::_internal_local_map() const {
  const ::LSLAM::MyOccupancyGrid* p = _impl_.local_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::MyOccupancyGrid&>(
      ::LSLAM::_MyOccupancyGrid_default_instance_);
}
inline const ::LSLAM::MyOccupancyGrid& CostmapMsgToPlanning::local_map() const {
  // @@protoc_insertion_point(field_get:LSLAM.CostmapMsgToPlanning.local_map)
  return _internal_local_map();
}
inline void CostmapMsgToPlanning::unsafe_arena_set_allocated_local_map(
    ::LSLAM::MyOccupancyGrid* local_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.local_map_);
  }
  _impl_.local_map_ = local_map;
  if (local_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.CostmapMsgToPlanning.local_map)
}
inline ::LSLAM::MyOccupancyGrid* CostmapMsgToPlanning::release_local_map() {
  
  ::LSLAM::MyOccupancyGrid* temp = _impl_.local_map_;
  _impl_.local_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::MyOccupancyGrid* CostmapMsgToPlanning::unsafe_arena_release_local_map() {
  // @@protoc_insertion_point(field_release:LSLAM.CostmapMsgToPlanning.local_map)
  
  ::LSLAM::MyOccupancyGrid* temp = _impl_.local_map_;
  _impl_.local_map_ = nullptr;
  return temp;
}
inline ::LSLAM::MyOccupancyGrid* CostmapMsgToPlanning::_internal_mutable_local_map() {
  
  if (_impl_.local_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::MyOccupancyGrid>(GetArenaForAllocation());
    _impl_.local_map_ = p;
  }
  return _impl_.local_map_;
}
inline ::LSLAM::MyOccupancyGrid* CostmapMsgToPlanning::mutable_local_map() {
  ::LSLAM::MyOccupancyGrid* _msg = _internal_mutable_local_map();
  // @@protoc_insertion_point(field_mutable:LSLAM.CostmapMsgToPlanning.local_map)
  return _msg;
}
inline void CostmapMsgToPlanning::set_allocated_local_map(::LSLAM::MyOccupancyGrid* local_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.local_map_);
  }
  if (local_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_map));
    if (message_arena != submessage_arena) {
      local_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_map, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.local_map_ = local_map;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.CostmapMsgToPlanning.local_map)
}

// .LSLAM.RobotPose robot_pose = 3;
inline bool CostmapMsgToPlanning::_internal_has_robot_pose() const {
  return this != internal_default_instance() && _impl_.robot_pose_ != nullptr;
}
inline bool CostmapMsgToPlanning::has_robot_pose() const {
  return _internal_has_robot_pose();
}
inline const ::LSLAM::RobotPose& CostmapMsgToPlanning::_internal_robot_pose() const {
  const ::LSLAM::RobotPose* p = _impl_.robot_pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::RobotPose&>(
      ::LSLAM::_RobotPose_default_instance_);
}
inline const ::LSLAM::RobotPose& CostmapMsgToPlanning::robot_pose() const {
  // @@protoc_insertion_point(field_get:LSLAM.CostmapMsgToPlanning.robot_pose)
  return _internal_robot_pose();
}
inline void CostmapMsgToPlanning::unsafe_arena_set_allocated_robot_pose(
    ::LSLAM::RobotPose* robot_pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_pose_);
  }
  _impl_.robot_pose_ = robot_pose;
  if (robot_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.CostmapMsgToPlanning.robot_pose)
}
inline ::LSLAM::RobotPose* CostmapMsgToPlanning::release_robot_pose() {
  
  ::LSLAM::RobotPose* temp = _impl_.robot_pose_;
  _impl_.robot_pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::RobotPose* CostmapMsgToPlanning::unsafe_arena_release_robot_pose() {
  // @@protoc_insertion_point(field_release:LSLAM.CostmapMsgToPlanning.robot_pose)
  
  ::LSLAM::RobotPose* temp = _impl_.robot_pose_;
  _impl_.robot_pose_ = nullptr;
  return temp;
}
inline ::LSLAM::RobotPose* CostmapMsgToPlanning::_internal_mutable_robot_pose() {
  
  if (_impl_.robot_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::RobotPose>(GetArenaForAllocation());
    _impl_.robot_pose_ = p;
  }
  return _impl_.robot_pose_;
}
inline ::LSLAM::RobotPose* CostmapMsgToPlanning::mutable_robot_pose() {
  ::LSLAM::RobotPose* _msg = _internal_mutable_robot_pose();
  // @@protoc_insertion_point(field_mutable:LSLAM.CostmapMsgToPlanning.robot_pose)
  return _msg;
}
inline void CostmapMsgToPlanning::set_allocated_robot_pose(::LSLAM::RobotPose* robot_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_pose_);
  }
  if (robot_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_pose));
    if (message_arena != submessage_arena) {
      robot_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.robot_pose_ = robot_pose;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.CostmapMsgToPlanning.robot_pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CostmapMsgToPlanning_2eproto
