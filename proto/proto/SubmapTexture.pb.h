// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SubmapTexture.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SubmapTexture_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SubmapTexture_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SubmapTexture_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SubmapTexture_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SubmapTexture_2eproto;
namespace LSLAM {
class SubmapTexture;
struct SubmapTextureDefaultTypeInternal;
extern SubmapTextureDefaultTypeInternal _SubmapTexture_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::SubmapTexture* Arena::CreateMaybeMessage<::LSLAM::SubmapTexture>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class SubmapTexture final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.SubmapTexture) */ {
 public:
  inline SubmapTexture() : SubmapTexture(nullptr) {}
  ~SubmapTexture() override;
  explicit PROTOBUF_CONSTEXPR SubmapTexture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmapTexture(const SubmapTexture& from);
  SubmapTexture(SubmapTexture&& from) noexcept
    : SubmapTexture() {
    *this = ::std::move(from);
  }

  inline SubmapTexture& operator=(const SubmapTexture& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmapTexture& operator=(SubmapTexture&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmapTexture& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmapTexture* internal_default_instance() {
    return reinterpret_cast<const SubmapTexture*>(
               &_SubmapTexture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubmapTexture& a, SubmapTexture& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmapTexture* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmapTexture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmapTexture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmapTexture>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmapTexture& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmapTexture& from) {
    SubmapTexture::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapTexture* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.SubmapTexture";
  }
  protected:
  explicit SubmapTexture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
    kSlicePoseFieldNumber = 5,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kResolutionFieldNumber = 4,
  };
  // string cells = 1;
  void clear_cells();
  const std::string& cells() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cells(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cells();
  PROTOBUF_NODISCARD std::string* release_cells();
  void set_allocated_cells(std::string* cells);
  private:
  const std::string& _internal_cells() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cells(const std::string& value);
  std::string* _internal_mutable_cells();
  public:

  // .LSLAM.Pose slice_pose = 5;
  bool has_slice_pose() const;
  private:
  bool _internal_has_slice_pose() const;
  public:
  void clear_slice_pose();
  const ::LSLAM::Pose& slice_pose() const;
  PROTOBUF_NODISCARD ::LSLAM::Pose* release_slice_pose();
  ::LSLAM::Pose* mutable_slice_pose();
  void set_allocated_slice_pose(::LSLAM::Pose* slice_pose);
  private:
  const ::LSLAM::Pose& _internal_slice_pose() const;
  ::LSLAM::Pose* _internal_mutable_slice_pose();
  public:
  void unsafe_arena_set_allocated_slice_pose(
      ::LSLAM::Pose* slice_pose);
  ::LSLAM::Pose* unsafe_arena_release_slice_pose();

  // int32 width = 2;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 3;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // double resolution = 4;
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.SubmapTexture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cells_;
    ::LSLAM::Pose* slice_pose_;
    int32_t width_;
    int32_t height_;
    double resolution_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SubmapTexture_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmapTexture

// string cells = 1;
inline void SubmapTexture::clear_cells() {
  _impl_.cells_.ClearToEmpty();
}
inline const std::string& SubmapTexture::cells() const {
  // @@protoc_insertion_point(field_get:LSLAM.SubmapTexture.cells)
  return _internal_cells();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubmapTexture::set_cells(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cells_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LSLAM.SubmapTexture.cells)
}
inline std::string* SubmapTexture::mutable_cells() {
  std::string* _s = _internal_mutable_cells();
  // @@protoc_insertion_point(field_mutable:LSLAM.SubmapTexture.cells)
  return _s;
}
inline const std::string& SubmapTexture::_internal_cells() const {
  return _impl_.cells_.Get();
}
inline void SubmapTexture::_internal_set_cells(const std::string& value) {
  
  _impl_.cells_.Set(value, GetArenaForAllocation());
}
inline std::string* SubmapTexture::_internal_mutable_cells() {
  
  return _impl_.cells_.Mutable(GetArenaForAllocation());
}
inline std::string* SubmapTexture::release_cells() {
  // @@protoc_insertion_point(field_release:LSLAM.SubmapTexture.cells)
  return _impl_.cells_.Release();
}
inline void SubmapTexture::set_allocated_cells(std::string* cells) {
  if (cells != nullptr) {
    
  } else {
    
  }
  _impl_.cells_.SetAllocated(cells, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cells_.IsDefault()) {
    _impl_.cells_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LSLAM.SubmapTexture.cells)
}

// int32 width = 2;
inline void SubmapTexture::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t SubmapTexture::_internal_width() const {
  return _impl_.width_;
}
inline int32_t SubmapTexture::width() const {
  // @@protoc_insertion_point(field_get:LSLAM.SubmapTexture.width)
  return _internal_width();
}
inline void SubmapTexture::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void SubmapTexture::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:LSLAM.SubmapTexture.width)
}

// int32 height = 3;
inline void SubmapTexture::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t SubmapTexture::_internal_height() const {
  return _impl_.height_;
}
inline int32_t SubmapTexture::height() const {
  // @@protoc_insertion_point(field_get:LSLAM.SubmapTexture.height)
  return _internal_height();
}
inline void SubmapTexture::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void SubmapTexture::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:LSLAM.SubmapTexture.height)
}

// double resolution = 4;
inline void SubmapTexture::clear_resolution() {
  _impl_.resolution_ = 0;
}
inline double SubmapTexture::_internal_resolution() const {
  return _impl_.resolution_;
}
inline double SubmapTexture::resolution() const {
  // @@protoc_insertion_point(field_get:LSLAM.SubmapTexture.resolution)
  return _internal_resolution();
}
inline void SubmapTexture::_internal_set_resolution(double value) {
  
  _impl_.resolution_ = value;
}
inline void SubmapTexture::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:LSLAM.SubmapTexture.resolution)
}

// .LSLAM.Pose slice_pose = 5;
inline bool SubmapTexture::_internal_has_slice_pose() const {
  return this != internal_default_instance() && _impl_.slice_pose_ != nullptr;
}
inline bool SubmapTexture::has_slice_pose() const {
  return _internal_has_slice_pose();
}
inline const ::LSLAM::Pose& SubmapTexture::_internal_slice_pose() const {
  const ::LSLAM::Pose* p = _impl_.slice_pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::Pose&>(
      ::LSLAM::_Pose_default_instance_);
}
inline const ::LSLAM::Pose& SubmapTexture::slice_pose() const {
  // @@protoc_insertion_point(field_get:LSLAM.SubmapTexture.slice_pose)
  return _internal_slice_pose();
}
inline void SubmapTexture::unsafe_arena_set_allocated_slice_pose(
    ::LSLAM::Pose* slice_pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slice_pose_);
  }
  _impl_.slice_pose_ = slice_pose;
  if (slice_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.SubmapTexture.slice_pose)
}
inline ::LSLAM::Pose* SubmapTexture::release_slice_pose() {
  
  ::LSLAM::Pose* temp = _impl_.slice_pose_;
  _impl_.slice_pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::Pose* SubmapTexture::unsafe_arena_release_slice_pose() {
  // @@protoc_insertion_point(field_release:LSLAM.SubmapTexture.slice_pose)
  
  ::LSLAM::Pose* temp = _impl_.slice_pose_;
  _impl_.slice_pose_ = nullptr;
  return temp;
}
inline ::LSLAM::Pose* SubmapTexture::_internal_mutable_slice_pose() {
  
  if (_impl_.slice_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::Pose>(GetArenaForAllocation());
    _impl_.slice_pose_ = p;
  }
  return _impl_.slice_pose_;
}
inline ::LSLAM::Pose* SubmapTexture::mutable_slice_pose() {
  ::LSLAM::Pose* _msg = _internal_mutable_slice_pose();
  // @@protoc_insertion_point(field_mutable:LSLAM.SubmapTexture.slice_pose)
  return _msg;
}
inline void SubmapTexture::set_allocated_slice_pose(::LSLAM::Pose* slice_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slice_pose_);
  }
  if (slice_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slice_pose));
    if (message_arena != submessage_arena) {
      slice_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice_pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.slice_pose_ = slice_pose;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.SubmapTexture.slice_pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SubmapTexture_2eproto
