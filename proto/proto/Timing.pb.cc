// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Timing.proto

#include "Timing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR Timing::Timing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_id_)*/{}
  , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.is_effective_)*/false
  , /*decltype(_impl_.timing_week_)*/0
  , /*decltype(_impl_.execution_time_)*/0
  , /*decltype(_impl_.execution_date_)*/0
  , /*decltype(_impl_.room_number_)*/0
  , /*decltype(_impl_.clean_mode_)*/0
  , /*decltype(_impl_.fan_motor_level_)*/0
  , /*decltype(_impl_.water_box_level_)*/0
  , /*decltype(_impl_.clean_number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimingDefaultTypeInternal() {}
  union {
    Timing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimingDefaultTypeInternal _Timing_default_instance_;
PROTOBUF_CONSTEXPR TuyaDoNotDisturb::TuyaDoNotDisturb(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.day_)*/{}
  , /*decltype(_impl_._day_cached_byte_size_)*/{0}
  , /*decltype(_impl_.time_zone_)*/0
  , /*decltype(_impl_.start_time_)*/0
  , /*decltype(_impl_.end_time_)*/0
  , /*decltype(_impl_.do_not_disturb_switch_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TuyaDoNotDisturbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TuyaDoNotDisturbDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TuyaDoNotDisturbDefaultTypeInternal() {}
  union {
    TuyaDoNotDisturb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TuyaDoNotDisturbDefaultTypeInternal _TuyaDoNotDisturb_default_instance_;
PROTOBUF_CONSTEXPR TimingSettingConfigurationFile::TimingSettingConfigurationFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.set_timing_)*/{}
  , /*decltype(_impl_.set_tuya_do_not_disturb_)*/nullptr
  , /*decltype(_impl_.time_zone_)*/0
  , /*decltype(_impl_.timing_number_)*/0
  , /*decltype(_impl_.default_fan_motor_level_)*/0
  , /*decltype(_impl_.default_water_box_level_)*/0
  , /*decltype(_impl_.set_break_point_switch_)*/false
  , /*decltype(_impl_.auto_boost_switch_)*/false
  , /*decltype(_impl_.carpet_clean_prefer_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimingSettingConfigurationFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimingSettingConfigurationFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimingSettingConfigurationFileDefaultTypeInternal() {}
  union {
    TimingSettingConfigurationFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimingSettingConfigurationFileDefaultTypeInternal _TimingSettingConfigurationFile_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_Timing_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Timing_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Timing_2eproto = nullptr;

const uint32_t TableStruct_Timing_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::Timing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::Timing, _impl_.is_effective_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Timing, _impl_.timing_week_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Timing, _impl_.execution_time_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Timing, _impl_.execution_date_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Timing, _impl_.room_number_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Timing, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Timing, _impl_.clean_mode_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Timing, _impl_.fan_motor_level_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Timing, _impl_.water_box_level_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Timing, _impl_.clean_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaDoNotDisturb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaDoNotDisturb, _impl_.time_zone_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaDoNotDisturb, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaDoNotDisturb, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaDoNotDisturb, _impl_.day_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaDoNotDisturb, _impl_.do_not_disturb_switch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::TimingSettingConfigurationFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::TimingSettingConfigurationFile, _impl_.set_timing_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TimingSettingConfigurationFile, _impl_.time_zone_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TimingSettingConfigurationFile, _impl_.timing_number_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TimingSettingConfigurationFile, _impl_.set_tuya_do_not_disturb_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TimingSettingConfigurationFile, _impl_.set_break_point_switch_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TimingSettingConfigurationFile, _impl_.default_fan_motor_level_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TimingSettingConfigurationFile, _impl_.default_water_box_level_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TimingSettingConfigurationFile, _impl_.carpet_clean_prefer_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TimingSettingConfigurationFile, _impl_.auto_boost_switch_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::Timing)},
  { 18, -1, -1, sizeof(::LSLAM::TuyaDoNotDisturb)},
  { 31, -1, -1, sizeof(::LSLAM::TimingSettingConfigurationFile)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_Timing_default_instance_._instance,
  &::LSLAM::_TuyaDoNotDisturb_default_instance_._instance,
  &::LSLAM::_TimingSettingConfigurationFile_default_instance_._instance,
};

const char descriptor_table_protodef_Timing_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Timing.proto\022\005LSLAM\"\265\002\n\006Timing\022\024\n\014is_e"
  "ffective\030\001 \001(\010\022\023\n\013timing_week\030\002 \001(\005\022\026\n\016e"
  "xecution_time\030\003 \001(\005\022\026\n\016execution_date\030\004 "
  "\001(\005\022\023\n\013room_number\030\005 \001(\005\022\017\n\007room_id\030\006 \003("
  "\005\022*\n\nclean_mode\030\007 \001(\0162\026.LSLAM.TimingClea"
  "nMode\0223\n\017fan_motor_level\030\010 \001(\0162\032.LSLAM.T"
  "imingFanMotorLevel\0223\n\017water_box_level\030\t "
  "\001(\0162\032.LSLAM.TimingWaterBoxLevel\022\024\n\014clean"
  "_number\030\n \001(\005\"w\n\020TuyaDoNotDisturb\022\021\n\ttim"
  "e_zone\030\001 \001(\005\022\022\n\nstart_time\030\002 \001(\005\022\020\n\010end_"
  "time\030\003 \001(\005\022\013\n\003day\030\004 \003(\005\022\035\n\025do_not_distur"
  "b_switch\030\005 \001(\005\"\371\002\n\036TimingSettingConfigur"
  "ationFile\022!\n\nset_timing\030\001 \003(\0132\r.LSLAM.Ti"
  "ming\022\021\n\ttime_zone\030\002 \001(\005\022\025\n\rtiming_number"
  "\030\003 \001(\005\0228\n\027set_tuya_do_not_disturb\030\004 \001(\0132"
  "\027.LSLAM.TuyaDoNotDisturb\022\036\n\026set_break_po"
  "int_switch\030\005 \001(\010\022;\n\027default_fan_motor_le"
  "vel\030\006 \001(\0162\032.LSLAM.TimingFanMotorLevel\022;\n"
  "\027default_water_box_level\030\007 \001(\0162\032.LSLAM.T"
  "imingWaterBoxLevel\022\033\n\023carpet_clean_prefe"
  "r\030\010 \001(\005\022\031\n\021auto_boost_switch\030\t \001(\010*\307\001\n\023T"
  "imingFanMotorLevel\022\032\n\026TIMING_FAN_MOTOR_C"
  "LOSE\020\000\022\031\n\025TIMING_FAN_MOTOR_MUTE\020\001\022\033\n\027TIM"
  "ING_FAN_MOTOR_NORMAL\020\002\022\033\n\027TIMING_FAN_MOT"
  "OR_STRONG\020\003\022!\n\035TIMING_FAN_MOTOR_SUPER_ST"
  "RONG\020\004\022\034\n\030TIMING_FAN_MOTOR_NOT_SET\020\005*\275\001\n"
  "\023TimingWaterBoxLevel\022 \n\034TIMING_WATER_BOX"
  "_LEVEL_CLOSE\020\000\022\036\n\032TIMING_WATER_BOX_LEVEL"
  "_ONE\020\001\022\036\n\032TIMING_WATER_BOX_LEVEL_TWO\020\002\022 "
  "\n\034TIMING_WATER_BOX_LEVEL_THREE\020\003\022\"\n\036TIMI"
  "NG_WATER_BOX_LEVEL_NOT_SET\020\004*Q\n\017TimingCl"
  "eanMode\022\032\n\026TIMING_CLEAN_AND_SWEEP\020\000\022\020\n\014T"
  "IMING_CLEAN\020\001\022\020\n\014TIMING_SWEEP\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Timing_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Timing_2eproto = {
    false, false, 1319, descriptor_table_protodef_Timing_2eproto,
    "Timing.proto",
    &descriptor_table_Timing_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_Timing_2eproto::offsets,
    file_level_metadata_Timing_2eproto, file_level_enum_descriptors_Timing_2eproto,
    file_level_service_descriptors_Timing_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Timing_2eproto_getter() {
  return &descriptor_table_Timing_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Timing_2eproto(&descriptor_table_Timing_2eproto);
namespace LSLAM {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimingFanMotorLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Timing_2eproto);
  return file_level_enum_descriptors_Timing_2eproto[0];
}
bool TimingFanMotorLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimingWaterBoxLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Timing_2eproto);
  return file_level_enum_descriptors_Timing_2eproto[1];
}
bool TimingWaterBoxLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimingCleanMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Timing_2eproto);
  return file_level_enum_descriptors_Timing_2eproto[2];
}
bool TimingCleanMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Timing::_Internal {
 public:
};

Timing::Timing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.Timing)
}
Timing::Timing(const Timing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Timing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){from._impl_.room_id_}
    , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
    , decltype(_impl_.is_effective_){}
    , decltype(_impl_.timing_week_){}
    , decltype(_impl_.execution_time_){}
    , decltype(_impl_.execution_date_){}
    , decltype(_impl_.room_number_){}
    , decltype(_impl_.clean_mode_){}
    , decltype(_impl_.fan_motor_level_){}
    , decltype(_impl_.water_box_level_){}
    , decltype(_impl_.clean_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_effective_, &from._impl_.is_effective_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clean_number_) -
    reinterpret_cast<char*>(&_impl_.is_effective_)) + sizeof(_impl_.clean_number_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.Timing)
}

inline void Timing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){arena}
    , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
    , decltype(_impl_.is_effective_){false}
    , decltype(_impl_.timing_week_){0}
    , decltype(_impl_.execution_time_){0}
    , decltype(_impl_.execution_date_){0}
    , decltype(_impl_.room_number_){0}
    , decltype(_impl_.clean_mode_){0}
    , decltype(_impl_.fan_motor_level_){0}
    , decltype(_impl_.water_box_level_){0}
    , decltype(_impl_.clean_number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Timing::~Timing() {
  // @@protoc_insertion_point(destructor:LSLAM.Timing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Timing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_id_.~RepeatedField();
}

void Timing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Timing::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.Timing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_id_.Clear();
  ::memset(&_impl_.is_effective_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clean_number_) -
      reinterpret_cast<char*>(&_impl_.is_effective_)) + sizeof(_impl_.clean_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_effective = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_effective_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timing_week = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timing_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 execution_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.execution_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 execution_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.execution_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 room_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 room_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_room_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_room_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.TimingCleanMode clean_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clean_mode(static_cast<::LSLAM::TimingCleanMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.TimingFanMotorLevel fan_motor_level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fan_motor_level(static_cast<::LSLAM::TimingFanMotorLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.TimingWaterBoxLevel water_box_level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_water_box_level(static_cast<::LSLAM::TimingWaterBoxLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 clean_number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.clean_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Timing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.Timing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_effective = 1;
  if (this->_internal_is_effective() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_effective(), target);
  }

  // int32 timing_week = 2;
  if (this->_internal_timing_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_timing_week(), target);
  }

  // int32 execution_time = 3;
  if (this->_internal_execution_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_execution_time(), target);
  }

  // int32 execution_date = 4;
  if (this->_internal_execution_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_execution_date(), target);
  }

  // int32 room_number = 5;
  if (this->_internal_room_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_room_number(), target);
  }

  // repeated int32 room_id = 6;
  {
    int byte_size = _impl_._room_id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_room_id(), byte_size, target);
    }
  }

  // .LSLAM.TimingCleanMode clean_mode = 7;
  if (this->_internal_clean_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_clean_mode(), target);
  }

  // .LSLAM.TimingFanMotorLevel fan_motor_level = 8;
  if (this->_internal_fan_motor_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_fan_motor_level(), target);
  }

  // .LSLAM.TimingWaterBoxLevel water_box_level = 9;
  if (this->_internal_water_box_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_water_box_level(), target);
  }

  // int32 clean_number = 10;
  if (this->_internal_clean_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_clean_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.Timing)
  return target;
}

size_t Timing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.Timing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 room_id = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.room_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._room_id_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // bool is_effective = 1;
  if (this->_internal_is_effective() != 0) {
    total_size += 1 + 1;
  }

  // int32 timing_week = 2;
  if (this->_internal_timing_week() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timing_week());
  }

  // int32 execution_time = 3;
  if (this->_internal_execution_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_execution_time());
  }

  // int32 execution_date = 4;
  if (this->_internal_execution_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_execution_date());
  }

  // int32 room_number = 5;
  if (this->_internal_room_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_number());
  }

  // .LSLAM.TimingCleanMode clean_mode = 7;
  if (this->_internal_clean_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_clean_mode());
  }

  // .LSLAM.TimingFanMotorLevel fan_motor_level = 8;
  if (this->_internal_fan_motor_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fan_motor_level());
  }

  // .LSLAM.TimingWaterBoxLevel water_box_level = 9;
  if (this->_internal_water_box_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_water_box_level());
  }

  // int32 clean_number = 10;
  if (this->_internal_clean_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clean_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Timing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Timing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Timing::GetClassData() const { return &_class_data_; }


void Timing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Timing*>(&to_msg);
  auto& from = static_cast<const Timing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.Timing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.room_id_.MergeFrom(from._impl_.room_id_);
  if (from._internal_is_effective() != 0) {
    _this->_internal_set_is_effective(from._internal_is_effective());
  }
  if (from._internal_timing_week() != 0) {
    _this->_internal_set_timing_week(from._internal_timing_week());
  }
  if (from._internal_execution_time() != 0) {
    _this->_internal_set_execution_time(from._internal_execution_time());
  }
  if (from._internal_execution_date() != 0) {
    _this->_internal_set_execution_date(from._internal_execution_date());
  }
  if (from._internal_room_number() != 0) {
    _this->_internal_set_room_number(from._internal_room_number());
  }
  if (from._internal_clean_mode() != 0) {
    _this->_internal_set_clean_mode(from._internal_clean_mode());
  }
  if (from._internal_fan_motor_level() != 0) {
    _this->_internal_set_fan_motor_level(from._internal_fan_motor_level());
  }
  if (from._internal_water_box_level() != 0) {
    _this->_internal_set_water_box_level(from._internal_water_box_level());
  }
  if (from._internal_clean_number() != 0) {
    _this->_internal_set_clean_number(from._internal_clean_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Timing::CopyFrom(const Timing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.Timing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timing::IsInitialized() const {
  return true;
}

void Timing::InternalSwap(Timing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.room_id_.InternalSwap(&other->_impl_.room_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timing, _impl_.clean_number_)
      + sizeof(Timing::_impl_.clean_number_)
      - PROTOBUF_FIELD_OFFSET(Timing, _impl_.is_effective_)>(
          reinterpret_cast<char*>(&_impl_.is_effective_),
          reinterpret_cast<char*>(&other->_impl_.is_effective_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Timing_2eproto_getter, &descriptor_table_Timing_2eproto_once,
      file_level_metadata_Timing_2eproto[0]);
}

// ===================================================================

class TuyaDoNotDisturb::_Internal {
 public:
};

TuyaDoNotDisturb::TuyaDoNotDisturb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.TuyaDoNotDisturb)
}
TuyaDoNotDisturb::TuyaDoNotDisturb(const TuyaDoNotDisturb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TuyaDoNotDisturb* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.day_){from._impl_.day_}
    , /*decltype(_impl_._day_cached_byte_size_)*/{0}
    , decltype(_impl_.time_zone_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.do_not_disturb_switch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_zone_, &from._impl_.time_zone_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.do_not_disturb_switch_) -
    reinterpret_cast<char*>(&_impl_.time_zone_)) + sizeof(_impl_.do_not_disturb_switch_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.TuyaDoNotDisturb)
}

inline void TuyaDoNotDisturb::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.day_){arena}
    , /*decltype(_impl_._day_cached_byte_size_)*/{0}
    , decltype(_impl_.time_zone_){0}
    , decltype(_impl_.start_time_){0}
    , decltype(_impl_.end_time_){0}
    , decltype(_impl_.do_not_disturb_switch_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TuyaDoNotDisturb::~TuyaDoNotDisturb() {
  // @@protoc_insertion_point(destructor:LSLAM.TuyaDoNotDisturb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TuyaDoNotDisturb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.day_.~RepeatedField();
}

void TuyaDoNotDisturb::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TuyaDoNotDisturb::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.TuyaDoNotDisturb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.day_.Clear();
  ::memset(&_impl_.time_zone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.do_not_disturb_switch_) -
      reinterpret_cast<char*>(&_impl_.time_zone_)) + sizeof(_impl_.do_not_disturb_switch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuyaDoNotDisturb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time_zone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_day(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_day(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 do_not_disturb_switch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.do_not_disturb_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TuyaDoNotDisturb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.TuyaDoNotDisturb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time_zone = 1;
  if (this->_internal_time_zone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_time_zone(), target);
  }

  // int32 start_time = 2;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_start_time(), target);
  }

  // int32 end_time = 3;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_end_time(), target);
  }

  // repeated int32 day = 4;
  {
    int byte_size = _impl_._day_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_day(), byte_size, target);
    }
  }

  // int32 do_not_disturb_switch = 5;
  if (this->_internal_do_not_disturb_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_do_not_disturb_switch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.TuyaDoNotDisturb)
  return target;
}

size_t TuyaDoNotDisturb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.TuyaDoNotDisturb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 day = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.day_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._day_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // int32 time_zone = 1;
  if (this->_internal_time_zone() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_zone());
  }

  // int32 start_time = 2;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_time());
  }

  // int32 end_time = 3;
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end_time());
  }

  // int32 do_not_disturb_switch = 5;
  if (this->_internal_do_not_disturb_switch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_do_not_disturb_switch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TuyaDoNotDisturb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TuyaDoNotDisturb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TuyaDoNotDisturb::GetClassData() const { return &_class_data_; }


void TuyaDoNotDisturb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TuyaDoNotDisturb*>(&to_msg);
  auto& from = static_cast<const TuyaDoNotDisturb&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.TuyaDoNotDisturb)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.day_.MergeFrom(from._impl_.day_);
  if (from._internal_time_zone() != 0) {
    _this->_internal_set_time_zone(from._internal_time_zone());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_do_not_disturb_switch() != 0) {
    _this->_internal_set_do_not_disturb_switch(from._internal_do_not_disturb_switch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TuyaDoNotDisturb::CopyFrom(const TuyaDoNotDisturb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.TuyaDoNotDisturb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuyaDoNotDisturb::IsInitialized() const {
  return true;
}

void TuyaDoNotDisturb::InternalSwap(TuyaDoNotDisturb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.day_.InternalSwap(&other->_impl_.day_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TuyaDoNotDisturb, _impl_.do_not_disturb_switch_)
      + sizeof(TuyaDoNotDisturb::_impl_.do_not_disturb_switch_)
      - PROTOBUF_FIELD_OFFSET(TuyaDoNotDisturb, _impl_.time_zone_)>(
          reinterpret_cast<char*>(&_impl_.time_zone_),
          reinterpret_cast<char*>(&other->_impl_.time_zone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TuyaDoNotDisturb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Timing_2eproto_getter, &descriptor_table_Timing_2eproto_once,
      file_level_metadata_Timing_2eproto[1]);
}

// ===================================================================

class TimingSettingConfigurationFile::_Internal {
 public:
  static const ::LSLAM::TuyaDoNotDisturb& set_tuya_do_not_disturb(const TimingSettingConfigurationFile* msg);
};

const ::LSLAM::TuyaDoNotDisturb&
TimingSettingConfigurationFile::_Internal::set_tuya_do_not_disturb(const TimingSettingConfigurationFile* msg) {
  return *msg->_impl_.set_tuya_do_not_disturb_;
}
TimingSettingConfigurationFile::TimingSettingConfigurationFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.TimingSettingConfigurationFile)
}
TimingSettingConfigurationFile::TimingSettingConfigurationFile(const TimingSettingConfigurationFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimingSettingConfigurationFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.set_timing_){from._impl_.set_timing_}
    , decltype(_impl_.set_tuya_do_not_disturb_){nullptr}
    , decltype(_impl_.time_zone_){}
    , decltype(_impl_.timing_number_){}
    , decltype(_impl_.default_fan_motor_level_){}
    , decltype(_impl_.default_water_box_level_){}
    , decltype(_impl_.set_break_point_switch_){}
    , decltype(_impl_.auto_boost_switch_){}
    , decltype(_impl_.carpet_clean_prefer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_set_tuya_do_not_disturb()) {
    _this->_impl_.set_tuya_do_not_disturb_ = new ::LSLAM::TuyaDoNotDisturb(*from._impl_.set_tuya_do_not_disturb_);
  }
  ::memcpy(&_impl_.time_zone_, &from._impl_.time_zone_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.carpet_clean_prefer_) -
    reinterpret_cast<char*>(&_impl_.time_zone_)) + sizeof(_impl_.carpet_clean_prefer_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.TimingSettingConfigurationFile)
}

inline void TimingSettingConfigurationFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.set_timing_){arena}
    , decltype(_impl_.set_tuya_do_not_disturb_){nullptr}
    , decltype(_impl_.time_zone_){0}
    , decltype(_impl_.timing_number_){0}
    , decltype(_impl_.default_fan_motor_level_){0}
    , decltype(_impl_.default_water_box_level_){0}
    , decltype(_impl_.set_break_point_switch_){false}
    , decltype(_impl_.auto_boost_switch_){false}
    , decltype(_impl_.carpet_clean_prefer_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimingSettingConfigurationFile::~TimingSettingConfigurationFile() {
  // @@protoc_insertion_point(destructor:LSLAM.TimingSettingConfigurationFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimingSettingConfigurationFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.set_timing_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.set_tuya_do_not_disturb_;
}

void TimingSettingConfigurationFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimingSettingConfigurationFile::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.TimingSettingConfigurationFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.set_timing_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_do_not_disturb_ != nullptr) {
    delete _impl_.set_tuya_do_not_disturb_;
  }
  _impl_.set_tuya_do_not_disturb_ = nullptr;
  ::memset(&_impl_.time_zone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.carpet_clean_prefer_) -
      reinterpret_cast<char*>(&_impl_.time_zone_)) + sizeof(_impl_.carpet_clean_prefer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimingSettingConfigurationFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .LSLAM.Timing set_timing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_set_timing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 time_zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timing_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timing_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.TuyaDoNotDisturb set_tuya_do_not_disturb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_tuya_do_not_disturb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool set_break_point_switch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.set_break_point_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.TimingFanMotorLevel default_fan_motor_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_default_fan_motor_level(static_cast<::LSLAM::TimingFanMotorLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.TimingWaterBoxLevel default_water_box_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_default_water_box_level(static_cast<::LSLAM::TimingWaterBoxLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 carpet_clean_prefer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.carpet_clean_prefer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_boost_switch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.auto_boost_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimingSettingConfigurationFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.TimingSettingConfigurationFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LSLAM.Timing set_timing = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_timing_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_timing(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 time_zone = 2;
  if (this->_internal_time_zone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_zone(), target);
  }

  // int32 timing_number = 3;
  if (this->_internal_timing_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_timing_number(), target);
  }

  // .LSLAM.TuyaDoNotDisturb set_tuya_do_not_disturb = 4;
  if (this->_internal_has_set_tuya_do_not_disturb()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::set_tuya_do_not_disturb(this),
        _Internal::set_tuya_do_not_disturb(this).GetCachedSize(), target, stream);
  }

  // bool set_break_point_switch = 5;
  if (this->_internal_set_break_point_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_set_break_point_switch(), target);
  }

  // .LSLAM.TimingFanMotorLevel default_fan_motor_level = 6;
  if (this->_internal_default_fan_motor_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_default_fan_motor_level(), target);
  }

  // .LSLAM.TimingWaterBoxLevel default_water_box_level = 7;
  if (this->_internal_default_water_box_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_default_water_box_level(), target);
  }

  // int32 carpet_clean_prefer = 8;
  if (this->_internal_carpet_clean_prefer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_carpet_clean_prefer(), target);
  }

  // bool auto_boost_switch = 9;
  if (this->_internal_auto_boost_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_auto_boost_switch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.TimingSettingConfigurationFile)
  return target;
}

size_t TimingSettingConfigurationFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.TimingSettingConfigurationFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.Timing set_timing = 1;
  total_size += 1UL * this->_internal_set_timing_size();
  for (const auto& msg : this->_impl_.set_timing_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .LSLAM.TuyaDoNotDisturb set_tuya_do_not_disturb = 4;
  if (this->_internal_has_set_tuya_do_not_disturb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.set_tuya_do_not_disturb_);
  }

  // int32 time_zone = 2;
  if (this->_internal_time_zone() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_zone());
  }

  // int32 timing_number = 3;
  if (this->_internal_timing_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timing_number());
  }

  // .LSLAM.TimingFanMotorLevel default_fan_motor_level = 6;
  if (this->_internal_default_fan_motor_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_default_fan_motor_level());
  }

  // .LSLAM.TimingWaterBoxLevel default_water_box_level = 7;
  if (this->_internal_default_water_box_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_default_water_box_level());
  }

  // bool set_break_point_switch = 5;
  if (this->_internal_set_break_point_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_boost_switch = 9;
  if (this->_internal_auto_boost_switch() != 0) {
    total_size += 1 + 1;
  }

  // int32 carpet_clean_prefer = 8;
  if (this->_internal_carpet_clean_prefer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_carpet_clean_prefer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimingSettingConfigurationFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimingSettingConfigurationFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimingSettingConfigurationFile::GetClassData() const { return &_class_data_; }


void TimingSettingConfigurationFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimingSettingConfigurationFile*>(&to_msg);
  auto& from = static_cast<const TimingSettingConfigurationFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.TimingSettingConfigurationFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.set_timing_.MergeFrom(from._impl_.set_timing_);
  if (from._internal_has_set_tuya_do_not_disturb()) {
    _this->_internal_mutable_set_tuya_do_not_disturb()->::LSLAM::TuyaDoNotDisturb::MergeFrom(
        from._internal_set_tuya_do_not_disturb());
  }
  if (from._internal_time_zone() != 0) {
    _this->_internal_set_time_zone(from._internal_time_zone());
  }
  if (from._internal_timing_number() != 0) {
    _this->_internal_set_timing_number(from._internal_timing_number());
  }
  if (from._internal_default_fan_motor_level() != 0) {
    _this->_internal_set_default_fan_motor_level(from._internal_default_fan_motor_level());
  }
  if (from._internal_default_water_box_level() != 0) {
    _this->_internal_set_default_water_box_level(from._internal_default_water_box_level());
  }
  if (from._internal_set_break_point_switch() != 0) {
    _this->_internal_set_set_break_point_switch(from._internal_set_break_point_switch());
  }
  if (from._internal_auto_boost_switch() != 0) {
    _this->_internal_set_auto_boost_switch(from._internal_auto_boost_switch());
  }
  if (from._internal_carpet_clean_prefer() != 0) {
    _this->_internal_set_carpet_clean_prefer(from._internal_carpet_clean_prefer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimingSettingConfigurationFile::CopyFrom(const TimingSettingConfigurationFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.TimingSettingConfigurationFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimingSettingConfigurationFile::IsInitialized() const {
  return true;
}

void TimingSettingConfigurationFile::InternalSwap(TimingSettingConfigurationFile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.set_timing_.InternalSwap(&other->_impl_.set_timing_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimingSettingConfigurationFile, _impl_.carpet_clean_prefer_)
      + sizeof(TimingSettingConfigurationFile::_impl_.carpet_clean_prefer_)
      - PROTOBUF_FIELD_OFFSET(TimingSettingConfigurationFile, _impl_.set_tuya_do_not_disturb_)>(
          reinterpret_cast<char*>(&_impl_.set_tuya_do_not_disturb_),
          reinterpret_cast<char*>(&other->_impl_.set_tuya_do_not_disturb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimingSettingConfigurationFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Timing_2eproto_getter, &descriptor_table_Timing_2eproto_once,
      file_level_metadata_Timing_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::Timing*
Arena::CreateMaybeMessage< ::LSLAM::Timing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::Timing >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::TuyaDoNotDisturb*
Arena::CreateMaybeMessage< ::LSLAM::TuyaDoNotDisturb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::TuyaDoNotDisturb >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::TimingSettingConfigurationFile*
Arena::CreateMaybeMessage< ::LSLAM::TimingSettingConfigurationFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::TimingSettingConfigurationFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
