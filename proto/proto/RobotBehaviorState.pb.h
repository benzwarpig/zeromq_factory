// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotBehaviorState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RobotBehaviorState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RobotBehaviorState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RobotBehaviorState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RobotBehaviorState_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RobotBehaviorState_2eproto;
namespace LSLAM {
class RobotBehaviorState;
struct RobotBehaviorStateDefaultTypeInternal;
extern RobotBehaviorStateDefaultTypeInternal _RobotBehaviorState_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::RobotBehaviorState* Arena::CreateMaybeMessage<::LSLAM::RobotBehaviorState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

enum RobotBehaviorState_KeyStateType : int {
  RobotBehaviorState_KeyStateType_KeyIdle = 0,
  RobotBehaviorState_KeyStateType_kKey1Up = 1,
  RobotBehaviorState_KeyStateType_kKey2Up = 2,
  RobotBehaviorState_KeyStateType_kKey1double = 3,
  RobotBehaviorState_KeyStateType_kKey2double = 4,
  RobotBehaviorState_KeyStateType_kKey1Long = 5,
  RobotBehaviorState_KeyStateType_kKey2Long = 6,
  RobotBehaviorState_KeyStateType_kKeyGropup = 7,
  RobotBehaviorState_KeyStateType_RobotBehaviorState_KeyStateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RobotBehaviorState_KeyStateType_RobotBehaviorState_KeyStateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RobotBehaviorState_KeyStateType_IsValid(int value);
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState_KeyStateType_KeyStateType_MIN = RobotBehaviorState_KeyStateType_KeyIdle;
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState_KeyStateType_KeyStateType_MAX = RobotBehaviorState_KeyStateType_kKeyGropup;
constexpr int RobotBehaviorState_KeyStateType_KeyStateType_ARRAYSIZE = RobotBehaviorState_KeyStateType_KeyStateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotBehaviorState_KeyStateType_descriptor();
template<typename T>
inline const std::string& RobotBehaviorState_KeyStateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RobotBehaviorState_KeyStateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RobotBehaviorState_KeyStateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RobotBehaviorState_KeyStateType_descriptor(), enum_t_value);
}
inline bool RobotBehaviorState_KeyStateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RobotBehaviorState_KeyStateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RobotBehaviorState_KeyStateType>(
    RobotBehaviorState_KeyStateType_descriptor(), name, value);
}
enum RobotTaskBreathingLight : int {
  UNUSED_SATTE = 0,
  WORKING_STATE = 1,
  CHARGING_STATE = 2,
  CHARE_DONE_STATE = 3,
  STANDBY_STATE = 4,
  EXCEPTION_STATE = 5,
  ERROR_STATE = 6,
  STOP_STATE = 7,
  INITING_STATE = 8,
  SUSPEND_STATE = 9,
  RobotTaskBreathingLight_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RobotTaskBreathingLight_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RobotTaskBreathingLight_IsValid(int value);
constexpr RobotTaskBreathingLight RobotTaskBreathingLight_MIN = UNUSED_SATTE;
constexpr RobotTaskBreathingLight RobotTaskBreathingLight_MAX = SUSPEND_STATE;
constexpr int RobotTaskBreathingLight_ARRAYSIZE = RobotTaskBreathingLight_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotTaskBreathingLight_descriptor();
template<typename T>
inline const std::string& RobotTaskBreathingLight_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RobotTaskBreathingLight>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RobotTaskBreathingLight_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RobotTaskBreathingLight_descriptor(), enum_t_value);
}
inline bool RobotTaskBreathingLight_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RobotTaskBreathingLight* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RobotTaskBreathingLight>(
    RobotTaskBreathingLight_descriptor(), name, value);
}
enum AbnormalState : int {
  NormalState = 0,
  StayProhibitedZone = 1,
  DustBoxException = 2,
  BatteryException = 3,
  LidarException = 4,
  PickedUpException = 5,
  CrashError = 6,
  DropError = 7,
  BatteryError = 8,
  LineLaserError = 9,
  FunError = 10,
  WheelError = 11,
  Trapped = 12,
  PartnerError = 13,
  AbnormalState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AbnormalState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AbnormalState_IsValid(int value);
constexpr AbnormalState AbnormalState_MIN = NormalState;
constexpr AbnormalState AbnormalState_MAX = PartnerError;
constexpr int AbnormalState_ARRAYSIZE = AbnormalState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AbnormalState_descriptor();
template<typename T>
inline const std::string& AbnormalState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AbnormalState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AbnormalState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AbnormalState_descriptor(), enum_t_value);
}
inline bool AbnormalState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AbnormalState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AbnormalState>(
    AbnormalState_descriptor(), name, value);
}
// ===================================================================

class RobotBehaviorState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.RobotBehaviorState) */ {
 public:
  inline RobotBehaviorState() : RobotBehaviorState(nullptr) {}
  ~RobotBehaviorState() override;
  explicit PROTOBUF_CONSTEXPR RobotBehaviorState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotBehaviorState(const RobotBehaviorState& from);
  RobotBehaviorState(RobotBehaviorState&& from) noexcept
    : RobotBehaviorState() {
    *this = ::std::move(from);
  }

  inline RobotBehaviorState& operator=(const RobotBehaviorState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotBehaviorState& operator=(RobotBehaviorState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotBehaviorState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotBehaviorState* internal_default_instance() {
    return reinterpret_cast<const RobotBehaviorState*>(
               &_RobotBehaviorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RobotBehaviorState& a, RobotBehaviorState& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotBehaviorState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotBehaviorState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotBehaviorState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotBehaviorState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotBehaviorState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotBehaviorState& from) {
    RobotBehaviorState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotBehaviorState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.RobotBehaviorState";
  }
  protected:
  explicit RobotBehaviorState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RobotBehaviorState_KeyStateType KeyStateType;
  static constexpr KeyStateType KeyIdle =
    RobotBehaviorState_KeyStateType_KeyIdle;
  static constexpr KeyStateType kKey1Up =
    RobotBehaviorState_KeyStateType_kKey1Up;
  static constexpr KeyStateType kKey2Up =
    RobotBehaviorState_KeyStateType_kKey2Up;
  static constexpr KeyStateType kKey1double =
    RobotBehaviorState_KeyStateType_kKey1double;
  static constexpr KeyStateType kKey2double =
    RobotBehaviorState_KeyStateType_kKey2double;
  static constexpr KeyStateType kKey1Long =
    RobotBehaviorState_KeyStateType_kKey1Long;
  static constexpr KeyStateType kKey2Long =
    RobotBehaviorState_KeyStateType_kKey2Long;
  static constexpr KeyStateType kKeyGropup =
    RobotBehaviorState_KeyStateType_kKeyGropup;
  static inline bool KeyStateType_IsValid(int value) {
    return RobotBehaviorState_KeyStateType_IsValid(value);
  }
  static constexpr KeyStateType KeyStateType_MIN =
    RobotBehaviorState_KeyStateType_KeyStateType_MIN;
  static constexpr KeyStateType KeyStateType_MAX =
    RobotBehaviorState_KeyStateType_KeyStateType_MAX;
  static constexpr int KeyStateType_ARRAYSIZE =
    RobotBehaviorState_KeyStateType_KeyStateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KeyStateType_descriptor() {
    return RobotBehaviorState_KeyStateType_descriptor();
  }
  template<typename T>
  static inline const std::string& KeyStateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KeyStateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KeyStateType_Name.");
    return RobotBehaviorState_KeyStateType_Name(enum_t_value);
  }
  static inline bool KeyStateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KeyStateType* value) {
    return RobotBehaviorState_KeyStateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCleanPercentFieldNumber = 1,
    kFrontDistanceFieldNumber = 2,
    kCleanModeFieldNumber = 5,
    kMainCleanMotorModeFieldNumber = 6,
    kSideCleanMotorModeFieldNumber = 7,
    kSwifferMotorModeFieldNumber = 8,
    kFanMotorModeFieldNumber = 9,
    kWaterBoxLevelModeFieldNumber = 10,
    kPartnerCleanMopSwitchFieldNumber = 11,
    kPartnerDustCollectionSwitchFieldNumber = 12,
    kRobotKeyStateFieldNumber = 13,
    kPartnerKeyStateFieldNumber = 14,
    kRobotCurrentAbnormalStateFieldNumber = 15,
    kPartnerDryingMopSwitchFieldNumber = 16,
    kBreathingLightFieldNumber = 17,
    kBehindDistanceFieldNumber = 18,
  };
  // uint32 clean_percent = 1;
  void clear_clean_percent();
  uint32_t clean_percent() const;
  void set_clean_percent(uint32_t value);
  private:
  uint32_t _internal_clean_percent() const;
  void _internal_set_clean_percent(uint32_t value);
  public:

  // uint32 front_distance = 2;
  void clear_front_distance();
  uint32_t front_distance() const;
  void set_front_distance(uint32_t value);
  private:
  uint32_t _internal_front_distance() const;
  void _internal_set_front_distance(uint32_t value);
  public:

  // uint32 clean_mode = 5;
  void clear_clean_mode();
  uint32_t clean_mode() const;
  void set_clean_mode(uint32_t value);
  private:
  uint32_t _internal_clean_mode() const;
  void _internal_set_clean_mode(uint32_t value);
  public:

  // uint32 main_clean_motor_mode = 6;
  void clear_main_clean_motor_mode();
  uint32_t main_clean_motor_mode() const;
  void set_main_clean_motor_mode(uint32_t value);
  private:
  uint32_t _internal_main_clean_motor_mode() const;
  void _internal_set_main_clean_motor_mode(uint32_t value);
  public:

  // uint32 side_clean_motor_mode = 7;
  void clear_side_clean_motor_mode();
  uint32_t side_clean_motor_mode() const;
  void set_side_clean_motor_mode(uint32_t value);
  private:
  uint32_t _internal_side_clean_motor_mode() const;
  void _internal_set_side_clean_motor_mode(uint32_t value);
  public:

  // uint32 swiffer_motor_mode = 8;
  void clear_swiffer_motor_mode();
  uint32_t swiffer_motor_mode() const;
  void set_swiffer_motor_mode(uint32_t value);
  private:
  uint32_t _internal_swiffer_motor_mode() const;
  void _internal_set_swiffer_motor_mode(uint32_t value);
  public:

  // uint32 fan_motor_mode = 9;
  void clear_fan_motor_mode();
  uint32_t fan_motor_mode() const;
  void set_fan_motor_mode(uint32_t value);
  private:
  uint32_t _internal_fan_motor_mode() const;
  void _internal_set_fan_motor_mode(uint32_t value);
  public:

  // uint32 water_box_level_mode = 10;
  void clear_water_box_level_mode();
  uint32_t water_box_level_mode() const;
  void set_water_box_level_mode(uint32_t value);
  private:
  uint32_t _internal_water_box_level_mode() const;
  void _internal_set_water_box_level_mode(uint32_t value);
  public:

  // uint32 partner_clean_mop_switch = 11;
  void clear_partner_clean_mop_switch();
  uint32_t partner_clean_mop_switch() const;
  void set_partner_clean_mop_switch(uint32_t value);
  private:
  uint32_t _internal_partner_clean_mop_switch() const;
  void _internal_set_partner_clean_mop_switch(uint32_t value);
  public:

  // uint32 partner_dust_collection_switch = 12;
  void clear_partner_dust_collection_switch();
  uint32_t partner_dust_collection_switch() const;
  void set_partner_dust_collection_switch(uint32_t value);
  private:
  uint32_t _internal_partner_dust_collection_switch() const;
  void _internal_set_partner_dust_collection_switch(uint32_t value);
  public:

  // .LSLAM.RobotBehaviorState.KeyStateType robot_key_state = 13;
  void clear_robot_key_state();
  ::LSLAM::RobotBehaviorState_KeyStateType robot_key_state() const;
  void set_robot_key_state(::LSLAM::RobotBehaviorState_KeyStateType value);
  private:
  ::LSLAM::RobotBehaviorState_KeyStateType _internal_robot_key_state() const;
  void _internal_set_robot_key_state(::LSLAM::RobotBehaviorState_KeyStateType value);
  public:

  // .LSLAM.RobotBehaviorState.KeyStateType partner_key_state = 14;
  void clear_partner_key_state();
  ::LSLAM::RobotBehaviorState_KeyStateType partner_key_state() const;
  void set_partner_key_state(::LSLAM::RobotBehaviorState_KeyStateType value);
  private:
  ::LSLAM::RobotBehaviorState_KeyStateType _internal_partner_key_state() const;
  void _internal_set_partner_key_state(::LSLAM::RobotBehaviorState_KeyStateType value);
  public:

  // .LSLAM.AbnormalState robot_current_abnormal_state = 15;
  void clear_robot_current_abnormal_state();
  ::LSLAM::AbnormalState robot_current_abnormal_state() const;
  void set_robot_current_abnormal_state(::LSLAM::AbnormalState value);
  private:
  ::LSLAM::AbnormalState _internal_robot_current_abnormal_state() const;
  void _internal_set_robot_current_abnormal_state(::LSLAM::AbnormalState value);
  public:

  // uint32 partner_drying_mop_switch = 16;
  void clear_partner_drying_mop_switch();
  uint32_t partner_drying_mop_switch() const;
  void set_partner_drying_mop_switch(uint32_t value);
  private:
  uint32_t _internal_partner_drying_mop_switch() const;
  void _internal_set_partner_drying_mop_switch(uint32_t value);
  public:

  // .LSLAM.RobotTaskBreathingLight breathing_light = 17;
  void clear_breathing_light();
  ::LSLAM::RobotTaskBreathingLight breathing_light() const;
  void set_breathing_light(::LSLAM::RobotTaskBreathingLight value);
  private:
  ::LSLAM::RobotTaskBreathingLight _internal_breathing_light() const;
  void _internal_set_breathing_light(::LSLAM::RobotTaskBreathingLight value);
  public:

  // uint32 behind_distance = 18;
  void clear_behind_distance();
  uint32_t behind_distance() const;
  void set_behind_distance(uint32_t value);
  private:
  uint32_t _internal_behind_distance() const;
  void _internal_set_behind_distance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.RobotBehaviorState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t clean_percent_;
    uint32_t front_distance_;
    uint32_t clean_mode_;
    uint32_t main_clean_motor_mode_;
    uint32_t side_clean_motor_mode_;
    uint32_t swiffer_motor_mode_;
    uint32_t fan_motor_mode_;
    uint32_t water_box_level_mode_;
    uint32_t partner_clean_mop_switch_;
    uint32_t partner_dust_collection_switch_;
    int robot_key_state_;
    int partner_key_state_;
    int robot_current_abnormal_state_;
    uint32_t partner_drying_mop_switch_;
    int breathing_light_;
    uint32_t behind_distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RobotBehaviorState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotBehaviorState

// uint32 clean_percent = 1;
inline void RobotBehaviorState::clear_clean_percent() {
  _impl_.clean_percent_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_clean_percent() const {
  return _impl_.clean_percent_;
}
inline uint32_t RobotBehaviorState::clean_percent() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.clean_percent)
  return _internal_clean_percent();
}
inline void RobotBehaviorState::_internal_set_clean_percent(uint32_t value) {
  
  _impl_.clean_percent_ = value;
}
inline void RobotBehaviorState::set_clean_percent(uint32_t value) {
  _internal_set_clean_percent(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.clean_percent)
}

// uint32 front_distance = 2;
inline void RobotBehaviorState::clear_front_distance() {
  _impl_.front_distance_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_front_distance() const {
  return _impl_.front_distance_;
}
inline uint32_t RobotBehaviorState::front_distance() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.front_distance)
  return _internal_front_distance();
}
inline void RobotBehaviorState::_internal_set_front_distance(uint32_t value) {
  
  _impl_.front_distance_ = value;
}
inline void RobotBehaviorState::set_front_distance(uint32_t value) {
  _internal_set_front_distance(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.front_distance)
}

// uint32 clean_mode = 5;
inline void RobotBehaviorState::clear_clean_mode() {
  _impl_.clean_mode_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_clean_mode() const {
  return _impl_.clean_mode_;
}
inline uint32_t RobotBehaviorState::clean_mode() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.clean_mode)
  return _internal_clean_mode();
}
inline void RobotBehaviorState::_internal_set_clean_mode(uint32_t value) {
  
  _impl_.clean_mode_ = value;
}
inline void RobotBehaviorState::set_clean_mode(uint32_t value) {
  _internal_set_clean_mode(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.clean_mode)
}

// uint32 main_clean_motor_mode = 6;
inline void RobotBehaviorState::clear_main_clean_motor_mode() {
  _impl_.main_clean_motor_mode_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_main_clean_motor_mode() const {
  return _impl_.main_clean_motor_mode_;
}
inline uint32_t RobotBehaviorState::main_clean_motor_mode() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.main_clean_motor_mode)
  return _internal_main_clean_motor_mode();
}
inline void RobotBehaviorState::_internal_set_main_clean_motor_mode(uint32_t value) {
  
  _impl_.main_clean_motor_mode_ = value;
}
inline void RobotBehaviorState::set_main_clean_motor_mode(uint32_t value) {
  _internal_set_main_clean_motor_mode(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.main_clean_motor_mode)
}

// uint32 side_clean_motor_mode = 7;
inline void RobotBehaviorState::clear_side_clean_motor_mode() {
  _impl_.side_clean_motor_mode_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_side_clean_motor_mode() const {
  return _impl_.side_clean_motor_mode_;
}
inline uint32_t RobotBehaviorState::side_clean_motor_mode() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.side_clean_motor_mode)
  return _internal_side_clean_motor_mode();
}
inline void RobotBehaviorState::_internal_set_side_clean_motor_mode(uint32_t value) {
  
  _impl_.side_clean_motor_mode_ = value;
}
inline void RobotBehaviorState::set_side_clean_motor_mode(uint32_t value) {
  _internal_set_side_clean_motor_mode(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.side_clean_motor_mode)
}

// uint32 swiffer_motor_mode = 8;
inline void RobotBehaviorState::clear_swiffer_motor_mode() {
  _impl_.swiffer_motor_mode_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_swiffer_motor_mode() const {
  return _impl_.swiffer_motor_mode_;
}
inline uint32_t RobotBehaviorState::swiffer_motor_mode() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.swiffer_motor_mode)
  return _internal_swiffer_motor_mode();
}
inline void RobotBehaviorState::_internal_set_swiffer_motor_mode(uint32_t value) {
  
  _impl_.swiffer_motor_mode_ = value;
}
inline void RobotBehaviorState::set_swiffer_motor_mode(uint32_t value) {
  _internal_set_swiffer_motor_mode(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.swiffer_motor_mode)
}

// uint32 fan_motor_mode = 9;
inline void RobotBehaviorState::clear_fan_motor_mode() {
  _impl_.fan_motor_mode_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_fan_motor_mode() const {
  return _impl_.fan_motor_mode_;
}
inline uint32_t RobotBehaviorState::fan_motor_mode() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.fan_motor_mode)
  return _internal_fan_motor_mode();
}
inline void RobotBehaviorState::_internal_set_fan_motor_mode(uint32_t value) {
  
  _impl_.fan_motor_mode_ = value;
}
inline void RobotBehaviorState::set_fan_motor_mode(uint32_t value) {
  _internal_set_fan_motor_mode(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.fan_motor_mode)
}

// uint32 water_box_level_mode = 10;
inline void RobotBehaviorState::clear_water_box_level_mode() {
  _impl_.water_box_level_mode_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_water_box_level_mode() const {
  return _impl_.water_box_level_mode_;
}
inline uint32_t RobotBehaviorState::water_box_level_mode() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.water_box_level_mode)
  return _internal_water_box_level_mode();
}
inline void RobotBehaviorState::_internal_set_water_box_level_mode(uint32_t value) {
  
  _impl_.water_box_level_mode_ = value;
}
inline void RobotBehaviorState::set_water_box_level_mode(uint32_t value) {
  _internal_set_water_box_level_mode(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.water_box_level_mode)
}

// uint32 partner_clean_mop_switch = 11;
inline void RobotBehaviorState::clear_partner_clean_mop_switch() {
  _impl_.partner_clean_mop_switch_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_partner_clean_mop_switch() const {
  return _impl_.partner_clean_mop_switch_;
}
inline uint32_t RobotBehaviorState::partner_clean_mop_switch() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.partner_clean_mop_switch)
  return _internal_partner_clean_mop_switch();
}
inline void RobotBehaviorState::_internal_set_partner_clean_mop_switch(uint32_t value) {
  
  _impl_.partner_clean_mop_switch_ = value;
}
inline void RobotBehaviorState::set_partner_clean_mop_switch(uint32_t value) {
  _internal_set_partner_clean_mop_switch(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.partner_clean_mop_switch)
}

// uint32 partner_dust_collection_switch = 12;
inline void RobotBehaviorState::clear_partner_dust_collection_switch() {
  _impl_.partner_dust_collection_switch_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_partner_dust_collection_switch() const {
  return _impl_.partner_dust_collection_switch_;
}
inline uint32_t RobotBehaviorState::partner_dust_collection_switch() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.partner_dust_collection_switch)
  return _internal_partner_dust_collection_switch();
}
inline void RobotBehaviorState::_internal_set_partner_dust_collection_switch(uint32_t value) {
  
  _impl_.partner_dust_collection_switch_ = value;
}
inline void RobotBehaviorState::set_partner_dust_collection_switch(uint32_t value) {
  _internal_set_partner_dust_collection_switch(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.partner_dust_collection_switch)
}

// .LSLAM.RobotBehaviorState.KeyStateType robot_key_state = 13;
inline void RobotBehaviorState::clear_robot_key_state() {
  _impl_.robot_key_state_ = 0;
}
inline ::LSLAM::RobotBehaviorState_KeyStateType RobotBehaviorState::_internal_robot_key_state() const {
  return static_cast< ::LSLAM::RobotBehaviorState_KeyStateType >(_impl_.robot_key_state_);
}
inline ::LSLAM::RobotBehaviorState_KeyStateType RobotBehaviorState::robot_key_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.robot_key_state)
  return _internal_robot_key_state();
}
inline void RobotBehaviorState::_internal_set_robot_key_state(::LSLAM::RobotBehaviorState_KeyStateType value) {
  
  _impl_.robot_key_state_ = value;
}
inline void RobotBehaviorState::set_robot_key_state(::LSLAM::RobotBehaviorState_KeyStateType value) {
  _internal_set_robot_key_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.robot_key_state)
}

// .LSLAM.RobotBehaviorState.KeyStateType partner_key_state = 14;
inline void RobotBehaviorState::clear_partner_key_state() {
  _impl_.partner_key_state_ = 0;
}
inline ::LSLAM::RobotBehaviorState_KeyStateType RobotBehaviorState::_internal_partner_key_state() const {
  return static_cast< ::LSLAM::RobotBehaviorState_KeyStateType >(_impl_.partner_key_state_);
}
inline ::LSLAM::RobotBehaviorState_KeyStateType RobotBehaviorState::partner_key_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.partner_key_state)
  return _internal_partner_key_state();
}
inline void RobotBehaviorState::_internal_set_partner_key_state(::LSLAM::RobotBehaviorState_KeyStateType value) {
  
  _impl_.partner_key_state_ = value;
}
inline void RobotBehaviorState::set_partner_key_state(::LSLAM::RobotBehaviorState_KeyStateType value) {
  _internal_set_partner_key_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.partner_key_state)
}

// .LSLAM.AbnormalState robot_current_abnormal_state = 15;
inline void RobotBehaviorState::clear_robot_current_abnormal_state() {
  _impl_.robot_current_abnormal_state_ = 0;
}
inline ::LSLAM::AbnormalState RobotBehaviorState::_internal_robot_current_abnormal_state() const {
  return static_cast< ::LSLAM::AbnormalState >(_impl_.robot_current_abnormal_state_);
}
inline ::LSLAM::AbnormalState RobotBehaviorState::robot_current_abnormal_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.robot_current_abnormal_state)
  return _internal_robot_current_abnormal_state();
}
inline void RobotBehaviorState::_internal_set_robot_current_abnormal_state(::LSLAM::AbnormalState value) {
  
  _impl_.robot_current_abnormal_state_ = value;
}
inline void RobotBehaviorState::set_robot_current_abnormal_state(::LSLAM::AbnormalState value) {
  _internal_set_robot_current_abnormal_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.robot_current_abnormal_state)
}

// uint32 partner_drying_mop_switch = 16;
inline void RobotBehaviorState::clear_partner_drying_mop_switch() {
  _impl_.partner_drying_mop_switch_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_partner_drying_mop_switch() const {
  return _impl_.partner_drying_mop_switch_;
}
inline uint32_t RobotBehaviorState::partner_drying_mop_switch() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.partner_drying_mop_switch)
  return _internal_partner_drying_mop_switch();
}
inline void RobotBehaviorState::_internal_set_partner_drying_mop_switch(uint32_t value) {
  
  _impl_.partner_drying_mop_switch_ = value;
}
inline void RobotBehaviorState::set_partner_drying_mop_switch(uint32_t value) {
  _internal_set_partner_drying_mop_switch(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.partner_drying_mop_switch)
}

// .LSLAM.RobotTaskBreathingLight breathing_light = 17;
inline void RobotBehaviorState::clear_breathing_light() {
  _impl_.breathing_light_ = 0;
}
inline ::LSLAM::RobotTaskBreathingLight RobotBehaviorState::_internal_breathing_light() const {
  return static_cast< ::LSLAM::RobotTaskBreathingLight >(_impl_.breathing_light_);
}
inline ::LSLAM::RobotTaskBreathingLight RobotBehaviorState::breathing_light() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.breathing_light)
  return _internal_breathing_light();
}
inline void RobotBehaviorState::_internal_set_breathing_light(::LSLAM::RobotTaskBreathingLight value) {
  
  _impl_.breathing_light_ = value;
}
inline void RobotBehaviorState::set_breathing_light(::LSLAM::RobotTaskBreathingLight value) {
  _internal_set_breathing_light(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.breathing_light)
}

// uint32 behind_distance = 18;
inline void RobotBehaviorState::clear_behind_distance() {
  _impl_.behind_distance_ = 0u;
}
inline uint32_t RobotBehaviorState::_internal_behind_distance() const {
  return _impl_.behind_distance_;
}
inline uint32_t RobotBehaviorState::behind_distance() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotBehaviorState.behind_distance)
  return _internal_behind_distance();
}
inline void RobotBehaviorState::_internal_set_behind_distance(uint32_t value) {
  
  _impl_.behind_distance_ = value;
}
inline void RobotBehaviorState::set_behind_distance(uint32_t value) {
  _internal_set_behind_distance(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotBehaviorState.behind_distance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LSLAM::RobotBehaviorState_KeyStateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::RobotBehaviorState_KeyStateType>() {
  return ::LSLAM::RobotBehaviorState_KeyStateType_descriptor();
}
template <> struct is_proto_enum< ::LSLAM::RobotTaskBreathingLight> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::RobotTaskBreathingLight>() {
  return ::LSLAM::RobotTaskBreathingLight_descriptor();
}
template <> struct is_proto_enum< ::LSLAM::AbnormalState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::AbnormalState>() {
  return ::LSLAM::AbnormalState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RobotBehaviorState_2eproto
