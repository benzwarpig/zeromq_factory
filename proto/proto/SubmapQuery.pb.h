// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SubmapQuery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SubmapQuery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SubmapQuery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "StatusResponse.pb.h"
#include "SubmapTexture.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SubmapQuery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SubmapQuery_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SubmapQuery_2eproto;
namespace LSLAM {
class SubmapQueryRequest;
struct SubmapQueryRequestDefaultTypeInternal;
extern SubmapQueryRequestDefaultTypeInternal _SubmapQueryRequest_default_instance_;
class SubmapQueryResponse;
struct SubmapQueryResponseDefaultTypeInternal;
extern SubmapQueryResponseDefaultTypeInternal _SubmapQueryResponse_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::SubmapQueryRequest* Arena::CreateMaybeMessage<::LSLAM::SubmapQueryRequest>(Arena*);
template<> ::LSLAM::SubmapQueryResponse* Arena::CreateMaybeMessage<::LSLAM::SubmapQueryResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class SubmapQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.SubmapQueryRequest) */ {
 public:
  inline SubmapQueryRequest() : SubmapQueryRequest(nullptr) {}
  ~SubmapQueryRequest() override;
  explicit PROTOBUF_CONSTEXPR SubmapQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmapQueryRequest(const SubmapQueryRequest& from);
  SubmapQueryRequest(SubmapQueryRequest&& from) noexcept
    : SubmapQueryRequest() {
    *this = ::std::move(from);
  }

  inline SubmapQueryRequest& operator=(const SubmapQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmapQueryRequest& operator=(SubmapQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmapQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmapQueryRequest* internal_default_instance() {
    return reinterpret_cast<const SubmapQueryRequest*>(
               &_SubmapQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubmapQueryRequest& a, SubmapQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmapQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmapQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmapQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmapQueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmapQueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmapQueryRequest& from) {
    SubmapQueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.SubmapQueryRequest";
  }
  protected:
  explicit SubmapQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryIdFieldNumber = 1,
    kSubmapIndexFieldNumber = 2,
  };
  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  int32_t trajectory_id() const;
  void set_trajectory_id(int32_t value);
  private:
  int32_t _internal_trajectory_id() const;
  void _internal_set_trajectory_id(int32_t value);
  public:

  // int32 submap_index = 2;
  void clear_submap_index();
  int32_t submap_index() const;
  void set_submap_index(int32_t value);
  private:
  int32_t _internal_submap_index() const;
  void _internal_set_submap_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.SubmapQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t trajectory_id_;
    int32_t submap_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SubmapQuery_2eproto;
};
// -------------------------------------------------------------------

class SubmapQueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.SubmapQueryResponse) */ {
 public:
  inline SubmapQueryResponse() : SubmapQueryResponse(nullptr) {}
  ~SubmapQueryResponse() override;
  explicit PROTOBUF_CONSTEXPR SubmapQueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmapQueryResponse(const SubmapQueryResponse& from);
  SubmapQueryResponse(SubmapQueryResponse&& from) noexcept
    : SubmapQueryResponse() {
    *this = ::std::move(from);
  }

  inline SubmapQueryResponse& operator=(const SubmapQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmapQueryResponse& operator=(SubmapQueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmapQueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmapQueryResponse* internal_default_instance() {
    return reinterpret_cast<const SubmapQueryResponse*>(
               &_SubmapQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubmapQueryResponse& a, SubmapQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmapQueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmapQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmapQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmapQueryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmapQueryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmapQueryResponse& from) {
    SubmapQueryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapQueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.SubmapQueryResponse";
  }
  protected:
  explicit SubmapQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTexturesFieldNumber = 3,
    kStatusFieldNumber = 1,
    kSubmapVersionFieldNumber = 2,
  };
  // repeated .LSLAM.SubmapTexture textures = 3;
  int textures_size() const;
  private:
  int _internal_textures_size() const;
  public:
  void clear_textures();
  ::LSLAM::SubmapTexture* mutable_textures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::SubmapTexture >*
      mutable_textures();
  private:
  const ::LSLAM::SubmapTexture& _internal_textures(int index) const;
  ::LSLAM::SubmapTexture* _internal_add_textures();
  public:
  const ::LSLAM::SubmapTexture& textures(int index) const;
  ::LSLAM::SubmapTexture* add_textures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::SubmapTexture >&
      textures() const;

  // .LSLAM.StatusResponse status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::LSLAM::StatusResponse& status() const;
  PROTOBUF_NODISCARD ::LSLAM::StatusResponse* release_status();
  ::LSLAM::StatusResponse* mutable_status();
  void set_allocated_status(::LSLAM::StatusResponse* status);
  private:
  const ::LSLAM::StatusResponse& _internal_status() const;
  ::LSLAM::StatusResponse* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::LSLAM::StatusResponse* status);
  ::LSLAM::StatusResponse* unsafe_arena_release_status();

  // int32 submap_version = 2;
  void clear_submap_version();
  int32_t submap_version() const;
  void set_submap_version(int32_t value);
  private:
  int32_t _internal_submap_version() const;
  void _internal_set_submap_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.SubmapQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::SubmapTexture > textures_;
    ::LSLAM::StatusResponse* status_;
    int32_t submap_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SubmapQuery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmapQueryRequest

// int32 trajectory_id = 1;
inline void SubmapQueryRequest::clear_trajectory_id() {
  _impl_.trajectory_id_ = 0;
}
inline int32_t SubmapQueryRequest::_internal_trajectory_id() const {
  return _impl_.trajectory_id_;
}
inline int32_t SubmapQueryRequest::trajectory_id() const {
  // @@protoc_insertion_point(field_get:LSLAM.SubmapQueryRequest.trajectory_id)
  return _internal_trajectory_id();
}
inline void SubmapQueryRequest::_internal_set_trajectory_id(int32_t value) {
  
  _impl_.trajectory_id_ = value;
}
inline void SubmapQueryRequest::set_trajectory_id(int32_t value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:LSLAM.SubmapQueryRequest.trajectory_id)
}

// int32 submap_index = 2;
inline void SubmapQueryRequest::clear_submap_index() {
  _impl_.submap_index_ = 0;
}
inline int32_t SubmapQueryRequest::_internal_submap_index() const {
  return _impl_.submap_index_;
}
inline int32_t SubmapQueryRequest::submap_index() const {
  // @@protoc_insertion_point(field_get:LSLAM.SubmapQueryRequest.submap_index)
  return _internal_submap_index();
}
inline void SubmapQueryRequest::_internal_set_submap_index(int32_t value) {
  
  _impl_.submap_index_ = value;
}
inline void SubmapQueryRequest::set_submap_index(int32_t value) {
  _internal_set_submap_index(value);
  // @@protoc_insertion_point(field_set:LSLAM.SubmapQueryRequest.submap_index)
}

// -------------------------------------------------------------------

// SubmapQueryResponse

// .LSLAM.StatusResponse status = 1;
inline bool SubmapQueryResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool SubmapQueryResponse::has_status() const {
  return _internal_has_status();
}
inline const ::LSLAM::StatusResponse& SubmapQueryResponse::_internal_status() const {
  const ::LSLAM::StatusResponse* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::StatusResponse&>(
      ::LSLAM::_StatusResponse_default_instance_);
}
inline const ::LSLAM::StatusResponse& SubmapQueryResponse::status() const {
  // @@protoc_insertion_point(field_get:LSLAM.SubmapQueryResponse.status)
  return _internal_status();
}
inline void SubmapQueryResponse::unsafe_arena_set_allocated_status(
    ::LSLAM::StatusResponse* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.SubmapQueryResponse.status)
}
inline ::LSLAM::StatusResponse* SubmapQueryResponse::release_status() {
  
  ::LSLAM::StatusResponse* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::StatusResponse* SubmapQueryResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:LSLAM.SubmapQueryResponse.status)
  
  ::LSLAM::StatusResponse* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::LSLAM::StatusResponse* SubmapQueryResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::StatusResponse>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::LSLAM::StatusResponse* SubmapQueryResponse::mutable_status() {
  ::LSLAM::StatusResponse* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:LSLAM.SubmapQueryResponse.status)
  return _msg;
}
inline void SubmapQueryResponse::set_allocated_status(::LSLAM::StatusResponse* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.SubmapQueryResponse.status)
}

// int32 submap_version = 2;
inline void SubmapQueryResponse::clear_submap_version() {
  _impl_.submap_version_ = 0;
}
inline int32_t SubmapQueryResponse::_internal_submap_version() const {
  return _impl_.submap_version_;
}
inline int32_t SubmapQueryResponse::submap_version() const {
  // @@protoc_insertion_point(field_get:LSLAM.SubmapQueryResponse.submap_version)
  return _internal_submap_version();
}
inline void SubmapQueryResponse::_internal_set_submap_version(int32_t value) {
  
  _impl_.submap_version_ = value;
}
inline void SubmapQueryResponse::set_submap_version(int32_t value) {
  _internal_set_submap_version(value);
  // @@protoc_insertion_point(field_set:LSLAM.SubmapQueryResponse.submap_version)
}

// repeated .LSLAM.SubmapTexture textures = 3;
inline int SubmapQueryResponse::_internal_textures_size() const {
  return _impl_.textures_.size();
}
inline int SubmapQueryResponse::textures_size() const {
  return _internal_textures_size();
}
inline ::LSLAM::SubmapTexture* SubmapQueryResponse::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.SubmapQueryResponse.textures)
  return _impl_.textures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::SubmapTexture >*
SubmapQueryResponse::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.SubmapQueryResponse.textures)
  return &_impl_.textures_;
}
inline const ::LSLAM::SubmapTexture& SubmapQueryResponse::_internal_textures(int index) const {
  return _impl_.textures_.Get(index);
}
inline const ::LSLAM::SubmapTexture& SubmapQueryResponse::textures(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.SubmapQueryResponse.textures)
  return _internal_textures(index);
}
inline ::LSLAM::SubmapTexture* SubmapQueryResponse::_internal_add_textures() {
  return _impl_.textures_.Add();
}
inline ::LSLAM::SubmapTexture* SubmapQueryResponse::add_textures() {
  ::LSLAM::SubmapTexture* _add = _internal_add_textures();
  // @@protoc_insertion_point(field_add:LSLAM.SubmapQueryResponse.textures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::SubmapTexture >&
SubmapQueryResponse::textures() const {
  // @@protoc_insertion_point(field_list:LSLAM.SubmapQueryResponse.textures)
  return _impl_.textures_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SubmapQuery_2eproto
