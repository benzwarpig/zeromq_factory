// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TuyaMapId.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TuyaMapId_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TuyaMapId_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TuyaMapId_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TuyaMapId_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TuyaMapId_2eproto;
namespace LSLAM {
class TuyaMapId;
struct TuyaMapIdDefaultTypeInternal;
extern TuyaMapIdDefaultTypeInternal _TuyaMapId_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::TuyaMapId* Arena::CreateMaybeMessage<::LSLAM::TuyaMapId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class TuyaMapId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.TuyaMapId) */ {
 public:
  inline TuyaMapId() : TuyaMapId(nullptr) {}
  ~TuyaMapId() override;
  explicit PROTOBUF_CONSTEXPR TuyaMapId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuyaMapId(const TuyaMapId& from);
  TuyaMapId(TuyaMapId&& from) noexcept
    : TuyaMapId() {
    *this = ::std::move(from);
  }

  inline TuyaMapId& operator=(const TuyaMapId& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuyaMapId& operator=(TuyaMapId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TuyaMapId& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuyaMapId* internal_default_instance() {
    return reinterpret_cast<const TuyaMapId*>(
               &_TuyaMapId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TuyaMapId& a, TuyaMapId& b) {
    a.Swap(&b);
  }
  inline void Swap(TuyaMapId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuyaMapId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TuyaMapId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TuyaMapId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TuyaMapId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TuyaMapId& from) {
    TuyaMapId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuyaMapId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.TuyaMapId";
  }
  protected:
  explicit TuyaMapId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionBeforeFirmwareUpgradeFieldNumber = 2,
    kTuyaMapIdFieldNumber = 1,
    kFirmwareUpgradeFlagValueFieldNumber = 3,
  };
  // string version_before_firmware_upgrade = 2;
  void clear_version_before_firmware_upgrade();
  const std::string& version_before_firmware_upgrade() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_before_firmware_upgrade(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_before_firmware_upgrade();
  PROTOBUF_NODISCARD std::string* release_version_before_firmware_upgrade();
  void set_allocated_version_before_firmware_upgrade(std::string* version_before_firmware_upgrade);
  private:
  const std::string& _internal_version_before_firmware_upgrade() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_before_firmware_upgrade(const std::string& value);
  std::string* _internal_mutable_version_before_firmware_upgrade();
  public:

  // int32 tuya_map_id = 1;
  void clear_tuya_map_id();
  int32_t tuya_map_id() const;
  void set_tuya_map_id(int32_t value);
  private:
  int32_t _internal_tuya_map_id() const;
  void _internal_set_tuya_map_id(int32_t value);
  public:

  // int32 firmware_upgrade_flag_value = 3;
  void clear_firmware_upgrade_flag_value();
  int32_t firmware_upgrade_flag_value() const;
  void set_firmware_upgrade_flag_value(int32_t value);
  private:
  int32_t _internal_firmware_upgrade_flag_value() const;
  void _internal_set_firmware_upgrade_flag_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.TuyaMapId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_before_firmware_upgrade_;
    int32_t tuya_map_id_;
    int32_t firmware_upgrade_flag_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TuyaMapId_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TuyaMapId

// int32 tuya_map_id = 1;
inline void TuyaMapId::clear_tuya_map_id() {
  _impl_.tuya_map_id_ = 0;
}
inline int32_t TuyaMapId::_internal_tuya_map_id() const {
  return _impl_.tuya_map_id_;
}
inline int32_t TuyaMapId::tuya_map_id() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaMapId.tuya_map_id)
  return _internal_tuya_map_id();
}
inline void TuyaMapId::_internal_set_tuya_map_id(int32_t value) {
  
  _impl_.tuya_map_id_ = value;
}
inline void TuyaMapId::set_tuya_map_id(int32_t value) {
  _internal_set_tuya_map_id(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaMapId.tuya_map_id)
}

// string version_before_firmware_upgrade = 2;
inline void TuyaMapId::clear_version_before_firmware_upgrade() {
  _impl_.version_before_firmware_upgrade_.ClearToEmpty();
}
inline const std::string& TuyaMapId::version_before_firmware_upgrade() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaMapId.version_before_firmware_upgrade)
  return _internal_version_before_firmware_upgrade();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TuyaMapId::set_version_before_firmware_upgrade(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_before_firmware_upgrade_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LSLAM.TuyaMapId.version_before_firmware_upgrade)
}
inline std::string* TuyaMapId::mutable_version_before_firmware_upgrade() {
  std::string* _s = _internal_mutable_version_before_firmware_upgrade();
  // @@protoc_insertion_point(field_mutable:LSLAM.TuyaMapId.version_before_firmware_upgrade)
  return _s;
}
inline const std::string& TuyaMapId::_internal_version_before_firmware_upgrade() const {
  return _impl_.version_before_firmware_upgrade_.Get();
}
inline void TuyaMapId::_internal_set_version_before_firmware_upgrade(const std::string& value) {
  
  _impl_.version_before_firmware_upgrade_.Set(value, GetArenaForAllocation());
}
inline std::string* TuyaMapId::_internal_mutable_version_before_firmware_upgrade() {
  
  return _impl_.version_before_firmware_upgrade_.Mutable(GetArenaForAllocation());
}
inline std::string* TuyaMapId::release_version_before_firmware_upgrade() {
  // @@protoc_insertion_point(field_release:LSLAM.TuyaMapId.version_before_firmware_upgrade)
  return _impl_.version_before_firmware_upgrade_.Release();
}
inline void TuyaMapId::set_allocated_version_before_firmware_upgrade(std::string* version_before_firmware_upgrade) {
  if (version_before_firmware_upgrade != nullptr) {
    
  } else {
    
  }
  _impl_.version_before_firmware_upgrade_.SetAllocated(version_before_firmware_upgrade, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_before_firmware_upgrade_.IsDefault()) {
    _impl_.version_before_firmware_upgrade_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LSLAM.TuyaMapId.version_before_firmware_upgrade)
}

// int32 firmware_upgrade_flag_value = 3;
inline void TuyaMapId::clear_firmware_upgrade_flag_value() {
  _impl_.firmware_upgrade_flag_value_ = 0;
}
inline int32_t TuyaMapId::_internal_firmware_upgrade_flag_value() const {
  return _impl_.firmware_upgrade_flag_value_;
}
inline int32_t TuyaMapId::firmware_upgrade_flag_value() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaMapId.firmware_upgrade_flag_value)
  return _internal_firmware_upgrade_flag_value();
}
inline void TuyaMapId::_internal_set_firmware_upgrade_flag_value(int32_t value) {
  
  _impl_.firmware_upgrade_flag_value_ = value;
}
inline void TuyaMapId::set_firmware_upgrade_flag_value(int32_t value) {
  _internal_set_firmware_upgrade_flag_value(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaMapId.firmware_upgrade_flag_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TuyaMapId_2eproto
