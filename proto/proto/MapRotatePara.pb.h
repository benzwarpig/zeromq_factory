// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapRotatePara.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MapRotatePara_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MapRotatePara_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MapRotatePara_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MapRotatePara_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MapRotatePara_2eproto;
namespace LSLAM {
class MapRotate;
struct MapRotateDefaultTypeInternal;
extern MapRotateDefaultTypeInternal _MapRotate_default_instance_;
class MapRotatePara;
struct MapRotateParaDefaultTypeInternal;
extern MapRotateParaDefaultTypeInternal _MapRotatePara_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::MapRotate* Arena::CreateMaybeMessage<::LSLAM::MapRotate>(Arena*);
template<> ::LSLAM::MapRotatePara* Arena::CreateMaybeMessage<::LSLAM::MapRotatePara>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class MapRotate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.MapRotate) */ {
 public:
  inline MapRotate() : MapRotate(nullptr) {}
  ~MapRotate() override;
  explicit PROTOBUF_CONSTEXPR MapRotate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapRotate(const MapRotate& from);
  MapRotate(MapRotate&& from) noexcept
    : MapRotate() {
    *this = ::std::move(from);
  }

  inline MapRotate& operator=(const MapRotate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapRotate& operator=(MapRotate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapRotate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapRotate* internal_default_instance() {
    return reinterpret_cast<const MapRotate*>(
               &_MapRotate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapRotate& a, MapRotate& b) {
    a.Swap(&b);
  }
  inline void Swap(MapRotate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapRotate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapRotate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapRotate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapRotate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapRotate& from) {
    MapRotate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapRotate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.MapRotate";
  }
  protected:
  explicit MapRotate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapNameFieldNumber = 1,
    kThetaFieldNumber = 2,
  };
  // string map_name = 1;
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_NODISCARD std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // double theta = 2;
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.MapRotate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
    double theta_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MapRotatePara_2eproto;
};
// -------------------------------------------------------------------

class MapRotatePara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.MapRotatePara) */ {
 public:
  inline MapRotatePara() : MapRotatePara(nullptr) {}
  ~MapRotatePara() override;
  explicit PROTOBUF_CONSTEXPR MapRotatePara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapRotatePara(const MapRotatePara& from);
  MapRotatePara(MapRotatePara&& from) noexcept
    : MapRotatePara() {
    *this = ::std::move(from);
  }

  inline MapRotatePara& operator=(const MapRotatePara& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapRotatePara& operator=(MapRotatePara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapRotatePara& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapRotatePara* internal_default_instance() {
    return reinterpret_cast<const MapRotatePara*>(
               &_MapRotatePara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MapRotatePara& a, MapRotatePara& b) {
    a.Swap(&b);
  }
  inline void Swap(MapRotatePara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapRotatePara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapRotatePara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapRotatePara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapRotatePara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapRotatePara& from) {
    MapRotatePara::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapRotatePara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.MapRotatePara";
  }
  protected:
  explicit MapRotatePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapRotateFieldNumber = 1,
  };
  // repeated .LSLAM.MapRotate map_rotate = 1;
  int map_rotate_size() const;
  private:
  int _internal_map_rotate_size() const;
  public:
  void clear_map_rotate();
  ::LSLAM::MapRotate* mutable_map_rotate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::MapRotate >*
      mutable_map_rotate();
  private:
  const ::LSLAM::MapRotate& _internal_map_rotate(int index) const;
  ::LSLAM::MapRotate* _internal_add_map_rotate();
  public:
  const ::LSLAM::MapRotate& map_rotate(int index) const;
  ::LSLAM::MapRotate* add_map_rotate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::MapRotate >&
      map_rotate() const;

  // @@protoc_insertion_point(class_scope:LSLAM.MapRotatePara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::MapRotate > map_rotate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MapRotatePara_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapRotate

// string map_name = 1;
inline void MapRotate::clear_map_name() {
  _impl_.map_name_.ClearToEmpty();
}
inline const std::string& MapRotate::map_name() const {
  // @@protoc_insertion_point(field_get:LSLAM.MapRotate.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapRotate::set_map_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LSLAM.MapRotate.map_name)
}
inline std::string* MapRotate::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:LSLAM.MapRotate.map_name)
  return _s;
}
inline const std::string& MapRotate::_internal_map_name() const {
  return _impl_.map_name_.Get();
}
inline void MapRotate::_internal_set_map_name(const std::string& value) {
  
  _impl_.map_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MapRotate::_internal_mutable_map_name() {
  
  return _impl_.map_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MapRotate::release_map_name() {
  // @@protoc_insertion_point(field_release:LSLAM.MapRotate.map_name)
  return _impl_.map_name_.Release();
}
inline void MapRotate::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  _impl_.map_name_.SetAllocated(map_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_name_.IsDefault()) {
    _impl_.map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LSLAM.MapRotate.map_name)
}

// double theta = 2;
inline void MapRotate::clear_theta() {
  _impl_.theta_ = 0;
}
inline double MapRotate::_internal_theta() const {
  return _impl_.theta_;
}
inline double MapRotate::theta() const {
  // @@protoc_insertion_point(field_get:LSLAM.MapRotate.theta)
  return _internal_theta();
}
inline void MapRotate::_internal_set_theta(double value) {
  
  _impl_.theta_ = value;
}
inline void MapRotate::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:LSLAM.MapRotate.theta)
}

// -------------------------------------------------------------------

// MapRotatePara

// repeated .LSLAM.MapRotate map_rotate = 1;
inline int MapRotatePara::_internal_map_rotate_size() const {
  return _impl_.map_rotate_.size();
}
inline int MapRotatePara::map_rotate_size() const {
  return _internal_map_rotate_size();
}
inline void MapRotatePara::clear_map_rotate() {
  _impl_.map_rotate_.Clear();
}
inline ::LSLAM::MapRotate* MapRotatePara::mutable_map_rotate(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.MapRotatePara.map_rotate)
  return _impl_.map_rotate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::MapRotate >*
MapRotatePara::mutable_map_rotate() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.MapRotatePara.map_rotate)
  return &_impl_.map_rotate_;
}
inline const ::LSLAM::MapRotate& MapRotatePara::_internal_map_rotate(int index) const {
  return _impl_.map_rotate_.Get(index);
}
inline const ::LSLAM::MapRotate& MapRotatePara::map_rotate(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.MapRotatePara.map_rotate)
  return _internal_map_rotate(index);
}
inline ::LSLAM::MapRotate* MapRotatePara::_internal_add_map_rotate() {
  return _impl_.map_rotate_.Add();
}
inline ::LSLAM::MapRotate* MapRotatePara::add_map_rotate() {
  ::LSLAM::MapRotate* _add = _internal_add_map_rotate();
  // @@protoc_insertion_point(field_add:LSLAM.MapRotatePara.map_rotate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::MapRotate >&
MapRotatePara::map_rotate() const {
  // @@protoc_insertion_point(field_list:LSLAM.MapRotatePara.map_rotate)
  return _impl_.map_rotate_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MapRotatePara_2eproto
