// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TuyaDpConfigurationFile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TuyaDpConfigurationFile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TuyaDpConfigurationFile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Points.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TuyaDpConfigurationFile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TuyaDpConfigurationFile_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TuyaDpConfigurationFile_2eproto;
namespace LSLAM {
class PartitionMerge;
struct PartitionMergeDefaultTypeInternal;
extern PartitionMergeDefaultTypeInternal _PartitionMerge_default_instance_;
class PartitionSegmentation;
struct PartitionSegmentationDefaultTypeInternal;
extern PartitionSegmentationDefaultTypeInternal _PartitionSegmentation_default_instance_;
class SetPenaltyArea;
struct SetPenaltyAreaDefaultTypeInternal;
extern SetPenaltyAreaDefaultTypeInternal _SetPenaltyArea_default_instance_;
class SetVirtualWall;
struct SetVirtualWallDefaultTypeInternal;
extern SetVirtualWallDefaultTypeInternal _SetVirtualWall_default_instance_;
class TuyaCleanOrder;
struct TuyaCleanOrderDefaultTypeInternal;
extern TuyaCleanOrderDefaultTypeInternal _TuyaCleanOrder_default_instance_;
class TuyaRoomName;
struct TuyaRoomNameDefaultTypeInternal;
extern TuyaRoomNameDefaultTypeInternal _TuyaRoomName_default_instance_;
class TuyaRoomProperties;
struct TuyaRoomPropertiesDefaultTypeInternal;
extern TuyaRoomPropertiesDefaultTypeInternal _TuyaRoomProperties_default_instance_;
class TuyaSettingConfigurationFile;
struct TuyaSettingConfigurationFileDefaultTypeInternal;
extern TuyaSettingConfigurationFileDefaultTypeInternal _TuyaSettingConfigurationFile_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::PartitionMerge* Arena::CreateMaybeMessage<::LSLAM::PartitionMerge>(Arena*);
template<> ::LSLAM::PartitionSegmentation* Arena::CreateMaybeMessage<::LSLAM::PartitionSegmentation>(Arena*);
template<> ::LSLAM::SetPenaltyArea* Arena::CreateMaybeMessage<::LSLAM::SetPenaltyArea>(Arena*);
template<> ::LSLAM::SetVirtualWall* Arena::CreateMaybeMessage<::LSLAM::SetVirtualWall>(Arena*);
template<> ::LSLAM::TuyaCleanOrder* Arena::CreateMaybeMessage<::LSLAM::TuyaCleanOrder>(Arena*);
template<> ::LSLAM::TuyaRoomName* Arena::CreateMaybeMessage<::LSLAM::TuyaRoomName>(Arena*);
template<> ::LSLAM::TuyaRoomProperties* Arena::CreateMaybeMessage<::LSLAM::TuyaRoomProperties>(Arena*);
template<> ::LSLAM::TuyaSettingConfigurationFile* Arena::CreateMaybeMessage<::LSLAM::TuyaSettingConfigurationFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

enum SetPenaltyArea_PenaltyAreaMode : int {
  SetPenaltyArea_PenaltyAreaMode_ban_clean_and_sweep = 0,
  SetPenaltyArea_PenaltyAreaMode_ban_clean = 1,
  SetPenaltyArea_PenaltyAreaMode_ban_sweep = 2,
  SetPenaltyArea_PenaltyAreaMode_SetPenaltyArea_PenaltyAreaMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SetPenaltyArea_PenaltyAreaMode_SetPenaltyArea_PenaltyAreaMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SetPenaltyArea_PenaltyAreaMode_IsValid(int value);
constexpr SetPenaltyArea_PenaltyAreaMode SetPenaltyArea_PenaltyAreaMode_PenaltyAreaMode_MIN = SetPenaltyArea_PenaltyAreaMode_ban_clean_and_sweep;
constexpr SetPenaltyArea_PenaltyAreaMode SetPenaltyArea_PenaltyAreaMode_PenaltyAreaMode_MAX = SetPenaltyArea_PenaltyAreaMode_ban_sweep;
constexpr int SetPenaltyArea_PenaltyAreaMode_PenaltyAreaMode_ARRAYSIZE = SetPenaltyArea_PenaltyAreaMode_PenaltyAreaMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetPenaltyArea_PenaltyAreaMode_descriptor();
template<typename T>
inline const std::string& SetPenaltyArea_PenaltyAreaMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetPenaltyArea_PenaltyAreaMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetPenaltyArea_PenaltyAreaMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetPenaltyArea_PenaltyAreaMode_descriptor(), enum_t_value);
}
inline bool SetPenaltyArea_PenaltyAreaMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetPenaltyArea_PenaltyAreaMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetPenaltyArea_PenaltyAreaMode>(
    SetPenaltyArea_PenaltyAreaMode_descriptor(), name, value);
}
enum FanMotorLevel : int {
  FAN_MOTOR_CLOSE = 0,
  FAN_MOTOR_MUTE = 1,
  FAN_MOTOR_NORMAL = 2,
  FAN_MOTOR_STRONG = 3,
  FAN_MOTOR_SUPER_STRONG = 4,
  FAN_MOTOR_NOT_SET = 5,
  FanMotorLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FanMotorLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FanMotorLevel_IsValid(int value);
constexpr FanMotorLevel FanMotorLevel_MIN = FAN_MOTOR_CLOSE;
constexpr FanMotorLevel FanMotorLevel_MAX = FAN_MOTOR_NOT_SET;
constexpr int FanMotorLevel_ARRAYSIZE = FanMotorLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FanMotorLevel_descriptor();
template<typename T>
inline const std::string& FanMotorLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FanMotorLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FanMotorLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FanMotorLevel_descriptor(), enum_t_value);
}
inline bool FanMotorLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FanMotorLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FanMotorLevel>(
    FanMotorLevel_descriptor(), name, value);
}
enum WaterBoxLevel : int {
  WATER_BOX_LEVEL_CLOSE = 0,
  WATER_BOX_LEVEL_ONE = 1,
  WATER_BOX_LEVEL_TWO = 2,
  WATER_BOX_LEVEL_THREE = 3,
  WATER_BOX_LEVEL_NOT_SET = 4,
  WaterBoxLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WaterBoxLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WaterBoxLevel_IsValid(int value);
constexpr WaterBoxLevel WaterBoxLevel_MIN = WATER_BOX_LEVEL_CLOSE;
constexpr WaterBoxLevel WaterBoxLevel_MAX = WATER_BOX_LEVEL_NOT_SET;
constexpr int WaterBoxLevel_ARRAYSIZE = WaterBoxLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaterBoxLevel_descriptor();
template<typename T>
inline const std::string& WaterBoxLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WaterBoxLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WaterBoxLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WaterBoxLevel_descriptor(), enum_t_value);
}
inline bool WaterBoxLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WaterBoxLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WaterBoxLevel>(
    WaterBoxLevel_descriptor(), name, value);
}
enum CleanMode : int {
  CLEAN_AND_SWEEP = 0,
  CLEAN = 1,
  SWEEP = 2,
  CleanMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CleanMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CleanMode_IsValid(int value);
constexpr CleanMode CleanMode_MIN = CLEAN_AND_SWEEP;
constexpr CleanMode CleanMode_MAX = SWEEP;
constexpr int CleanMode_ARRAYSIZE = CleanMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CleanMode_descriptor();
template<typename T>
inline const std::string& CleanMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CleanMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CleanMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CleanMode_descriptor(), enum_t_value);
}
inline bool CleanMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CleanMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CleanMode>(
    CleanMode_descriptor(), name, value);
}
// ===================================================================

class SetVirtualWall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.SetVirtualWall) */ {
 public:
  inline SetVirtualWall() : SetVirtualWall(nullptr) {}
  ~SetVirtualWall() override;
  explicit PROTOBUF_CONSTEXPR SetVirtualWall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVirtualWall(const SetVirtualWall& from);
  SetVirtualWall(SetVirtualWall&& from) noexcept
    : SetVirtualWall() {
    *this = ::std::move(from);
  }

  inline SetVirtualWall& operator=(const SetVirtualWall& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVirtualWall& operator=(SetVirtualWall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVirtualWall& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVirtualWall* internal_default_instance() {
    return reinterpret_cast<const SetVirtualWall*>(
               &_SetVirtualWall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetVirtualWall& a, SetVirtualWall& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVirtualWall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVirtualWall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVirtualWall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVirtualWall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVirtualWall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetVirtualWall& from) {
    SetVirtualWall::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVirtualWall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.SetVirtualWall";
  }
  protected:
  explicit SetVirtualWall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualWallPointsFieldNumber = 2,
    kVirtualWallNumberFieldNumber = 1,
  };
  // repeated .LSLAM.Points virtual_wall_points = 2;
  int virtual_wall_points_size() const;
  private:
  int _internal_virtual_wall_points_size() const;
  public:
  void clear_virtual_wall_points();
  ::LSLAM::Points* mutable_virtual_wall_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >*
      mutable_virtual_wall_points();
  private:
  const ::LSLAM::Points& _internal_virtual_wall_points(int index) const;
  ::LSLAM::Points* _internal_add_virtual_wall_points();
  public:
  const ::LSLAM::Points& virtual_wall_points(int index) const;
  ::LSLAM::Points* add_virtual_wall_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >&
      virtual_wall_points() const;

  // int32 virtual_wall_number = 1;
  void clear_virtual_wall_number();
  int32_t virtual_wall_number() const;
  void set_virtual_wall_number(int32_t value);
  private:
  int32_t _internal_virtual_wall_number() const;
  void _internal_set_virtual_wall_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.SetVirtualWall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points > virtual_wall_points_;
    int32_t virtual_wall_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TuyaDpConfigurationFile_2eproto;
};
// -------------------------------------------------------------------

class SetPenaltyArea final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.SetPenaltyArea) */ {
 public:
  inline SetPenaltyArea() : SetPenaltyArea(nullptr) {}
  ~SetPenaltyArea() override;
  explicit PROTOBUF_CONSTEXPR SetPenaltyArea(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPenaltyArea(const SetPenaltyArea& from);
  SetPenaltyArea(SetPenaltyArea&& from) noexcept
    : SetPenaltyArea() {
    *this = ::std::move(from);
  }

  inline SetPenaltyArea& operator=(const SetPenaltyArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPenaltyArea& operator=(SetPenaltyArea&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPenaltyArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPenaltyArea* internal_default_instance() {
    return reinterpret_cast<const SetPenaltyArea*>(
               &_SetPenaltyArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetPenaltyArea& a, SetPenaltyArea& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPenaltyArea* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPenaltyArea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPenaltyArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPenaltyArea>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPenaltyArea& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPenaltyArea& from) {
    SetPenaltyArea::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPenaltyArea* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.SetPenaltyArea";
  }
  protected:
  explicit SetPenaltyArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetPenaltyArea_PenaltyAreaMode PenaltyAreaMode;
  static constexpr PenaltyAreaMode ban_clean_and_sweep =
    SetPenaltyArea_PenaltyAreaMode_ban_clean_and_sweep;
  static constexpr PenaltyAreaMode ban_clean =
    SetPenaltyArea_PenaltyAreaMode_ban_clean;
  static constexpr PenaltyAreaMode ban_sweep =
    SetPenaltyArea_PenaltyAreaMode_ban_sweep;
  static inline bool PenaltyAreaMode_IsValid(int value) {
    return SetPenaltyArea_PenaltyAreaMode_IsValid(value);
  }
  static constexpr PenaltyAreaMode PenaltyAreaMode_MIN =
    SetPenaltyArea_PenaltyAreaMode_PenaltyAreaMode_MIN;
  static constexpr PenaltyAreaMode PenaltyAreaMode_MAX =
    SetPenaltyArea_PenaltyAreaMode_PenaltyAreaMode_MAX;
  static constexpr int PenaltyAreaMode_ARRAYSIZE =
    SetPenaltyArea_PenaltyAreaMode_PenaltyAreaMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PenaltyAreaMode_descriptor() {
    return SetPenaltyArea_PenaltyAreaMode_descriptor();
  }
  template<typename T>
  static inline const std::string& PenaltyAreaMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PenaltyAreaMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PenaltyAreaMode_Name.");
    return SetPenaltyArea_PenaltyAreaMode_Name(enum_t_value);
  }
  static inline bool PenaltyAreaMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PenaltyAreaMode* value) {
    return SetPenaltyArea_PenaltyAreaMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBanSweepPenaltyAreaPointsFieldNumber = 2,
    kBanCleanAndSweepPenaltyAreaPointsFieldNumber = 4,
    kBanSweepPenaltyAreaNumberFieldNumber = 1,
    kBanCleanAndSweepPenaltyAreaNumberFieldNumber = 3,
  };
  // repeated .LSLAM.Points ban_sweep_penalty_area_points = 2;
  int ban_sweep_penalty_area_points_size() const;
  private:
  int _internal_ban_sweep_penalty_area_points_size() const;
  public:
  void clear_ban_sweep_penalty_area_points();
  ::LSLAM::Points* mutable_ban_sweep_penalty_area_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >*
      mutable_ban_sweep_penalty_area_points();
  private:
  const ::LSLAM::Points& _internal_ban_sweep_penalty_area_points(int index) const;
  ::LSLAM::Points* _internal_add_ban_sweep_penalty_area_points();
  public:
  const ::LSLAM::Points& ban_sweep_penalty_area_points(int index) const;
  ::LSLAM::Points* add_ban_sweep_penalty_area_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >&
      ban_sweep_penalty_area_points() const;

  // repeated .LSLAM.Points ban_clean_and_sweep_penalty_area_points = 4;
  int ban_clean_and_sweep_penalty_area_points_size() const;
  private:
  int _internal_ban_clean_and_sweep_penalty_area_points_size() const;
  public:
  void clear_ban_clean_and_sweep_penalty_area_points();
  ::LSLAM::Points* mutable_ban_clean_and_sweep_penalty_area_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >*
      mutable_ban_clean_and_sweep_penalty_area_points();
  private:
  const ::LSLAM::Points& _internal_ban_clean_and_sweep_penalty_area_points(int index) const;
  ::LSLAM::Points* _internal_add_ban_clean_and_sweep_penalty_area_points();
  public:
  const ::LSLAM::Points& ban_clean_and_sweep_penalty_area_points(int index) const;
  ::LSLAM::Points* add_ban_clean_and_sweep_penalty_area_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >&
      ban_clean_and_sweep_penalty_area_points() const;

  // int32 ban_sweep_penalty_area_number = 1;
  void clear_ban_sweep_penalty_area_number();
  int32_t ban_sweep_penalty_area_number() const;
  void set_ban_sweep_penalty_area_number(int32_t value);
  private:
  int32_t _internal_ban_sweep_penalty_area_number() const;
  void _internal_set_ban_sweep_penalty_area_number(int32_t value);
  public:

  // int32 ban_clean_and_sweep_penalty_area_number = 3;
  void clear_ban_clean_and_sweep_penalty_area_number();
  int32_t ban_clean_and_sweep_penalty_area_number() const;
  void set_ban_clean_and_sweep_penalty_area_number(int32_t value);
  private:
  int32_t _internal_ban_clean_and_sweep_penalty_area_number() const;
  void _internal_set_ban_clean_and_sweep_penalty_area_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.SetPenaltyArea)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points > ban_sweep_penalty_area_points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points > ban_clean_and_sweep_penalty_area_points_;
    int32_t ban_sweep_penalty_area_number_;
    int32_t ban_clean_and_sweep_penalty_area_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TuyaDpConfigurationFile_2eproto;
};
// -------------------------------------------------------------------

class PartitionSegmentation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.PartitionSegmentation) */ {
 public:
  inline PartitionSegmentation() : PartitionSegmentation(nullptr) {}
  ~PartitionSegmentation() override;
  explicit PROTOBUF_CONSTEXPR PartitionSegmentation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartitionSegmentation(const PartitionSegmentation& from);
  PartitionSegmentation(PartitionSegmentation&& from) noexcept
    : PartitionSegmentation() {
    *this = ::std::move(from);
  }

  inline PartitionSegmentation& operator=(const PartitionSegmentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionSegmentation& operator=(PartitionSegmentation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartitionSegmentation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartitionSegmentation* internal_default_instance() {
    return reinterpret_cast<const PartitionSegmentation*>(
               &_PartitionSegmentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PartitionSegmentation& a, PartitionSegmentation& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionSegmentation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartitionSegmentation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartitionSegmentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartitionSegmentation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartitionSegmentation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PartitionSegmentation& from) {
    PartitionSegmentation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionSegmentation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.PartitionSegmentation";
  }
  protected:
  explicit PartitionSegmentation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionSegmentationPointsFieldNumber = 2,
    kPartitionSegmentationRoomIdFieldNumber = 1,
    kPartitionSegmentationSetResultFieldNumber = 3,
  };
  // repeated .LSLAM.Points partition_segmentation_points = 2;
  int partition_segmentation_points_size() const;
  private:
  int _internal_partition_segmentation_points_size() const;
  public:
  void clear_partition_segmentation_points();
  ::LSLAM::Points* mutable_partition_segmentation_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >*
      mutable_partition_segmentation_points();
  private:
  const ::LSLAM::Points& _internal_partition_segmentation_points(int index) const;
  ::LSLAM::Points* _internal_add_partition_segmentation_points();
  public:
  const ::LSLAM::Points& partition_segmentation_points(int index) const;
  ::LSLAM::Points* add_partition_segmentation_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >&
      partition_segmentation_points() const;

  // int32 partition_segmentation_room_id = 1;
  void clear_partition_segmentation_room_id();
  int32_t partition_segmentation_room_id() const;
  void set_partition_segmentation_room_id(int32_t value);
  private:
  int32_t _internal_partition_segmentation_room_id() const;
  void _internal_set_partition_segmentation_room_id(int32_t value);
  public:

  // int32 partition_segmentation_set_result = 3;
  void clear_partition_segmentation_set_result();
  int32_t partition_segmentation_set_result() const;
  void set_partition_segmentation_set_result(int32_t value);
  private:
  int32_t _internal_partition_segmentation_set_result() const;
  void _internal_set_partition_segmentation_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.PartitionSegmentation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points > partition_segmentation_points_;
    int32_t partition_segmentation_room_id_;
    int32_t partition_segmentation_set_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TuyaDpConfigurationFile_2eproto;
};
// -------------------------------------------------------------------

class PartitionMerge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.PartitionMerge) */ {
 public:
  inline PartitionMerge() : PartitionMerge(nullptr) {}
  ~PartitionMerge() override;
  explicit PROTOBUF_CONSTEXPR PartitionMerge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartitionMerge(const PartitionMerge& from);
  PartitionMerge(PartitionMerge&& from) noexcept
    : PartitionMerge() {
    *this = ::std::move(from);
  }

  inline PartitionMerge& operator=(const PartitionMerge& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionMerge& operator=(PartitionMerge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartitionMerge& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartitionMerge* internal_default_instance() {
    return reinterpret_cast<const PartitionMerge*>(
               &_PartitionMerge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PartitionMerge& a, PartitionMerge& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionMerge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartitionMerge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartitionMerge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartitionMerge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartitionMerge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PartitionMerge& from) {
    PartitionMerge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionMerge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.PartitionMerge";
  }
  protected:
  explicit PartitionMerge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionMergeRoomIdFieldNumber = 1,
    kPartitionMergeSetResultFieldNumber = 3,
  };
  // repeated int32 partition_merge_room_id = 1;
  int partition_merge_room_id_size() const;
  private:
  int _internal_partition_merge_room_id_size() const;
  public:
  void clear_partition_merge_room_id();
  private:
  int32_t _internal_partition_merge_room_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_partition_merge_room_id() const;
  void _internal_add_partition_merge_room_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_partition_merge_room_id();
  public:
  int32_t partition_merge_room_id(int index) const;
  void set_partition_merge_room_id(int index, int32_t value);
  void add_partition_merge_room_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      partition_merge_room_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_partition_merge_room_id();

  // int32 partition_merge_set_result = 3;
  void clear_partition_merge_set_result();
  int32_t partition_merge_set_result() const;
  void set_partition_merge_set_result(int32_t value);
  private:
  int32_t _internal_partition_merge_set_result() const;
  void _internal_set_partition_merge_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.PartitionMerge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > partition_merge_room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _partition_merge_room_id_cached_byte_size_;
    int32_t partition_merge_set_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TuyaDpConfigurationFile_2eproto;
};
// -------------------------------------------------------------------

class TuyaRoomName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.TuyaRoomName) */ {
 public:
  inline TuyaRoomName() : TuyaRoomName(nullptr) {}
  ~TuyaRoomName() override;
  explicit PROTOBUF_CONSTEXPR TuyaRoomName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuyaRoomName(const TuyaRoomName& from);
  TuyaRoomName(TuyaRoomName&& from) noexcept
    : TuyaRoomName() {
    *this = ::std::move(from);
  }

  inline TuyaRoomName& operator=(const TuyaRoomName& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuyaRoomName& operator=(TuyaRoomName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TuyaRoomName& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuyaRoomName* internal_default_instance() {
    return reinterpret_cast<const TuyaRoomName*>(
               &_TuyaRoomName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TuyaRoomName& a, TuyaRoomName& b) {
    a.Swap(&b);
  }
  inline void Swap(TuyaRoomName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuyaRoomName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TuyaRoomName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TuyaRoomName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TuyaRoomName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TuyaRoomName& from) {
    TuyaRoomName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuyaRoomName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.TuyaRoomName";
  }
  protected:
  explicit TuyaRoomName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kRoomNameLengthFieldNumber = 3,
    kRoomNameFieldNumber = 4,
    kRoomNumberFieldNumber = 1,
  };
  // repeated int32 room_id = 2;
  int room_id_size() const;
  private:
  int _internal_room_id_size() const;
  public:
  void clear_room_id();
  private:
  int32_t _internal_room_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_room_id() const;
  void _internal_add_room_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_room_id();
  public:
  int32_t room_id(int index) const;
  void set_room_id(int index, int32_t value);
  void add_room_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      room_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_room_id();

  // repeated int32 room_name_length = 3;
  int room_name_length_size() const;
  private:
  int _internal_room_name_length_size() const;
  public:
  void clear_room_name_length();
  private:
  int32_t _internal_room_name_length(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_room_name_length() const;
  void _internal_add_room_name_length(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_room_name_length();
  public:
  int32_t room_name_length(int index) const;
  void set_room_name_length(int index, int32_t value);
  void add_room_name_length(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      room_name_length() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_room_name_length();

  // repeated string room_name = 4;
  int room_name_size() const;
  private:
  int _internal_room_name_size() const;
  public:
  void clear_room_name();
  const std::string& room_name(int index) const;
  std::string* mutable_room_name(int index);
  void set_room_name(int index, const std::string& value);
  void set_room_name(int index, std::string&& value);
  void set_room_name(int index, const char* value);
  void set_room_name(int index, const char* value, size_t size);
  std::string* add_room_name();
  void add_room_name(const std::string& value);
  void add_room_name(std::string&& value);
  void add_room_name(const char* value);
  void add_room_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& room_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_room_name();
  private:
  const std::string& _internal_room_name(int index) const;
  std::string* _internal_add_room_name();
  public:

  // int32 room_number = 1;
  void clear_room_number();
  int32_t room_number() const;
  void set_room_number(int32_t value);
  private:
  int32_t _internal_room_number() const;
  void _internal_set_room_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.TuyaRoomName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _room_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > room_name_length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _room_name_length_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> room_name_;
    int32_t room_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TuyaDpConfigurationFile_2eproto;
};
// -------------------------------------------------------------------

class TuyaCleanOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.TuyaCleanOrder) */ {
 public:
  inline TuyaCleanOrder() : TuyaCleanOrder(nullptr) {}
  ~TuyaCleanOrder() override;
  explicit PROTOBUF_CONSTEXPR TuyaCleanOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuyaCleanOrder(const TuyaCleanOrder& from);
  TuyaCleanOrder(TuyaCleanOrder&& from) noexcept
    : TuyaCleanOrder() {
    *this = ::std::move(from);
  }

  inline TuyaCleanOrder& operator=(const TuyaCleanOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuyaCleanOrder& operator=(TuyaCleanOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TuyaCleanOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuyaCleanOrder* internal_default_instance() {
    return reinterpret_cast<const TuyaCleanOrder*>(
               &_TuyaCleanOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TuyaCleanOrder& a, TuyaCleanOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TuyaCleanOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuyaCleanOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TuyaCleanOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TuyaCleanOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TuyaCleanOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TuyaCleanOrder& from) {
    TuyaCleanOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuyaCleanOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.TuyaCleanOrder";
  }
  protected:
  explicit TuyaCleanOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kRoomNumberFieldNumber = 1,
  };
  // repeated int32 room_id = 2;
  int room_id_size() const;
  private:
  int _internal_room_id_size() const;
  public:
  void clear_room_id();
  private:
  int32_t _internal_room_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_room_id() const;
  void _internal_add_room_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_room_id();
  public:
  int32_t room_id(int index) const;
  void set_room_id(int index, int32_t value);
  void add_room_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      room_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_room_id();

  // int32 room_number = 1;
  void clear_room_number();
  int32_t room_number() const;
  void set_room_number(int32_t value);
  private:
  int32_t _internal_room_number() const;
  void _internal_set_room_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.TuyaCleanOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _room_id_cached_byte_size_;
    int32_t room_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TuyaDpConfigurationFile_2eproto;
};
// -------------------------------------------------------------------

class TuyaRoomProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.TuyaRoomProperties) */ {
 public:
  inline TuyaRoomProperties() : TuyaRoomProperties(nullptr) {}
  ~TuyaRoomProperties() override;
  explicit PROTOBUF_CONSTEXPR TuyaRoomProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuyaRoomProperties(const TuyaRoomProperties& from);
  TuyaRoomProperties(TuyaRoomProperties&& from) noexcept
    : TuyaRoomProperties() {
    *this = ::std::move(from);
  }

  inline TuyaRoomProperties& operator=(const TuyaRoomProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuyaRoomProperties& operator=(TuyaRoomProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TuyaRoomProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuyaRoomProperties* internal_default_instance() {
    return reinterpret_cast<const TuyaRoomProperties*>(
               &_TuyaRoomProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TuyaRoomProperties& a, TuyaRoomProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(TuyaRoomProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuyaRoomProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TuyaRoomProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TuyaRoomProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TuyaRoomProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TuyaRoomProperties& from) {
    TuyaRoomProperties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuyaRoomProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.TuyaRoomProperties";
  }
  protected:
  explicit TuyaRoomProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kFanMotorLevelFieldNumber = 6,
    kWaterBoxLevelFieldNumber = 7,
    kCleanNumberFieldNumber = 8,
    kRoomNumberFieldNumber = 1,
  };
  // repeated int32 room_id = 2;
  int room_id_size() const;
  private:
  int _internal_room_id_size() const;
  public:
  void clear_room_id();
  private:
  int32_t _internal_room_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_room_id() const;
  void _internal_add_room_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_room_id();
  public:
  int32_t room_id(int index) const;
  void set_room_id(int index, int32_t value);
  void add_room_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      room_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_room_id();

  // repeated .LSLAM.FanMotorLevel fan_motor_level = 6;
  int fan_motor_level_size() const;
  private:
  int _internal_fan_motor_level_size() const;
  public:
  void clear_fan_motor_level();
  private:
  ::LSLAM::FanMotorLevel _internal_fan_motor_level(int index) const;
  void _internal_add_fan_motor_level(::LSLAM::FanMotorLevel value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_fan_motor_level();
  public:
  ::LSLAM::FanMotorLevel fan_motor_level(int index) const;
  void set_fan_motor_level(int index, ::LSLAM::FanMotorLevel value);
  void add_fan_motor_level(::LSLAM::FanMotorLevel value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& fan_motor_level() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_fan_motor_level();

  // repeated .LSLAM.WaterBoxLevel water_box_level = 7;
  int water_box_level_size() const;
  private:
  int _internal_water_box_level_size() const;
  public:
  void clear_water_box_level();
  private:
  ::LSLAM::WaterBoxLevel _internal_water_box_level(int index) const;
  void _internal_add_water_box_level(::LSLAM::WaterBoxLevel value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_water_box_level();
  public:
  ::LSLAM::WaterBoxLevel water_box_level(int index) const;
  void set_water_box_level(int index, ::LSLAM::WaterBoxLevel value);
  void add_water_box_level(::LSLAM::WaterBoxLevel value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& water_box_level() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_water_box_level();

  // repeated int32 clean_number = 8;
  int clean_number_size() const;
  private:
  int _internal_clean_number_size() const;
  public:
  void clear_clean_number();
  private:
  int32_t _internal_clean_number(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_clean_number() const;
  void _internal_add_clean_number(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_clean_number();
  public:
  int32_t clean_number(int index) const;
  void set_clean_number(int index, int32_t value);
  void add_clean_number(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      clean_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_clean_number();

  // int32 room_number = 1;
  void clear_room_number();
  int32_t room_number() const;
  void set_room_number(int32_t value);
  private:
  int32_t _internal_room_number() const;
  void _internal_set_room_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.TuyaRoomProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _room_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> fan_motor_level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _fan_motor_level_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> water_box_level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _water_box_level_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > clean_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _clean_number_cached_byte_size_;
    int32_t room_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TuyaDpConfigurationFile_2eproto;
};
// -------------------------------------------------------------------

class TuyaSettingConfigurationFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.TuyaSettingConfigurationFile) */ {
 public:
  inline TuyaSettingConfigurationFile() : TuyaSettingConfigurationFile(nullptr) {}
  ~TuyaSettingConfigurationFile() override;
  explicit PROTOBUF_CONSTEXPR TuyaSettingConfigurationFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuyaSettingConfigurationFile(const TuyaSettingConfigurationFile& from);
  TuyaSettingConfigurationFile(TuyaSettingConfigurationFile&& from) noexcept
    : TuyaSettingConfigurationFile() {
    *this = ::std::move(from);
  }

  inline TuyaSettingConfigurationFile& operator=(const TuyaSettingConfigurationFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuyaSettingConfigurationFile& operator=(TuyaSettingConfigurationFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TuyaSettingConfigurationFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuyaSettingConfigurationFile* internal_default_instance() {
    return reinterpret_cast<const TuyaSettingConfigurationFile*>(
               &_TuyaSettingConfigurationFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TuyaSettingConfigurationFile& a, TuyaSettingConfigurationFile& b) {
    a.Swap(&b);
  }
  inline void Swap(TuyaSettingConfigurationFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuyaSettingConfigurationFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TuyaSettingConfigurationFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TuyaSettingConfigurationFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TuyaSettingConfigurationFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TuyaSettingConfigurationFile& from) {
    TuyaSettingConfigurationFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuyaSettingConfigurationFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.TuyaSettingConfigurationFile";
  }
  protected:
  explicit TuyaSettingConfigurationFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualWallDataFieldNumber = 15,
    kPenaltyAreaDataFieldNumber = 16,
    kSetLanguagePackNameFieldNumber = 17,
    kSetTuyaVirtualWallFieldNumber = 1,
    kSetTuyaPenaltyAreaFieldNumber = 2,
    kSetTuyaPartitionSegmentationFieldNumber = 3,
    kSetTuyaPartitionMergeFieldNumber = 4,
    kSetTuyaRoomNameFieldNumber = 6,
    kSetTuyaCleanOrderFieldNumber = 7,
    kSetTuyaRoomPropertiesFieldNumber = 8,
    kPartitionSwitchFieldNumber = 5,
    kRechargeWorldPointXFieldNumber = 9,
    kRechargeWorldPointYFieldNumber = 10,
    kRechargeGridPointXFieldNumber = 11,
    kRechargeGridPointYFieldNumber = 12,
    kWhetherNearPartnerFieldNumber = 13,
    kWhetherAdjustRightPosFieldNumber = 14,
  };
  // repeated int32 virtual_wall_data = 15;
  int virtual_wall_data_size() const;
  private:
  int _internal_virtual_wall_data_size() const;
  public:
  void clear_virtual_wall_data();
  private:
  int32_t _internal_virtual_wall_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_virtual_wall_data() const;
  void _internal_add_virtual_wall_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_virtual_wall_data();
  public:
  int32_t virtual_wall_data(int index) const;
  void set_virtual_wall_data(int index, int32_t value);
  void add_virtual_wall_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      virtual_wall_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_virtual_wall_data();

  // repeated int32 penalty_area_data = 16;
  int penalty_area_data_size() const;
  private:
  int _internal_penalty_area_data_size() const;
  public:
  void clear_penalty_area_data();
  private:
  int32_t _internal_penalty_area_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_penalty_area_data() const;
  void _internal_add_penalty_area_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_penalty_area_data();
  public:
  int32_t penalty_area_data(int index) const;
  void set_penalty_area_data(int index, int32_t value);
  void add_penalty_area_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      penalty_area_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_penalty_area_data();

  // bytes set_language_pack_name = 17;
  void clear_set_language_pack_name();
  const std::string& set_language_pack_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_set_language_pack_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_set_language_pack_name();
  PROTOBUF_NODISCARD std::string* release_set_language_pack_name();
  void set_allocated_set_language_pack_name(std::string* set_language_pack_name);
  private:
  const std::string& _internal_set_language_pack_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_set_language_pack_name(const std::string& value);
  std::string* _internal_mutable_set_language_pack_name();
  public:

  // .LSLAM.SetVirtualWall set_tuya_virtual_wall = 1;
  bool has_set_tuya_virtual_wall() const;
  private:
  bool _internal_has_set_tuya_virtual_wall() const;
  public:
  void clear_set_tuya_virtual_wall();
  const ::LSLAM::SetVirtualWall& set_tuya_virtual_wall() const;
  PROTOBUF_NODISCARD ::LSLAM::SetVirtualWall* release_set_tuya_virtual_wall();
  ::LSLAM::SetVirtualWall* mutable_set_tuya_virtual_wall();
  void set_allocated_set_tuya_virtual_wall(::LSLAM::SetVirtualWall* set_tuya_virtual_wall);
  private:
  const ::LSLAM::SetVirtualWall& _internal_set_tuya_virtual_wall() const;
  ::LSLAM::SetVirtualWall* _internal_mutable_set_tuya_virtual_wall();
  public:
  void unsafe_arena_set_allocated_set_tuya_virtual_wall(
      ::LSLAM::SetVirtualWall* set_tuya_virtual_wall);
  ::LSLAM::SetVirtualWall* unsafe_arena_release_set_tuya_virtual_wall();

  // .LSLAM.SetPenaltyArea set_tuya_penalty_area = 2;
  bool has_set_tuya_penalty_area() const;
  private:
  bool _internal_has_set_tuya_penalty_area() const;
  public:
  void clear_set_tuya_penalty_area();
  const ::LSLAM::SetPenaltyArea& set_tuya_penalty_area() const;
  PROTOBUF_NODISCARD ::LSLAM::SetPenaltyArea* release_set_tuya_penalty_area();
  ::LSLAM::SetPenaltyArea* mutable_set_tuya_penalty_area();
  void set_allocated_set_tuya_penalty_area(::LSLAM::SetPenaltyArea* set_tuya_penalty_area);
  private:
  const ::LSLAM::SetPenaltyArea& _internal_set_tuya_penalty_area() const;
  ::LSLAM::SetPenaltyArea* _internal_mutable_set_tuya_penalty_area();
  public:
  void unsafe_arena_set_allocated_set_tuya_penalty_area(
      ::LSLAM::SetPenaltyArea* set_tuya_penalty_area);
  ::LSLAM::SetPenaltyArea* unsafe_arena_release_set_tuya_penalty_area();

  // .LSLAM.PartitionSegmentation set_tuya_partition_segmentation = 3;
  bool has_set_tuya_partition_segmentation() const;
  private:
  bool _internal_has_set_tuya_partition_segmentation() const;
  public:
  void clear_set_tuya_partition_segmentation();
  const ::LSLAM::PartitionSegmentation& set_tuya_partition_segmentation() const;
  PROTOBUF_NODISCARD ::LSLAM::PartitionSegmentation* release_set_tuya_partition_segmentation();
  ::LSLAM::PartitionSegmentation* mutable_set_tuya_partition_segmentation();
  void set_allocated_set_tuya_partition_segmentation(::LSLAM::PartitionSegmentation* set_tuya_partition_segmentation);
  private:
  const ::LSLAM::PartitionSegmentation& _internal_set_tuya_partition_segmentation() const;
  ::LSLAM::PartitionSegmentation* _internal_mutable_set_tuya_partition_segmentation();
  public:
  void unsafe_arena_set_allocated_set_tuya_partition_segmentation(
      ::LSLAM::PartitionSegmentation* set_tuya_partition_segmentation);
  ::LSLAM::PartitionSegmentation* unsafe_arena_release_set_tuya_partition_segmentation();

  // .LSLAM.PartitionMerge set_tuya_partition_merge = 4;
  bool has_set_tuya_partition_merge() const;
  private:
  bool _internal_has_set_tuya_partition_merge() const;
  public:
  void clear_set_tuya_partition_merge();
  const ::LSLAM::PartitionMerge& set_tuya_partition_merge() const;
  PROTOBUF_NODISCARD ::LSLAM::PartitionMerge* release_set_tuya_partition_merge();
  ::LSLAM::PartitionMerge* mutable_set_tuya_partition_merge();
  void set_allocated_set_tuya_partition_merge(::LSLAM::PartitionMerge* set_tuya_partition_merge);
  private:
  const ::LSLAM::PartitionMerge& _internal_set_tuya_partition_merge() const;
  ::LSLAM::PartitionMerge* _internal_mutable_set_tuya_partition_merge();
  public:
  void unsafe_arena_set_allocated_set_tuya_partition_merge(
      ::LSLAM::PartitionMerge* set_tuya_partition_merge);
  ::LSLAM::PartitionMerge* unsafe_arena_release_set_tuya_partition_merge();

  // .LSLAM.TuyaRoomName set_tuya_room_name = 6;
  bool has_set_tuya_room_name() const;
  private:
  bool _internal_has_set_tuya_room_name() const;
  public:
  void clear_set_tuya_room_name();
  const ::LSLAM::TuyaRoomName& set_tuya_room_name() const;
  PROTOBUF_NODISCARD ::LSLAM::TuyaRoomName* release_set_tuya_room_name();
  ::LSLAM::TuyaRoomName* mutable_set_tuya_room_name();
  void set_allocated_set_tuya_room_name(::LSLAM::TuyaRoomName* set_tuya_room_name);
  private:
  const ::LSLAM::TuyaRoomName& _internal_set_tuya_room_name() const;
  ::LSLAM::TuyaRoomName* _internal_mutable_set_tuya_room_name();
  public:
  void unsafe_arena_set_allocated_set_tuya_room_name(
      ::LSLAM::TuyaRoomName* set_tuya_room_name);
  ::LSLAM::TuyaRoomName* unsafe_arena_release_set_tuya_room_name();

  // .LSLAM.TuyaCleanOrder set_tuya_clean_order = 7;
  bool has_set_tuya_clean_order() const;
  private:
  bool _internal_has_set_tuya_clean_order() const;
  public:
  void clear_set_tuya_clean_order();
  const ::LSLAM::TuyaCleanOrder& set_tuya_clean_order() const;
  PROTOBUF_NODISCARD ::LSLAM::TuyaCleanOrder* release_set_tuya_clean_order();
  ::LSLAM::TuyaCleanOrder* mutable_set_tuya_clean_order();
  void set_allocated_set_tuya_clean_order(::LSLAM::TuyaCleanOrder* set_tuya_clean_order);
  private:
  const ::LSLAM::TuyaCleanOrder& _internal_set_tuya_clean_order() const;
  ::LSLAM::TuyaCleanOrder* _internal_mutable_set_tuya_clean_order();
  public:
  void unsafe_arena_set_allocated_set_tuya_clean_order(
      ::LSLAM::TuyaCleanOrder* set_tuya_clean_order);
  ::LSLAM::TuyaCleanOrder* unsafe_arena_release_set_tuya_clean_order();

  // .LSLAM.TuyaRoomProperties set_tuya_room_properties = 8;
  bool has_set_tuya_room_properties() const;
  private:
  bool _internal_has_set_tuya_room_properties() const;
  public:
  void clear_set_tuya_room_properties();
  const ::LSLAM::TuyaRoomProperties& set_tuya_room_properties() const;
  PROTOBUF_NODISCARD ::LSLAM::TuyaRoomProperties* release_set_tuya_room_properties();
  ::LSLAM::TuyaRoomProperties* mutable_set_tuya_room_properties();
  void set_allocated_set_tuya_room_properties(::LSLAM::TuyaRoomProperties* set_tuya_room_properties);
  private:
  const ::LSLAM::TuyaRoomProperties& _internal_set_tuya_room_properties() const;
  ::LSLAM::TuyaRoomProperties* _internal_mutable_set_tuya_room_properties();
  public:
  void unsafe_arena_set_allocated_set_tuya_room_properties(
      ::LSLAM::TuyaRoomProperties* set_tuya_room_properties);
  ::LSLAM::TuyaRoomProperties* unsafe_arena_release_set_tuya_room_properties();

  // bool partition_switch = 5;
  void clear_partition_switch();
  bool partition_switch() const;
  void set_partition_switch(bool value);
  private:
  bool _internal_partition_switch() const;
  void _internal_set_partition_switch(bool value);
  public:

  // int32 recharge_world_point_x = 9;
  void clear_recharge_world_point_x();
  int32_t recharge_world_point_x() const;
  void set_recharge_world_point_x(int32_t value);
  private:
  int32_t _internal_recharge_world_point_x() const;
  void _internal_set_recharge_world_point_x(int32_t value);
  public:

  // int32 recharge_world_point_y = 10;
  void clear_recharge_world_point_y();
  int32_t recharge_world_point_y() const;
  void set_recharge_world_point_y(int32_t value);
  private:
  int32_t _internal_recharge_world_point_y() const;
  void _internal_set_recharge_world_point_y(int32_t value);
  public:

  // int32 recharge_grid_point_x = 11;
  void clear_recharge_grid_point_x();
  int32_t recharge_grid_point_x() const;
  void set_recharge_grid_point_x(int32_t value);
  private:
  int32_t _internal_recharge_grid_point_x() const;
  void _internal_set_recharge_grid_point_x(int32_t value);
  public:

  // int32 recharge_grid_point_y = 12;
  void clear_recharge_grid_point_y();
  int32_t recharge_grid_point_y() const;
  void set_recharge_grid_point_y(int32_t value);
  private:
  int32_t _internal_recharge_grid_point_y() const;
  void _internal_set_recharge_grid_point_y(int32_t value);
  public:

  // int32 whether_near_partner = 13;
  void clear_whether_near_partner();
  int32_t whether_near_partner() const;
  void set_whether_near_partner(int32_t value);
  private:
  int32_t _internal_whether_near_partner() const;
  void _internal_set_whether_near_partner(int32_t value);
  public:

  // int32 whether_adjust_right_pos = 14;
  void clear_whether_adjust_right_pos();
  int32_t whether_adjust_right_pos() const;
  void set_whether_adjust_right_pos(int32_t value);
  private:
  int32_t _internal_whether_adjust_right_pos() const;
  void _internal_set_whether_adjust_right_pos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.TuyaSettingConfigurationFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > virtual_wall_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _virtual_wall_data_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > penalty_area_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _penalty_area_data_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_language_pack_name_;
    ::LSLAM::SetVirtualWall* set_tuya_virtual_wall_;
    ::LSLAM::SetPenaltyArea* set_tuya_penalty_area_;
    ::LSLAM::PartitionSegmentation* set_tuya_partition_segmentation_;
    ::LSLAM::PartitionMerge* set_tuya_partition_merge_;
    ::LSLAM::TuyaRoomName* set_tuya_room_name_;
    ::LSLAM::TuyaCleanOrder* set_tuya_clean_order_;
    ::LSLAM::TuyaRoomProperties* set_tuya_room_properties_;
    bool partition_switch_;
    int32_t recharge_world_point_x_;
    int32_t recharge_world_point_y_;
    int32_t recharge_grid_point_x_;
    int32_t recharge_grid_point_y_;
    int32_t whether_near_partner_;
    int32_t whether_adjust_right_pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TuyaDpConfigurationFile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetVirtualWall

// int32 virtual_wall_number = 1;
inline void SetVirtualWall::clear_virtual_wall_number() {
  _impl_.virtual_wall_number_ = 0;
}
inline int32_t SetVirtualWall::_internal_virtual_wall_number() const {
  return _impl_.virtual_wall_number_;
}
inline int32_t SetVirtualWall::virtual_wall_number() const {
  // @@protoc_insertion_point(field_get:LSLAM.SetVirtualWall.virtual_wall_number)
  return _internal_virtual_wall_number();
}
inline void SetVirtualWall::_internal_set_virtual_wall_number(int32_t value) {
  
  _impl_.virtual_wall_number_ = value;
}
inline void SetVirtualWall::set_virtual_wall_number(int32_t value) {
  _internal_set_virtual_wall_number(value);
  // @@protoc_insertion_point(field_set:LSLAM.SetVirtualWall.virtual_wall_number)
}

// repeated .LSLAM.Points virtual_wall_points = 2;
inline int SetVirtualWall::_internal_virtual_wall_points_size() const {
  return _impl_.virtual_wall_points_.size();
}
inline int SetVirtualWall::virtual_wall_points_size() const {
  return _internal_virtual_wall_points_size();
}
inline ::LSLAM::Points* SetVirtualWall::mutable_virtual_wall_points(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.SetVirtualWall.virtual_wall_points)
  return _impl_.virtual_wall_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >*
SetVirtualWall::mutable_virtual_wall_points() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.SetVirtualWall.virtual_wall_points)
  return &_impl_.virtual_wall_points_;
}
inline const ::LSLAM::Points& SetVirtualWall::_internal_virtual_wall_points(int index) const {
  return _impl_.virtual_wall_points_.Get(index);
}
inline const ::LSLAM::Points& SetVirtualWall::virtual_wall_points(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.SetVirtualWall.virtual_wall_points)
  return _internal_virtual_wall_points(index);
}
inline ::LSLAM::Points* SetVirtualWall::_internal_add_virtual_wall_points() {
  return _impl_.virtual_wall_points_.Add();
}
inline ::LSLAM::Points* SetVirtualWall::add_virtual_wall_points() {
  ::LSLAM::Points* _add = _internal_add_virtual_wall_points();
  // @@protoc_insertion_point(field_add:LSLAM.SetVirtualWall.virtual_wall_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >&
SetVirtualWall::virtual_wall_points() const {
  // @@protoc_insertion_point(field_list:LSLAM.SetVirtualWall.virtual_wall_points)
  return _impl_.virtual_wall_points_;
}

// -------------------------------------------------------------------

// SetPenaltyArea

// int32 ban_sweep_penalty_area_number = 1;
inline void SetPenaltyArea::clear_ban_sweep_penalty_area_number() {
  _impl_.ban_sweep_penalty_area_number_ = 0;
}
inline int32_t SetPenaltyArea::_internal_ban_sweep_penalty_area_number() const {
  return _impl_.ban_sweep_penalty_area_number_;
}
inline int32_t SetPenaltyArea::ban_sweep_penalty_area_number() const {
  // @@protoc_insertion_point(field_get:LSLAM.SetPenaltyArea.ban_sweep_penalty_area_number)
  return _internal_ban_sweep_penalty_area_number();
}
inline void SetPenaltyArea::_internal_set_ban_sweep_penalty_area_number(int32_t value) {
  
  _impl_.ban_sweep_penalty_area_number_ = value;
}
inline void SetPenaltyArea::set_ban_sweep_penalty_area_number(int32_t value) {
  _internal_set_ban_sweep_penalty_area_number(value);
  // @@protoc_insertion_point(field_set:LSLAM.SetPenaltyArea.ban_sweep_penalty_area_number)
}

// repeated .LSLAM.Points ban_sweep_penalty_area_points = 2;
inline int SetPenaltyArea::_internal_ban_sweep_penalty_area_points_size() const {
  return _impl_.ban_sweep_penalty_area_points_.size();
}
inline int SetPenaltyArea::ban_sweep_penalty_area_points_size() const {
  return _internal_ban_sweep_penalty_area_points_size();
}
inline ::LSLAM::Points* SetPenaltyArea::mutable_ban_sweep_penalty_area_points(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.SetPenaltyArea.ban_sweep_penalty_area_points)
  return _impl_.ban_sweep_penalty_area_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >*
SetPenaltyArea::mutable_ban_sweep_penalty_area_points() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.SetPenaltyArea.ban_sweep_penalty_area_points)
  return &_impl_.ban_sweep_penalty_area_points_;
}
inline const ::LSLAM::Points& SetPenaltyArea::_internal_ban_sweep_penalty_area_points(int index) const {
  return _impl_.ban_sweep_penalty_area_points_.Get(index);
}
inline const ::LSLAM::Points& SetPenaltyArea::ban_sweep_penalty_area_points(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.SetPenaltyArea.ban_sweep_penalty_area_points)
  return _internal_ban_sweep_penalty_area_points(index);
}
inline ::LSLAM::Points* SetPenaltyArea::_internal_add_ban_sweep_penalty_area_points() {
  return _impl_.ban_sweep_penalty_area_points_.Add();
}
inline ::LSLAM::Points* SetPenaltyArea::add_ban_sweep_penalty_area_points() {
  ::LSLAM::Points* _add = _internal_add_ban_sweep_penalty_area_points();
  // @@protoc_insertion_point(field_add:LSLAM.SetPenaltyArea.ban_sweep_penalty_area_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >&
SetPenaltyArea::ban_sweep_penalty_area_points() const {
  // @@protoc_insertion_point(field_list:LSLAM.SetPenaltyArea.ban_sweep_penalty_area_points)
  return _impl_.ban_sweep_penalty_area_points_;
}

// int32 ban_clean_and_sweep_penalty_area_number = 3;
inline void SetPenaltyArea::clear_ban_clean_and_sweep_penalty_area_number() {
  _impl_.ban_clean_and_sweep_penalty_area_number_ = 0;
}
inline int32_t SetPenaltyArea::_internal_ban_clean_and_sweep_penalty_area_number() const {
  return _impl_.ban_clean_and_sweep_penalty_area_number_;
}
inline int32_t SetPenaltyArea::ban_clean_and_sweep_penalty_area_number() const {
  // @@protoc_insertion_point(field_get:LSLAM.SetPenaltyArea.ban_clean_and_sweep_penalty_area_number)
  return _internal_ban_clean_and_sweep_penalty_area_number();
}
inline void SetPenaltyArea::_internal_set_ban_clean_and_sweep_penalty_area_number(int32_t value) {
  
  _impl_.ban_clean_and_sweep_penalty_area_number_ = value;
}
inline void SetPenaltyArea::set_ban_clean_and_sweep_penalty_area_number(int32_t value) {
  _internal_set_ban_clean_and_sweep_penalty_area_number(value);
  // @@protoc_insertion_point(field_set:LSLAM.SetPenaltyArea.ban_clean_and_sweep_penalty_area_number)
}

// repeated .LSLAM.Points ban_clean_and_sweep_penalty_area_points = 4;
inline int SetPenaltyArea::_internal_ban_clean_and_sweep_penalty_area_points_size() const {
  return _impl_.ban_clean_and_sweep_penalty_area_points_.size();
}
inline int SetPenaltyArea::ban_clean_and_sweep_penalty_area_points_size() const {
  return _internal_ban_clean_and_sweep_penalty_area_points_size();
}
inline ::LSLAM::Points* SetPenaltyArea::mutable_ban_clean_and_sweep_penalty_area_points(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.SetPenaltyArea.ban_clean_and_sweep_penalty_area_points)
  return _impl_.ban_clean_and_sweep_penalty_area_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >*
SetPenaltyArea::mutable_ban_clean_and_sweep_penalty_area_points() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.SetPenaltyArea.ban_clean_and_sweep_penalty_area_points)
  return &_impl_.ban_clean_and_sweep_penalty_area_points_;
}
inline const ::LSLAM::Points& SetPenaltyArea::_internal_ban_clean_and_sweep_penalty_area_points(int index) const {
  return _impl_.ban_clean_and_sweep_penalty_area_points_.Get(index);
}
inline const ::LSLAM::Points& SetPenaltyArea::ban_clean_and_sweep_penalty_area_points(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.SetPenaltyArea.ban_clean_and_sweep_penalty_area_points)
  return _internal_ban_clean_and_sweep_penalty_area_points(index);
}
inline ::LSLAM::Points* SetPenaltyArea::_internal_add_ban_clean_and_sweep_penalty_area_points() {
  return _impl_.ban_clean_and_sweep_penalty_area_points_.Add();
}
inline ::LSLAM::Points* SetPenaltyArea::add_ban_clean_and_sweep_penalty_area_points() {
  ::LSLAM::Points* _add = _internal_add_ban_clean_and_sweep_penalty_area_points();
  // @@protoc_insertion_point(field_add:LSLAM.SetPenaltyArea.ban_clean_and_sweep_penalty_area_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >&
SetPenaltyArea::ban_clean_and_sweep_penalty_area_points() const {
  // @@protoc_insertion_point(field_list:LSLAM.SetPenaltyArea.ban_clean_and_sweep_penalty_area_points)
  return _impl_.ban_clean_and_sweep_penalty_area_points_;
}

// -------------------------------------------------------------------

// PartitionSegmentation

// int32 partition_segmentation_room_id = 1;
inline void PartitionSegmentation::clear_partition_segmentation_room_id() {
  _impl_.partition_segmentation_room_id_ = 0;
}
inline int32_t PartitionSegmentation::_internal_partition_segmentation_room_id() const {
  return _impl_.partition_segmentation_room_id_;
}
inline int32_t PartitionSegmentation::partition_segmentation_room_id() const {
  // @@protoc_insertion_point(field_get:LSLAM.PartitionSegmentation.partition_segmentation_room_id)
  return _internal_partition_segmentation_room_id();
}
inline void PartitionSegmentation::_internal_set_partition_segmentation_room_id(int32_t value) {
  
  _impl_.partition_segmentation_room_id_ = value;
}
inline void PartitionSegmentation::set_partition_segmentation_room_id(int32_t value) {
  _internal_set_partition_segmentation_room_id(value);
  // @@protoc_insertion_point(field_set:LSLAM.PartitionSegmentation.partition_segmentation_room_id)
}

// repeated .LSLAM.Points partition_segmentation_points = 2;
inline int PartitionSegmentation::_internal_partition_segmentation_points_size() const {
  return _impl_.partition_segmentation_points_.size();
}
inline int PartitionSegmentation::partition_segmentation_points_size() const {
  return _internal_partition_segmentation_points_size();
}
inline ::LSLAM::Points* PartitionSegmentation::mutable_partition_segmentation_points(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.PartitionSegmentation.partition_segmentation_points)
  return _impl_.partition_segmentation_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >*
PartitionSegmentation::mutable_partition_segmentation_points() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.PartitionSegmentation.partition_segmentation_points)
  return &_impl_.partition_segmentation_points_;
}
inline const ::LSLAM::Points& PartitionSegmentation::_internal_partition_segmentation_points(int index) const {
  return _impl_.partition_segmentation_points_.Get(index);
}
inline const ::LSLAM::Points& PartitionSegmentation::partition_segmentation_points(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.PartitionSegmentation.partition_segmentation_points)
  return _internal_partition_segmentation_points(index);
}
inline ::LSLAM::Points* PartitionSegmentation::_internal_add_partition_segmentation_points() {
  return _impl_.partition_segmentation_points_.Add();
}
inline ::LSLAM::Points* PartitionSegmentation::add_partition_segmentation_points() {
  ::LSLAM::Points* _add = _internal_add_partition_segmentation_points();
  // @@protoc_insertion_point(field_add:LSLAM.PartitionSegmentation.partition_segmentation_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Points >&
PartitionSegmentation::partition_segmentation_points() const {
  // @@protoc_insertion_point(field_list:LSLAM.PartitionSegmentation.partition_segmentation_points)
  return _impl_.partition_segmentation_points_;
}

// int32 partition_segmentation_set_result = 3;
inline void PartitionSegmentation::clear_partition_segmentation_set_result() {
  _impl_.partition_segmentation_set_result_ = 0;
}
inline int32_t PartitionSegmentation::_internal_partition_segmentation_set_result() const {
  return _impl_.partition_segmentation_set_result_;
}
inline int32_t PartitionSegmentation::partition_segmentation_set_result() const {
  // @@protoc_insertion_point(field_get:LSLAM.PartitionSegmentation.partition_segmentation_set_result)
  return _internal_partition_segmentation_set_result();
}
inline void PartitionSegmentation::_internal_set_partition_segmentation_set_result(int32_t value) {
  
  _impl_.partition_segmentation_set_result_ = value;
}
inline void PartitionSegmentation::set_partition_segmentation_set_result(int32_t value) {
  _internal_set_partition_segmentation_set_result(value);
  // @@protoc_insertion_point(field_set:LSLAM.PartitionSegmentation.partition_segmentation_set_result)
}

// -------------------------------------------------------------------

// PartitionMerge

// repeated int32 partition_merge_room_id = 1;
inline int PartitionMerge::_internal_partition_merge_room_id_size() const {
  return _impl_.partition_merge_room_id_.size();
}
inline int PartitionMerge::partition_merge_room_id_size() const {
  return _internal_partition_merge_room_id_size();
}
inline void PartitionMerge::clear_partition_merge_room_id() {
  _impl_.partition_merge_room_id_.Clear();
}
inline int32_t PartitionMerge::_internal_partition_merge_room_id(int index) const {
  return _impl_.partition_merge_room_id_.Get(index);
}
inline int32_t PartitionMerge::partition_merge_room_id(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.PartitionMerge.partition_merge_room_id)
  return _internal_partition_merge_room_id(index);
}
inline void PartitionMerge::set_partition_merge_room_id(int index, int32_t value) {
  _impl_.partition_merge_room_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.PartitionMerge.partition_merge_room_id)
}
inline void PartitionMerge::_internal_add_partition_merge_room_id(int32_t value) {
  _impl_.partition_merge_room_id_.Add(value);
}
inline void PartitionMerge::add_partition_merge_room_id(int32_t value) {
  _internal_add_partition_merge_room_id(value);
  // @@protoc_insertion_point(field_add:LSLAM.PartitionMerge.partition_merge_room_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PartitionMerge::_internal_partition_merge_room_id() const {
  return _impl_.partition_merge_room_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PartitionMerge::partition_merge_room_id() const {
  // @@protoc_insertion_point(field_list:LSLAM.PartitionMerge.partition_merge_room_id)
  return _internal_partition_merge_room_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PartitionMerge::_internal_mutable_partition_merge_room_id() {
  return &_impl_.partition_merge_room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PartitionMerge::mutable_partition_merge_room_id() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.PartitionMerge.partition_merge_room_id)
  return _internal_mutable_partition_merge_room_id();
}

// int32 partition_merge_set_result = 3;
inline void PartitionMerge::clear_partition_merge_set_result() {
  _impl_.partition_merge_set_result_ = 0;
}
inline int32_t PartitionMerge::_internal_partition_merge_set_result() const {
  return _impl_.partition_merge_set_result_;
}
inline int32_t PartitionMerge::partition_merge_set_result() const {
  // @@protoc_insertion_point(field_get:LSLAM.PartitionMerge.partition_merge_set_result)
  return _internal_partition_merge_set_result();
}
inline void PartitionMerge::_internal_set_partition_merge_set_result(int32_t value) {
  
  _impl_.partition_merge_set_result_ = value;
}
inline void PartitionMerge::set_partition_merge_set_result(int32_t value) {
  _internal_set_partition_merge_set_result(value);
  // @@protoc_insertion_point(field_set:LSLAM.PartitionMerge.partition_merge_set_result)
}

// -------------------------------------------------------------------

// TuyaRoomName

// int32 room_number = 1;
inline void TuyaRoomName::clear_room_number() {
  _impl_.room_number_ = 0;
}
inline int32_t TuyaRoomName::_internal_room_number() const {
  return _impl_.room_number_;
}
inline int32_t TuyaRoomName::room_number() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaRoomName.room_number)
  return _internal_room_number();
}
inline void TuyaRoomName::_internal_set_room_number(int32_t value) {
  
  _impl_.room_number_ = value;
}
inline void TuyaRoomName::set_room_number(int32_t value) {
  _internal_set_room_number(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaRoomName.room_number)
}

// repeated int32 room_id = 2;
inline int TuyaRoomName::_internal_room_id_size() const {
  return _impl_.room_id_.size();
}
inline int TuyaRoomName::room_id_size() const {
  return _internal_room_id_size();
}
inline void TuyaRoomName::clear_room_id() {
  _impl_.room_id_.Clear();
}
inline int32_t TuyaRoomName::_internal_room_id(int index) const {
  return _impl_.room_id_.Get(index);
}
inline int32_t TuyaRoomName::room_id(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaRoomName.room_id)
  return _internal_room_id(index);
}
inline void TuyaRoomName::set_room_id(int index, int32_t value) {
  _impl_.room_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaRoomName.room_id)
}
inline void TuyaRoomName::_internal_add_room_id(int32_t value) {
  _impl_.room_id_.Add(value);
}
inline void TuyaRoomName::add_room_id(int32_t value) {
  _internal_add_room_id(value);
  // @@protoc_insertion_point(field_add:LSLAM.TuyaRoomName.room_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaRoomName::_internal_room_id() const {
  return _impl_.room_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaRoomName::room_id() const {
  // @@protoc_insertion_point(field_list:LSLAM.TuyaRoomName.room_id)
  return _internal_room_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaRoomName::_internal_mutable_room_id() {
  return &_impl_.room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaRoomName::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TuyaRoomName.room_id)
  return _internal_mutable_room_id();
}

// repeated int32 room_name_length = 3;
inline int TuyaRoomName::_internal_room_name_length_size() const {
  return _impl_.room_name_length_.size();
}
inline int TuyaRoomName::room_name_length_size() const {
  return _internal_room_name_length_size();
}
inline void TuyaRoomName::clear_room_name_length() {
  _impl_.room_name_length_.Clear();
}
inline int32_t TuyaRoomName::_internal_room_name_length(int index) const {
  return _impl_.room_name_length_.Get(index);
}
inline int32_t TuyaRoomName::room_name_length(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaRoomName.room_name_length)
  return _internal_room_name_length(index);
}
inline void TuyaRoomName::set_room_name_length(int index, int32_t value) {
  _impl_.room_name_length_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaRoomName.room_name_length)
}
inline void TuyaRoomName::_internal_add_room_name_length(int32_t value) {
  _impl_.room_name_length_.Add(value);
}
inline void TuyaRoomName::add_room_name_length(int32_t value) {
  _internal_add_room_name_length(value);
  // @@protoc_insertion_point(field_add:LSLAM.TuyaRoomName.room_name_length)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaRoomName::_internal_room_name_length() const {
  return _impl_.room_name_length_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaRoomName::room_name_length() const {
  // @@protoc_insertion_point(field_list:LSLAM.TuyaRoomName.room_name_length)
  return _internal_room_name_length();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaRoomName::_internal_mutable_room_name_length() {
  return &_impl_.room_name_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaRoomName::mutable_room_name_length() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TuyaRoomName.room_name_length)
  return _internal_mutable_room_name_length();
}

// repeated string room_name = 4;
inline int TuyaRoomName::_internal_room_name_size() const {
  return _impl_.room_name_.size();
}
inline int TuyaRoomName::room_name_size() const {
  return _internal_room_name_size();
}
inline void TuyaRoomName::clear_room_name() {
  _impl_.room_name_.Clear();
}
inline std::string* TuyaRoomName::add_room_name() {
  std::string* _s = _internal_add_room_name();
  // @@protoc_insertion_point(field_add_mutable:LSLAM.TuyaRoomName.room_name)
  return _s;
}
inline const std::string& TuyaRoomName::_internal_room_name(int index) const {
  return _impl_.room_name_.Get(index);
}
inline const std::string& TuyaRoomName::room_name(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaRoomName.room_name)
  return _internal_room_name(index);
}
inline std::string* TuyaRoomName::mutable_room_name(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.TuyaRoomName.room_name)
  return _impl_.room_name_.Mutable(index);
}
inline void TuyaRoomName::set_room_name(int index, const std::string& value) {
  _impl_.room_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaRoomName.room_name)
}
inline void TuyaRoomName::set_room_name(int index, std::string&& value) {
  _impl_.room_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:LSLAM.TuyaRoomName.room_name)
}
inline void TuyaRoomName::set_room_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.room_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LSLAM.TuyaRoomName.room_name)
}
inline void TuyaRoomName::set_room_name(int index, const char* value, size_t size) {
  _impl_.room_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LSLAM.TuyaRoomName.room_name)
}
inline std::string* TuyaRoomName::_internal_add_room_name() {
  return _impl_.room_name_.Add();
}
inline void TuyaRoomName::add_room_name(const std::string& value) {
  _impl_.room_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LSLAM.TuyaRoomName.room_name)
}
inline void TuyaRoomName::add_room_name(std::string&& value) {
  _impl_.room_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LSLAM.TuyaRoomName.room_name)
}
inline void TuyaRoomName::add_room_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.room_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LSLAM.TuyaRoomName.room_name)
}
inline void TuyaRoomName::add_room_name(const char* value, size_t size) {
  _impl_.room_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LSLAM.TuyaRoomName.room_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TuyaRoomName::room_name() const {
  // @@protoc_insertion_point(field_list:LSLAM.TuyaRoomName.room_name)
  return _impl_.room_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TuyaRoomName::mutable_room_name() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TuyaRoomName.room_name)
  return &_impl_.room_name_;
}

// -------------------------------------------------------------------

// TuyaCleanOrder

// int32 room_number = 1;
inline void TuyaCleanOrder::clear_room_number() {
  _impl_.room_number_ = 0;
}
inline int32_t TuyaCleanOrder::_internal_room_number() const {
  return _impl_.room_number_;
}
inline int32_t TuyaCleanOrder::room_number() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaCleanOrder.room_number)
  return _internal_room_number();
}
inline void TuyaCleanOrder::_internal_set_room_number(int32_t value) {
  
  _impl_.room_number_ = value;
}
inline void TuyaCleanOrder::set_room_number(int32_t value) {
  _internal_set_room_number(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaCleanOrder.room_number)
}

// repeated int32 room_id = 2;
inline int TuyaCleanOrder::_internal_room_id_size() const {
  return _impl_.room_id_.size();
}
inline int TuyaCleanOrder::room_id_size() const {
  return _internal_room_id_size();
}
inline void TuyaCleanOrder::clear_room_id() {
  _impl_.room_id_.Clear();
}
inline int32_t TuyaCleanOrder::_internal_room_id(int index) const {
  return _impl_.room_id_.Get(index);
}
inline int32_t TuyaCleanOrder::room_id(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaCleanOrder.room_id)
  return _internal_room_id(index);
}
inline void TuyaCleanOrder::set_room_id(int index, int32_t value) {
  _impl_.room_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaCleanOrder.room_id)
}
inline void TuyaCleanOrder::_internal_add_room_id(int32_t value) {
  _impl_.room_id_.Add(value);
}
inline void TuyaCleanOrder::add_room_id(int32_t value) {
  _internal_add_room_id(value);
  // @@protoc_insertion_point(field_add:LSLAM.TuyaCleanOrder.room_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaCleanOrder::_internal_room_id() const {
  return _impl_.room_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaCleanOrder::room_id() const {
  // @@protoc_insertion_point(field_list:LSLAM.TuyaCleanOrder.room_id)
  return _internal_room_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaCleanOrder::_internal_mutable_room_id() {
  return &_impl_.room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaCleanOrder::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TuyaCleanOrder.room_id)
  return _internal_mutable_room_id();
}

// -------------------------------------------------------------------

// TuyaRoomProperties

// int32 room_number = 1;
inline void TuyaRoomProperties::clear_room_number() {
  _impl_.room_number_ = 0;
}
inline int32_t TuyaRoomProperties::_internal_room_number() const {
  return _impl_.room_number_;
}
inline int32_t TuyaRoomProperties::room_number() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaRoomProperties.room_number)
  return _internal_room_number();
}
inline void TuyaRoomProperties::_internal_set_room_number(int32_t value) {
  
  _impl_.room_number_ = value;
}
inline void TuyaRoomProperties::set_room_number(int32_t value) {
  _internal_set_room_number(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaRoomProperties.room_number)
}

// repeated int32 room_id = 2;
inline int TuyaRoomProperties::_internal_room_id_size() const {
  return _impl_.room_id_.size();
}
inline int TuyaRoomProperties::room_id_size() const {
  return _internal_room_id_size();
}
inline void TuyaRoomProperties::clear_room_id() {
  _impl_.room_id_.Clear();
}
inline int32_t TuyaRoomProperties::_internal_room_id(int index) const {
  return _impl_.room_id_.Get(index);
}
inline int32_t TuyaRoomProperties::room_id(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaRoomProperties.room_id)
  return _internal_room_id(index);
}
inline void TuyaRoomProperties::set_room_id(int index, int32_t value) {
  _impl_.room_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaRoomProperties.room_id)
}
inline void TuyaRoomProperties::_internal_add_room_id(int32_t value) {
  _impl_.room_id_.Add(value);
}
inline void TuyaRoomProperties::add_room_id(int32_t value) {
  _internal_add_room_id(value);
  // @@protoc_insertion_point(field_add:LSLAM.TuyaRoomProperties.room_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaRoomProperties::_internal_room_id() const {
  return _impl_.room_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaRoomProperties::room_id() const {
  // @@protoc_insertion_point(field_list:LSLAM.TuyaRoomProperties.room_id)
  return _internal_room_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaRoomProperties::_internal_mutable_room_id() {
  return &_impl_.room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaRoomProperties::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TuyaRoomProperties.room_id)
  return _internal_mutable_room_id();
}

// repeated .LSLAM.FanMotorLevel fan_motor_level = 6;
inline int TuyaRoomProperties::_internal_fan_motor_level_size() const {
  return _impl_.fan_motor_level_.size();
}
inline int TuyaRoomProperties::fan_motor_level_size() const {
  return _internal_fan_motor_level_size();
}
inline void TuyaRoomProperties::clear_fan_motor_level() {
  _impl_.fan_motor_level_.Clear();
}
inline ::LSLAM::FanMotorLevel TuyaRoomProperties::_internal_fan_motor_level(int index) const {
  return static_cast< ::LSLAM::FanMotorLevel >(_impl_.fan_motor_level_.Get(index));
}
inline ::LSLAM::FanMotorLevel TuyaRoomProperties::fan_motor_level(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaRoomProperties.fan_motor_level)
  return _internal_fan_motor_level(index);
}
inline void TuyaRoomProperties::set_fan_motor_level(int index, ::LSLAM::FanMotorLevel value) {
  _impl_.fan_motor_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaRoomProperties.fan_motor_level)
}
inline void TuyaRoomProperties::_internal_add_fan_motor_level(::LSLAM::FanMotorLevel value) {
  _impl_.fan_motor_level_.Add(value);
}
inline void TuyaRoomProperties::add_fan_motor_level(::LSLAM::FanMotorLevel value) {
  _internal_add_fan_motor_level(value);
  // @@protoc_insertion_point(field_add:LSLAM.TuyaRoomProperties.fan_motor_level)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TuyaRoomProperties::fan_motor_level() const {
  // @@protoc_insertion_point(field_list:LSLAM.TuyaRoomProperties.fan_motor_level)
  return _impl_.fan_motor_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TuyaRoomProperties::_internal_mutable_fan_motor_level() {
  return &_impl_.fan_motor_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TuyaRoomProperties::mutable_fan_motor_level() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TuyaRoomProperties.fan_motor_level)
  return _internal_mutable_fan_motor_level();
}

// repeated .LSLAM.WaterBoxLevel water_box_level = 7;
inline int TuyaRoomProperties::_internal_water_box_level_size() const {
  return _impl_.water_box_level_.size();
}
inline int TuyaRoomProperties::water_box_level_size() const {
  return _internal_water_box_level_size();
}
inline void TuyaRoomProperties::clear_water_box_level() {
  _impl_.water_box_level_.Clear();
}
inline ::LSLAM::WaterBoxLevel TuyaRoomProperties::_internal_water_box_level(int index) const {
  return static_cast< ::LSLAM::WaterBoxLevel >(_impl_.water_box_level_.Get(index));
}
inline ::LSLAM::WaterBoxLevel TuyaRoomProperties::water_box_level(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaRoomProperties.water_box_level)
  return _internal_water_box_level(index);
}
inline void TuyaRoomProperties::set_water_box_level(int index, ::LSLAM::WaterBoxLevel value) {
  _impl_.water_box_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaRoomProperties.water_box_level)
}
inline void TuyaRoomProperties::_internal_add_water_box_level(::LSLAM::WaterBoxLevel value) {
  _impl_.water_box_level_.Add(value);
}
inline void TuyaRoomProperties::add_water_box_level(::LSLAM::WaterBoxLevel value) {
  _internal_add_water_box_level(value);
  // @@protoc_insertion_point(field_add:LSLAM.TuyaRoomProperties.water_box_level)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TuyaRoomProperties::water_box_level() const {
  // @@protoc_insertion_point(field_list:LSLAM.TuyaRoomProperties.water_box_level)
  return _impl_.water_box_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TuyaRoomProperties::_internal_mutable_water_box_level() {
  return &_impl_.water_box_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TuyaRoomProperties::mutable_water_box_level() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TuyaRoomProperties.water_box_level)
  return _internal_mutable_water_box_level();
}

// repeated int32 clean_number = 8;
inline int TuyaRoomProperties::_internal_clean_number_size() const {
  return _impl_.clean_number_.size();
}
inline int TuyaRoomProperties::clean_number_size() const {
  return _internal_clean_number_size();
}
inline void TuyaRoomProperties::clear_clean_number() {
  _impl_.clean_number_.Clear();
}
inline int32_t TuyaRoomProperties::_internal_clean_number(int index) const {
  return _impl_.clean_number_.Get(index);
}
inline int32_t TuyaRoomProperties::clean_number(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaRoomProperties.clean_number)
  return _internal_clean_number(index);
}
inline void TuyaRoomProperties::set_clean_number(int index, int32_t value) {
  _impl_.clean_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaRoomProperties.clean_number)
}
inline void TuyaRoomProperties::_internal_add_clean_number(int32_t value) {
  _impl_.clean_number_.Add(value);
}
inline void TuyaRoomProperties::add_clean_number(int32_t value) {
  _internal_add_clean_number(value);
  // @@protoc_insertion_point(field_add:LSLAM.TuyaRoomProperties.clean_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaRoomProperties::_internal_clean_number() const {
  return _impl_.clean_number_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaRoomProperties::clean_number() const {
  // @@protoc_insertion_point(field_list:LSLAM.TuyaRoomProperties.clean_number)
  return _internal_clean_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaRoomProperties::_internal_mutable_clean_number() {
  return &_impl_.clean_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaRoomProperties::mutable_clean_number() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TuyaRoomProperties.clean_number)
  return _internal_mutable_clean_number();
}

// -------------------------------------------------------------------

// TuyaSettingConfigurationFile

// .LSLAM.SetVirtualWall set_tuya_virtual_wall = 1;
inline bool TuyaSettingConfigurationFile::_internal_has_set_tuya_virtual_wall() const {
  return this != internal_default_instance() && _impl_.set_tuya_virtual_wall_ != nullptr;
}
inline bool TuyaSettingConfigurationFile::has_set_tuya_virtual_wall() const {
  return _internal_has_set_tuya_virtual_wall();
}
inline void TuyaSettingConfigurationFile::clear_set_tuya_virtual_wall() {
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_virtual_wall_ != nullptr) {
    delete _impl_.set_tuya_virtual_wall_;
  }
  _impl_.set_tuya_virtual_wall_ = nullptr;
}
inline const ::LSLAM::SetVirtualWall& TuyaSettingConfigurationFile::_internal_set_tuya_virtual_wall() const {
  const ::LSLAM::SetVirtualWall* p = _impl_.set_tuya_virtual_wall_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::SetVirtualWall&>(
      ::LSLAM::_SetVirtualWall_default_instance_);
}
inline const ::LSLAM::SetVirtualWall& TuyaSettingConfigurationFile::set_tuya_virtual_wall() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.set_tuya_virtual_wall)
  return _internal_set_tuya_virtual_wall();
}
inline void TuyaSettingConfigurationFile::unsafe_arena_set_allocated_set_tuya_virtual_wall(
    ::LSLAM::SetVirtualWall* set_tuya_virtual_wall) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.set_tuya_virtual_wall_);
  }
  _impl_.set_tuya_virtual_wall_ = set_tuya_virtual_wall;
  if (set_tuya_virtual_wall) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_virtual_wall)
}
inline ::LSLAM::SetVirtualWall* TuyaSettingConfigurationFile::release_set_tuya_virtual_wall() {
  
  ::LSLAM::SetVirtualWall* temp = _impl_.set_tuya_virtual_wall_;
  _impl_.set_tuya_virtual_wall_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::SetVirtualWall* TuyaSettingConfigurationFile::unsafe_arena_release_set_tuya_virtual_wall() {
  // @@protoc_insertion_point(field_release:LSLAM.TuyaSettingConfigurationFile.set_tuya_virtual_wall)
  
  ::LSLAM::SetVirtualWall* temp = _impl_.set_tuya_virtual_wall_;
  _impl_.set_tuya_virtual_wall_ = nullptr;
  return temp;
}
inline ::LSLAM::SetVirtualWall* TuyaSettingConfigurationFile::_internal_mutable_set_tuya_virtual_wall() {
  
  if (_impl_.set_tuya_virtual_wall_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::SetVirtualWall>(GetArenaForAllocation());
    _impl_.set_tuya_virtual_wall_ = p;
  }
  return _impl_.set_tuya_virtual_wall_;
}
inline ::LSLAM::SetVirtualWall* TuyaSettingConfigurationFile::mutable_set_tuya_virtual_wall() {
  ::LSLAM::SetVirtualWall* _msg = _internal_mutable_set_tuya_virtual_wall();
  // @@protoc_insertion_point(field_mutable:LSLAM.TuyaSettingConfigurationFile.set_tuya_virtual_wall)
  return _msg;
}
inline void TuyaSettingConfigurationFile::set_allocated_set_tuya_virtual_wall(::LSLAM::SetVirtualWall* set_tuya_virtual_wall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.set_tuya_virtual_wall_;
  }
  if (set_tuya_virtual_wall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_tuya_virtual_wall);
    if (message_arena != submessage_arena) {
      set_tuya_virtual_wall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_tuya_virtual_wall, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.set_tuya_virtual_wall_ = set_tuya_virtual_wall;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_virtual_wall)
}

// .LSLAM.SetPenaltyArea set_tuya_penalty_area = 2;
inline bool TuyaSettingConfigurationFile::_internal_has_set_tuya_penalty_area() const {
  return this != internal_default_instance() && _impl_.set_tuya_penalty_area_ != nullptr;
}
inline bool TuyaSettingConfigurationFile::has_set_tuya_penalty_area() const {
  return _internal_has_set_tuya_penalty_area();
}
inline void TuyaSettingConfigurationFile::clear_set_tuya_penalty_area() {
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_penalty_area_ != nullptr) {
    delete _impl_.set_tuya_penalty_area_;
  }
  _impl_.set_tuya_penalty_area_ = nullptr;
}
inline const ::LSLAM::SetPenaltyArea& TuyaSettingConfigurationFile::_internal_set_tuya_penalty_area() const {
  const ::LSLAM::SetPenaltyArea* p = _impl_.set_tuya_penalty_area_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::SetPenaltyArea&>(
      ::LSLAM::_SetPenaltyArea_default_instance_);
}
inline const ::LSLAM::SetPenaltyArea& TuyaSettingConfigurationFile::set_tuya_penalty_area() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.set_tuya_penalty_area)
  return _internal_set_tuya_penalty_area();
}
inline void TuyaSettingConfigurationFile::unsafe_arena_set_allocated_set_tuya_penalty_area(
    ::LSLAM::SetPenaltyArea* set_tuya_penalty_area) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.set_tuya_penalty_area_);
  }
  _impl_.set_tuya_penalty_area_ = set_tuya_penalty_area;
  if (set_tuya_penalty_area) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_penalty_area)
}
inline ::LSLAM::SetPenaltyArea* TuyaSettingConfigurationFile::release_set_tuya_penalty_area() {
  
  ::LSLAM::SetPenaltyArea* temp = _impl_.set_tuya_penalty_area_;
  _impl_.set_tuya_penalty_area_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::SetPenaltyArea* TuyaSettingConfigurationFile::unsafe_arena_release_set_tuya_penalty_area() {
  // @@protoc_insertion_point(field_release:LSLAM.TuyaSettingConfigurationFile.set_tuya_penalty_area)
  
  ::LSLAM::SetPenaltyArea* temp = _impl_.set_tuya_penalty_area_;
  _impl_.set_tuya_penalty_area_ = nullptr;
  return temp;
}
inline ::LSLAM::SetPenaltyArea* TuyaSettingConfigurationFile::_internal_mutable_set_tuya_penalty_area() {
  
  if (_impl_.set_tuya_penalty_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::SetPenaltyArea>(GetArenaForAllocation());
    _impl_.set_tuya_penalty_area_ = p;
  }
  return _impl_.set_tuya_penalty_area_;
}
inline ::LSLAM::SetPenaltyArea* TuyaSettingConfigurationFile::mutable_set_tuya_penalty_area() {
  ::LSLAM::SetPenaltyArea* _msg = _internal_mutable_set_tuya_penalty_area();
  // @@protoc_insertion_point(field_mutable:LSLAM.TuyaSettingConfigurationFile.set_tuya_penalty_area)
  return _msg;
}
inline void TuyaSettingConfigurationFile::set_allocated_set_tuya_penalty_area(::LSLAM::SetPenaltyArea* set_tuya_penalty_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.set_tuya_penalty_area_;
  }
  if (set_tuya_penalty_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_tuya_penalty_area);
    if (message_arena != submessage_arena) {
      set_tuya_penalty_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_tuya_penalty_area, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.set_tuya_penalty_area_ = set_tuya_penalty_area;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_penalty_area)
}

// .LSLAM.PartitionSegmentation set_tuya_partition_segmentation = 3;
inline bool TuyaSettingConfigurationFile::_internal_has_set_tuya_partition_segmentation() const {
  return this != internal_default_instance() && _impl_.set_tuya_partition_segmentation_ != nullptr;
}
inline bool TuyaSettingConfigurationFile::has_set_tuya_partition_segmentation() const {
  return _internal_has_set_tuya_partition_segmentation();
}
inline void TuyaSettingConfigurationFile::clear_set_tuya_partition_segmentation() {
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_partition_segmentation_ != nullptr) {
    delete _impl_.set_tuya_partition_segmentation_;
  }
  _impl_.set_tuya_partition_segmentation_ = nullptr;
}
inline const ::LSLAM::PartitionSegmentation& TuyaSettingConfigurationFile::_internal_set_tuya_partition_segmentation() const {
  const ::LSLAM::PartitionSegmentation* p = _impl_.set_tuya_partition_segmentation_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::PartitionSegmentation&>(
      ::LSLAM::_PartitionSegmentation_default_instance_);
}
inline const ::LSLAM::PartitionSegmentation& TuyaSettingConfigurationFile::set_tuya_partition_segmentation() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.set_tuya_partition_segmentation)
  return _internal_set_tuya_partition_segmentation();
}
inline void TuyaSettingConfigurationFile::unsafe_arena_set_allocated_set_tuya_partition_segmentation(
    ::LSLAM::PartitionSegmentation* set_tuya_partition_segmentation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.set_tuya_partition_segmentation_);
  }
  _impl_.set_tuya_partition_segmentation_ = set_tuya_partition_segmentation;
  if (set_tuya_partition_segmentation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_partition_segmentation)
}
inline ::LSLAM::PartitionSegmentation* TuyaSettingConfigurationFile::release_set_tuya_partition_segmentation() {
  
  ::LSLAM::PartitionSegmentation* temp = _impl_.set_tuya_partition_segmentation_;
  _impl_.set_tuya_partition_segmentation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::PartitionSegmentation* TuyaSettingConfigurationFile::unsafe_arena_release_set_tuya_partition_segmentation() {
  // @@protoc_insertion_point(field_release:LSLAM.TuyaSettingConfigurationFile.set_tuya_partition_segmentation)
  
  ::LSLAM::PartitionSegmentation* temp = _impl_.set_tuya_partition_segmentation_;
  _impl_.set_tuya_partition_segmentation_ = nullptr;
  return temp;
}
inline ::LSLAM::PartitionSegmentation* TuyaSettingConfigurationFile::_internal_mutable_set_tuya_partition_segmentation() {
  
  if (_impl_.set_tuya_partition_segmentation_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::PartitionSegmentation>(GetArenaForAllocation());
    _impl_.set_tuya_partition_segmentation_ = p;
  }
  return _impl_.set_tuya_partition_segmentation_;
}
inline ::LSLAM::PartitionSegmentation* TuyaSettingConfigurationFile::mutable_set_tuya_partition_segmentation() {
  ::LSLAM::PartitionSegmentation* _msg = _internal_mutable_set_tuya_partition_segmentation();
  // @@protoc_insertion_point(field_mutable:LSLAM.TuyaSettingConfigurationFile.set_tuya_partition_segmentation)
  return _msg;
}
inline void TuyaSettingConfigurationFile::set_allocated_set_tuya_partition_segmentation(::LSLAM::PartitionSegmentation* set_tuya_partition_segmentation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.set_tuya_partition_segmentation_;
  }
  if (set_tuya_partition_segmentation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_tuya_partition_segmentation);
    if (message_arena != submessage_arena) {
      set_tuya_partition_segmentation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_tuya_partition_segmentation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.set_tuya_partition_segmentation_ = set_tuya_partition_segmentation;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_partition_segmentation)
}

// .LSLAM.PartitionMerge set_tuya_partition_merge = 4;
inline bool TuyaSettingConfigurationFile::_internal_has_set_tuya_partition_merge() const {
  return this != internal_default_instance() && _impl_.set_tuya_partition_merge_ != nullptr;
}
inline bool TuyaSettingConfigurationFile::has_set_tuya_partition_merge() const {
  return _internal_has_set_tuya_partition_merge();
}
inline void TuyaSettingConfigurationFile::clear_set_tuya_partition_merge() {
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_partition_merge_ != nullptr) {
    delete _impl_.set_tuya_partition_merge_;
  }
  _impl_.set_tuya_partition_merge_ = nullptr;
}
inline const ::LSLAM::PartitionMerge& TuyaSettingConfigurationFile::_internal_set_tuya_partition_merge() const {
  const ::LSLAM::PartitionMerge* p = _impl_.set_tuya_partition_merge_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::PartitionMerge&>(
      ::LSLAM::_PartitionMerge_default_instance_);
}
inline const ::LSLAM::PartitionMerge& TuyaSettingConfigurationFile::set_tuya_partition_merge() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.set_tuya_partition_merge)
  return _internal_set_tuya_partition_merge();
}
inline void TuyaSettingConfigurationFile::unsafe_arena_set_allocated_set_tuya_partition_merge(
    ::LSLAM::PartitionMerge* set_tuya_partition_merge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.set_tuya_partition_merge_);
  }
  _impl_.set_tuya_partition_merge_ = set_tuya_partition_merge;
  if (set_tuya_partition_merge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_partition_merge)
}
inline ::LSLAM::PartitionMerge* TuyaSettingConfigurationFile::release_set_tuya_partition_merge() {
  
  ::LSLAM::PartitionMerge* temp = _impl_.set_tuya_partition_merge_;
  _impl_.set_tuya_partition_merge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::PartitionMerge* TuyaSettingConfigurationFile::unsafe_arena_release_set_tuya_partition_merge() {
  // @@protoc_insertion_point(field_release:LSLAM.TuyaSettingConfigurationFile.set_tuya_partition_merge)
  
  ::LSLAM::PartitionMerge* temp = _impl_.set_tuya_partition_merge_;
  _impl_.set_tuya_partition_merge_ = nullptr;
  return temp;
}
inline ::LSLAM::PartitionMerge* TuyaSettingConfigurationFile::_internal_mutable_set_tuya_partition_merge() {
  
  if (_impl_.set_tuya_partition_merge_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::PartitionMerge>(GetArenaForAllocation());
    _impl_.set_tuya_partition_merge_ = p;
  }
  return _impl_.set_tuya_partition_merge_;
}
inline ::LSLAM::PartitionMerge* TuyaSettingConfigurationFile::mutable_set_tuya_partition_merge() {
  ::LSLAM::PartitionMerge* _msg = _internal_mutable_set_tuya_partition_merge();
  // @@protoc_insertion_point(field_mutable:LSLAM.TuyaSettingConfigurationFile.set_tuya_partition_merge)
  return _msg;
}
inline void TuyaSettingConfigurationFile::set_allocated_set_tuya_partition_merge(::LSLAM::PartitionMerge* set_tuya_partition_merge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.set_tuya_partition_merge_;
  }
  if (set_tuya_partition_merge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_tuya_partition_merge);
    if (message_arena != submessage_arena) {
      set_tuya_partition_merge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_tuya_partition_merge, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.set_tuya_partition_merge_ = set_tuya_partition_merge;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_partition_merge)
}

// bool partition_switch = 5;
inline void TuyaSettingConfigurationFile::clear_partition_switch() {
  _impl_.partition_switch_ = false;
}
inline bool TuyaSettingConfigurationFile::_internal_partition_switch() const {
  return _impl_.partition_switch_;
}
inline bool TuyaSettingConfigurationFile::partition_switch() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.partition_switch)
  return _internal_partition_switch();
}
inline void TuyaSettingConfigurationFile::_internal_set_partition_switch(bool value) {
  
  _impl_.partition_switch_ = value;
}
inline void TuyaSettingConfigurationFile::set_partition_switch(bool value) {
  _internal_set_partition_switch(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaSettingConfigurationFile.partition_switch)
}

// .LSLAM.TuyaRoomName set_tuya_room_name = 6;
inline bool TuyaSettingConfigurationFile::_internal_has_set_tuya_room_name() const {
  return this != internal_default_instance() && _impl_.set_tuya_room_name_ != nullptr;
}
inline bool TuyaSettingConfigurationFile::has_set_tuya_room_name() const {
  return _internal_has_set_tuya_room_name();
}
inline void TuyaSettingConfigurationFile::clear_set_tuya_room_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_room_name_ != nullptr) {
    delete _impl_.set_tuya_room_name_;
  }
  _impl_.set_tuya_room_name_ = nullptr;
}
inline const ::LSLAM::TuyaRoomName& TuyaSettingConfigurationFile::_internal_set_tuya_room_name() const {
  const ::LSLAM::TuyaRoomName* p = _impl_.set_tuya_room_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::TuyaRoomName&>(
      ::LSLAM::_TuyaRoomName_default_instance_);
}
inline const ::LSLAM::TuyaRoomName& TuyaSettingConfigurationFile::set_tuya_room_name() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.set_tuya_room_name)
  return _internal_set_tuya_room_name();
}
inline void TuyaSettingConfigurationFile::unsafe_arena_set_allocated_set_tuya_room_name(
    ::LSLAM::TuyaRoomName* set_tuya_room_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.set_tuya_room_name_);
  }
  _impl_.set_tuya_room_name_ = set_tuya_room_name;
  if (set_tuya_room_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_room_name)
}
inline ::LSLAM::TuyaRoomName* TuyaSettingConfigurationFile::release_set_tuya_room_name() {
  
  ::LSLAM::TuyaRoomName* temp = _impl_.set_tuya_room_name_;
  _impl_.set_tuya_room_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::TuyaRoomName* TuyaSettingConfigurationFile::unsafe_arena_release_set_tuya_room_name() {
  // @@protoc_insertion_point(field_release:LSLAM.TuyaSettingConfigurationFile.set_tuya_room_name)
  
  ::LSLAM::TuyaRoomName* temp = _impl_.set_tuya_room_name_;
  _impl_.set_tuya_room_name_ = nullptr;
  return temp;
}
inline ::LSLAM::TuyaRoomName* TuyaSettingConfigurationFile::_internal_mutable_set_tuya_room_name() {
  
  if (_impl_.set_tuya_room_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::TuyaRoomName>(GetArenaForAllocation());
    _impl_.set_tuya_room_name_ = p;
  }
  return _impl_.set_tuya_room_name_;
}
inline ::LSLAM::TuyaRoomName* TuyaSettingConfigurationFile::mutable_set_tuya_room_name() {
  ::LSLAM::TuyaRoomName* _msg = _internal_mutable_set_tuya_room_name();
  // @@protoc_insertion_point(field_mutable:LSLAM.TuyaSettingConfigurationFile.set_tuya_room_name)
  return _msg;
}
inline void TuyaSettingConfigurationFile::set_allocated_set_tuya_room_name(::LSLAM::TuyaRoomName* set_tuya_room_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.set_tuya_room_name_;
  }
  if (set_tuya_room_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_tuya_room_name);
    if (message_arena != submessage_arena) {
      set_tuya_room_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_tuya_room_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.set_tuya_room_name_ = set_tuya_room_name;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_room_name)
}

// .LSLAM.TuyaCleanOrder set_tuya_clean_order = 7;
inline bool TuyaSettingConfigurationFile::_internal_has_set_tuya_clean_order() const {
  return this != internal_default_instance() && _impl_.set_tuya_clean_order_ != nullptr;
}
inline bool TuyaSettingConfigurationFile::has_set_tuya_clean_order() const {
  return _internal_has_set_tuya_clean_order();
}
inline void TuyaSettingConfigurationFile::clear_set_tuya_clean_order() {
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_clean_order_ != nullptr) {
    delete _impl_.set_tuya_clean_order_;
  }
  _impl_.set_tuya_clean_order_ = nullptr;
}
inline const ::LSLAM::TuyaCleanOrder& TuyaSettingConfigurationFile::_internal_set_tuya_clean_order() const {
  const ::LSLAM::TuyaCleanOrder* p = _impl_.set_tuya_clean_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::TuyaCleanOrder&>(
      ::LSLAM::_TuyaCleanOrder_default_instance_);
}
inline const ::LSLAM::TuyaCleanOrder& TuyaSettingConfigurationFile::set_tuya_clean_order() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.set_tuya_clean_order)
  return _internal_set_tuya_clean_order();
}
inline void TuyaSettingConfigurationFile::unsafe_arena_set_allocated_set_tuya_clean_order(
    ::LSLAM::TuyaCleanOrder* set_tuya_clean_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.set_tuya_clean_order_);
  }
  _impl_.set_tuya_clean_order_ = set_tuya_clean_order;
  if (set_tuya_clean_order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_clean_order)
}
inline ::LSLAM::TuyaCleanOrder* TuyaSettingConfigurationFile::release_set_tuya_clean_order() {
  
  ::LSLAM::TuyaCleanOrder* temp = _impl_.set_tuya_clean_order_;
  _impl_.set_tuya_clean_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::TuyaCleanOrder* TuyaSettingConfigurationFile::unsafe_arena_release_set_tuya_clean_order() {
  // @@protoc_insertion_point(field_release:LSLAM.TuyaSettingConfigurationFile.set_tuya_clean_order)
  
  ::LSLAM::TuyaCleanOrder* temp = _impl_.set_tuya_clean_order_;
  _impl_.set_tuya_clean_order_ = nullptr;
  return temp;
}
inline ::LSLAM::TuyaCleanOrder* TuyaSettingConfigurationFile::_internal_mutable_set_tuya_clean_order() {
  
  if (_impl_.set_tuya_clean_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::TuyaCleanOrder>(GetArenaForAllocation());
    _impl_.set_tuya_clean_order_ = p;
  }
  return _impl_.set_tuya_clean_order_;
}
inline ::LSLAM::TuyaCleanOrder* TuyaSettingConfigurationFile::mutable_set_tuya_clean_order() {
  ::LSLAM::TuyaCleanOrder* _msg = _internal_mutable_set_tuya_clean_order();
  // @@protoc_insertion_point(field_mutable:LSLAM.TuyaSettingConfigurationFile.set_tuya_clean_order)
  return _msg;
}
inline void TuyaSettingConfigurationFile::set_allocated_set_tuya_clean_order(::LSLAM::TuyaCleanOrder* set_tuya_clean_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.set_tuya_clean_order_;
  }
  if (set_tuya_clean_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_tuya_clean_order);
    if (message_arena != submessage_arena) {
      set_tuya_clean_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_tuya_clean_order, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.set_tuya_clean_order_ = set_tuya_clean_order;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_clean_order)
}

// .LSLAM.TuyaRoomProperties set_tuya_room_properties = 8;
inline bool TuyaSettingConfigurationFile::_internal_has_set_tuya_room_properties() const {
  return this != internal_default_instance() && _impl_.set_tuya_room_properties_ != nullptr;
}
inline bool TuyaSettingConfigurationFile::has_set_tuya_room_properties() const {
  return _internal_has_set_tuya_room_properties();
}
inline void TuyaSettingConfigurationFile::clear_set_tuya_room_properties() {
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_room_properties_ != nullptr) {
    delete _impl_.set_tuya_room_properties_;
  }
  _impl_.set_tuya_room_properties_ = nullptr;
}
inline const ::LSLAM::TuyaRoomProperties& TuyaSettingConfigurationFile::_internal_set_tuya_room_properties() const {
  const ::LSLAM::TuyaRoomProperties* p = _impl_.set_tuya_room_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::TuyaRoomProperties&>(
      ::LSLAM::_TuyaRoomProperties_default_instance_);
}
inline const ::LSLAM::TuyaRoomProperties& TuyaSettingConfigurationFile::set_tuya_room_properties() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.set_tuya_room_properties)
  return _internal_set_tuya_room_properties();
}
inline void TuyaSettingConfigurationFile::unsafe_arena_set_allocated_set_tuya_room_properties(
    ::LSLAM::TuyaRoomProperties* set_tuya_room_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.set_tuya_room_properties_);
  }
  _impl_.set_tuya_room_properties_ = set_tuya_room_properties;
  if (set_tuya_room_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_room_properties)
}
inline ::LSLAM::TuyaRoomProperties* TuyaSettingConfigurationFile::release_set_tuya_room_properties() {
  
  ::LSLAM::TuyaRoomProperties* temp = _impl_.set_tuya_room_properties_;
  _impl_.set_tuya_room_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::TuyaRoomProperties* TuyaSettingConfigurationFile::unsafe_arena_release_set_tuya_room_properties() {
  // @@protoc_insertion_point(field_release:LSLAM.TuyaSettingConfigurationFile.set_tuya_room_properties)
  
  ::LSLAM::TuyaRoomProperties* temp = _impl_.set_tuya_room_properties_;
  _impl_.set_tuya_room_properties_ = nullptr;
  return temp;
}
inline ::LSLAM::TuyaRoomProperties* TuyaSettingConfigurationFile::_internal_mutable_set_tuya_room_properties() {
  
  if (_impl_.set_tuya_room_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::TuyaRoomProperties>(GetArenaForAllocation());
    _impl_.set_tuya_room_properties_ = p;
  }
  return _impl_.set_tuya_room_properties_;
}
inline ::LSLAM::TuyaRoomProperties* TuyaSettingConfigurationFile::mutable_set_tuya_room_properties() {
  ::LSLAM::TuyaRoomProperties* _msg = _internal_mutable_set_tuya_room_properties();
  // @@protoc_insertion_point(field_mutable:LSLAM.TuyaSettingConfigurationFile.set_tuya_room_properties)
  return _msg;
}
inline void TuyaSettingConfigurationFile::set_allocated_set_tuya_room_properties(::LSLAM::TuyaRoomProperties* set_tuya_room_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.set_tuya_room_properties_;
  }
  if (set_tuya_room_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_tuya_room_properties);
    if (message_arena != submessage_arena) {
      set_tuya_room_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_tuya_room_properties, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.set_tuya_room_properties_ = set_tuya_room_properties;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_tuya_room_properties)
}

// int32 recharge_world_point_x = 9;
inline void TuyaSettingConfigurationFile::clear_recharge_world_point_x() {
  _impl_.recharge_world_point_x_ = 0;
}
inline int32_t TuyaSettingConfigurationFile::_internal_recharge_world_point_x() const {
  return _impl_.recharge_world_point_x_;
}
inline int32_t TuyaSettingConfigurationFile::recharge_world_point_x() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.recharge_world_point_x)
  return _internal_recharge_world_point_x();
}
inline void TuyaSettingConfigurationFile::_internal_set_recharge_world_point_x(int32_t value) {
  
  _impl_.recharge_world_point_x_ = value;
}
inline void TuyaSettingConfigurationFile::set_recharge_world_point_x(int32_t value) {
  _internal_set_recharge_world_point_x(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaSettingConfigurationFile.recharge_world_point_x)
}

// int32 recharge_world_point_y = 10;
inline void TuyaSettingConfigurationFile::clear_recharge_world_point_y() {
  _impl_.recharge_world_point_y_ = 0;
}
inline int32_t TuyaSettingConfigurationFile::_internal_recharge_world_point_y() const {
  return _impl_.recharge_world_point_y_;
}
inline int32_t TuyaSettingConfigurationFile::recharge_world_point_y() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.recharge_world_point_y)
  return _internal_recharge_world_point_y();
}
inline void TuyaSettingConfigurationFile::_internal_set_recharge_world_point_y(int32_t value) {
  
  _impl_.recharge_world_point_y_ = value;
}
inline void TuyaSettingConfigurationFile::set_recharge_world_point_y(int32_t value) {
  _internal_set_recharge_world_point_y(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaSettingConfigurationFile.recharge_world_point_y)
}

// int32 recharge_grid_point_x = 11;
inline void TuyaSettingConfigurationFile::clear_recharge_grid_point_x() {
  _impl_.recharge_grid_point_x_ = 0;
}
inline int32_t TuyaSettingConfigurationFile::_internal_recharge_grid_point_x() const {
  return _impl_.recharge_grid_point_x_;
}
inline int32_t TuyaSettingConfigurationFile::recharge_grid_point_x() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.recharge_grid_point_x)
  return _internal_recharge_grid_point_x();
}
inline void TuyaSettingConfigurationFile::_internal_set_recharge_grid_point_x(int32_t value) {
  
  _impl_.recharge_grid_point_x_ = value;
}
inline void TuyaSettingConfigurationFile::set_recharge_grid_point_x(int32_t value) {
  _internal_set_recharge_grid_point_x(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaSettingConfigurationFile.recharge_grid_point_x)
}

// int32 recharge_grid_point_y = 12;
inline void TuyaSettingConfigurationFile::clear_recharge_grid_point_y() {
  _impl_.recharge_grid_point_y_ = 0;
}
inline int32_t TuyaSettingConfigurationFile::_internal_recharge_grid_point_y() const {
  return _impl_.recharge_grid_point_y_;
}
inline int32_t TuyaSettingConfigurationFile::recharge_grid_point_y() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.recharge_grid_point_y)
  return _internal_recharge_grid_point_y();
}
inline void TuyaSettingConfigurationFile::_internal_set_recharge_grid_point_y(int32_t value) {
  
  _impl_.recharge_grid_point_y_ = value;
}
inline void TuyaSettingConfigurationFile::set_recharge_grid_point_y(int32_t value) {
  _internal_set_recharge_grid_point_y(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaSettingConfigurationFile.recharge_grid_point_y)
}

// int32 whether_near_partner = 13;
inline void TuyaSettingConfigurationFile::clear_whether_near_partner() {
  _impl_.whether_near_partner_ = 0;
}
inline int32_t TuyaSettingConfigurationFile::_internal_whether_near_partner() const {
  return _impl_.whether_near_partner_;
}
inline int32_t TuyaSettingConfigurationFile::whether_near_partner() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.whether_near_partner)
  return _internal_whether_near_partner();
}
inline void TuyaSettingConfigurationFile::_internal_set_whether_near_partner(int32_t value) {
  
  _impl_.whether_near_partner_ = value;
}
inline void TuyaSettingConfigurationFile::set_whether_near_partner(int32_t value) {
  _internal_set_whether_near_partner(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaSettingConfigurationFile.whether_near_partner)
}

// int32 whether_adjust_right_pos = 14;
inline void TuyaSettingConfigurationFile::clear_whether_adjust_right_pos() {
  _impl_.whether_adjust_right_pos_ = 0;
}
inline int32_t TuyaSettingConfigurationFile::_internal_whether_adjust_right_pos() const {
  return _impl_.whether_adjust_right_pos_;
}
inline int32_t TuyaSettingConfigurationFile::whether_adjust_right_pos() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.whether_adjust_right_pos)
  return _internal_whether_adjust_right_pos();
}
inline void TuyaSettingConfigurationFile::_internal_set_whether_adjust_right_pos(int32_t value) {
  
  _impl_.whether_adjust_right_pos_ = value;
}
inline void TuyaSettingConfigurationFile::set_whether_adjust_right_pos(int32_t value) {
  _internal_set_whether_adjust_right_pos(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaSettingConfigurationFile.whether_adjust_right_pos)
}

// repeated int32 virtual_wall_data = 15;
inline int TuyaSettingConfigurationFile::_internal_virtual_wall_data_size() const {
  return _impl_.virtual_wall_data_.size();
}
inline int TuyaSettingConfigurationFile::virtual_wall_data_size() const {
  return _internal_virtual_wall_data_size();
}
inline void TuyaSettingConfigurationFile::clear_virtual_wall_data() {
  _impl_.virtual_wall_data_.Clear();
}
inline int32_t TuyaSettingConfigurationFile::_internal_virtual_wall_data(int index) const {
  return _impl_.virtual_wall_data_.Get(index);
}
inline int32_t TuyaSettingConfigurationFile::virtual_wall_data(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.virtual_wall_data)
  return _internal_virtual_wall_data(index);
}
inline void TuyaSettingConfigurationFile::set_virtual_wall_data(int index, int32_t value) {
  _impl_.virtual_wall_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaSettingConfigurationFile.virtual_wall_data)
}
inline void TuyaSettingConfigurationFile::_internal_add_virtual_wall_data(int32_t value) {
  _impl_.virtual_wall_data_.Add(value);
}
inline void TuyaSettingConfigurationFile::add_virtual_wall_data(int32_t value) {
  _internal_add_virtual_wall_data(value);
  // @@protoc_insertion_point(field_add:LSLAM.TuyaSettingConfigurationFile.virtual_wall_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaSettingConfigurationFile::_internal_virtual_wall_data() const {
  return _impl_.virtual_wall_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaSettingConfigurationFile::virtual_wall_data() const {
  // @@protoc_insertion_point(field_list:LSLAM.TuyaSettingConfigurationFile.virtual_wall_data)
  return _internal_virtual_wall_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaSettingConfigurationFile::_internal_mutable_virtual_wall_data() {
  return &_impl_.virtual_wall_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaSettingConfigurationFile::mutable_virtual_wall_data() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TuyaSettingConfigurationFile.virtual_wall_data)
  return _internal_mutable_virtual_wall_data();
}

// repeated int32 penalty_area_data = 16;
inline int TuyaSettingConfigurationFile::_internal_penalty_area_data_size() const {
  return _impl_.penalty_area_data_.size();
}
inline int TuyaSettingConfigurationFile::penalty_area_data_size() const {
  return _internal_penalty_area_data_size();
}
inline void TuyaSettingConfigurationFile::clear_penalty_area_data() {
  _impl_.penalty_area_data_.Clear();
}
inline int32_t TuyaSettingConfigurationFile::_internal_penalty_area_data(int index) const {
  return _impl_.penalty_area_data_.Get(index);
}
inline int32_t TuyaSettingConfigurationFile::penalty_area_data(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.penalty_area_data)
  return _internal_penalty_area_data(index);
}
inline void TuyaSettingConfigurationFile::set_penalty_area_data(int index, int32_t value) {
  _impl_.penalty_area_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaSettingConfigurationFile.penalty_area_data)
}
inline void TuyaSettingConfigurationFile::_internal_add_penalty_area_data(int32_t value) {
  _impl_.penalty_area_data_.Add(value);
}
inline void TuyaSettingConfigurationFile::add_penalty_area_data(int32_t value) {
  _internal_add_penalty_area_data(value);
  // @@protoc_insertion_point(field_add:LSLAM.TuyaSettingConfigurationFile.penalty_area_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaSettingConfigurationFile::_internal_penalty_area_data() const {
  return _impl_.penalty_area_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaSettingConfigurationFile::penalty_area_data() const {
  // @@protoc_insertion_point(field_list:LSLAM.TuyaSettingConfigurationFile.penalty_area_data)
  return _internal_penalty_area_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaSettingConfigurationFile::_internal_mutable_penalty_area_data() {
  return &_impl_.penalty_area_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaSettingConfigurationFile::mutable_penalty_area_data() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TuyaSettingConfigurationFile.penalty_area_data)
  return _internal_mutable_penalty_area_data();
}

// bytes set_language_pack_name = 17;
inline void TuyaSettingConfigurationFile::clear_set_language_pack_name() {
  _impl_.set_language_pack_name_.ClearToEmpty();
}
inline const std::string& TuyaSettingConfigurationFile::set_language_pack_name() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaSettingConfigurationFile.set_language_pack_name)
  return _internal_set_language_pack_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TuyaSettingConfigurationFile::set_set_language_pack_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.set_language_pack_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LSLAM.TuyaSettingConfigurationFile.set_language_pack_name)
}
inline std::string* TuyaSettingConfigurationFile::mutable_set_language_pack_name() {
  std::string* _s = _internal_mutable_set_language_pack_name();
  // @@protoc_insertion_point(field_mutable:LSLAM.TuyaSettingConfigurationFile.set_language_pack_name)
  return _s;
}
inline const std::string& TuyaSettingConfigurationFile::_internal_set_language_pack_name() const {
  return _impl_.set_language_pack_name_.Get();
}
inline void TuyaSettingConfigurationFile::_internal_set_set_language_pack_name(const std::string& value) {
  
  _impl_.set_language_pack_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TuyaSettingConfigurationFile::_internal_mutable_set_language_pack_name() {
  
  return _impl_.set_language_pack_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TuyaSettingConfigurationFile::release_set_language_pack_name() {
  // @@protoc_insertion_point(field_release:LSLAM.TuyaSettingConfigurationFile.set_language_pack_name)
  return _impl_.set_language_pack_name_.Release();
}
inline void TuyaSettingConfigurationFile::set_allocated_set_language_pack_name(std::string* set_language_pack_name) {
  if (set_language_pack_name != nullptr) {
    
  } else {
    
  }
  _impl_.set_language_pack_name_.SetAllocated(set_language_pack_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.set_language_pack_name_.IsDefault()) {
    _impl_.set_language_pack_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LSLAM.TuyaSettingConfigurationFile.set_language_pack_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LSLAM::SetPenaltyArea_PenaltyAreaMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::SetPenaltyArea_PenaltyAreaMode>() {
  return ::LSLAM::SetPenaltyArea_PenaltyAreaMode_descriptor();
}
template <> struct is_proto_enum< ::LSLAM::FanMotorLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::FanMotorLevel>() {
  return ::LSLAM::FanMotorLevel_descriptor();
}
template <> struct is_proto_enum< ::LSLAM::WaterBoxLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::WaterBoxLevel>() {
  return ::LSLAM::WaterBoxLevel_descriptor();
}
template <> struct is_proto_enum< ::LSLAM::CleanMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::CleanMode>() {
  return ::LSLAM::CleanMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TuyaDpConfigurationFile_2eproto
