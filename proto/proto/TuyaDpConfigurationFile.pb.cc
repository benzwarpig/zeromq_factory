// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TuyaDpConfigurationFile.proto

#include "TuyaDpConfigurationFile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR SetVirtualWall::SetVirtualWall(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.virtual_wall_points_)*/{}
  , /*decltype(_impl_.virtual_wall_number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetVirtualWallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVirtualWallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVirtualWallDefaultTypeInternal() {}
  union {
    SetVirtualWall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVirtualWallDefaultTypeInternal _SetVirtualWall_default_instance_;
PROTOBUF_CONSTEXPR SetPenaltyArea::SetPenaltyArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ban_sweep_penalty_area_points_)*/{}
  , /*decltype(_impl_.ban_clean_and_sweep_penalty_area_points_)*/{}
  , /*decltype(_impl_.ban_sweep_penalty_area_number_)*/0
  , /*decltype(_impl_.ban_clean_and_sweep_penalty_area_number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetPenaltyAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPenaltyAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPenaltyAreaDefaultTypeInternal() {}
  union {
    SetPenaltyArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPenaltyAreaDefaultTypeInternal _SetPenaltyArea_default_instance_;
PROTOBUF_CONSTEXPR PartitionSegmentation::PartitionSegmentation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_segmentation_points_)*/{}
  , /*decltype(_impl_.partition_segmentation_room_id_)*/0
  , /*decltype(_impl_.partition_segmentation_set_result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartitionSegmentationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionSegmentationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionSegmentationDefaultTypeInternal() {}
  union {
    PartitionSegmentation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionSegmentationDefaultTypeInternal _PartitionSegmentation_default_instance_;
PROTOBUF_CONSTEXPR PartitionMerge::PartitionMerge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_merge_room_id_)*/{}
  , /*decltype(_impl_._partition_merge_room_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.partition_merge_set_result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartitionMergeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionMergeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionMergeDefaultTypeInternal() {}
  union {
    PartitionMerge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionMergeDefaultTypeInternal _PartitionMerge_default_instance_;
PROTOBUF_CONSTEXPR TuyaRoomName::TuyaRoomName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_id_)*/{}
  , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.room_name_length_)*/{}
  , /*decltype(_impl_._room_name_length_cached_byte_size_)*/{0}
  , /*decltype(_impl_.room_name_)*/{}
  , /*decltype(_impl_.room_number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TuyaRoomNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TuyaRoomNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TuyaRoomNameDefaultTypeInternal() {}
  union {
    TuyaRoomName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TuyaRoomNameDefaultTypeInternal _TuyaRoomName_default_instance_;
PROTOBUF_CONSTEXPR TuyaCleanOrder::TuyaCleanOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_id_)*/{}
  , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.room_number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TuyaCleanOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TuyaCleanOrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TuyaCleanOrderDefaultTypeInternal() {}
  union {
    TuyaCleanOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TuyaCleanOrderDefaultTypeInternal _TuyaCleanOrder_default_instance_;
PROTOBUF_CONSTEXPR TuyaRoomProperties::TuyaRoomProperties(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_id_)*/{}
  , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.fan_motor_level_)*/{}
  , /*decltype(_impl_._fan_motor_level_cached_byte_size_)*/{0}
  , /*decltype(_impl_.water_box_level_)*/{}
  , /*decltype(_impl_._water_box_level_cached_byte_size_)*/{0}
  , /*decltype(_impl_.clean_number_)*/{}
  , /*decltype(_impl_._clean_number_cached_byte_size_)*/{0}
  , /*decltype(_impl_.room_number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TuyaRoomPropertiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TuyaRoomPropertiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TuyaRoomPropertiesDefaultTypeInternal() {}
  union {
    TuyaRoomProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TuyaRoomPropertiesDefaultTypeInternal _TuyaRoomProperties_default_instance_;
PROTOBUF_CONSTEXPR TuyaSettingConfigurationFile::TuyaSettingConfigurationFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.virtual_wall_data_)*/{}
  , /*decltype(_impl_._virtual_wall_data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.penalty_area_data_)*/{}
  , /*decltype(_impl_._penalty_area_data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.set_language_pack_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.set_tuya_virtual_wall_)*/nullptr
  , /*decltype(_impl_.set_tuya_penalty_area_)*/nullptr
  , /*decltype(_impl_.set_tuya_partition_segmentation_)*/nullptr
  , /*decltype(_impl_.set_tuya_partition_merge_)*/nullptr
  , /*decltype(_impl_.set_tuya_room_name_)*/nullptr
  , /*decltype(_impl_.set_tuya_clean_order_)*/nullptr
  , /*decltype(_impl_.set_tuya_room_properties_)*/nullptr
  , /*decltype(_impl_.partition_switch_)*/false
  , /*decltype(_impl_.recharge_world_point_x_)*/0
  , /*decltype(_impl_.recharge_world_point_y_)*/0
  , /*decltype(_impl_.recharge_grid_point_x_)*/0
  , /*decltype(_impl_.recharge_grid_point_y_)*/0
  , /*decltype(_impl_.whether_near_partner_)*/0
  , /*decltype(_impl_.whether_adjust_right_pos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TuyaSettingConfigurationFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TuyaSettingConfigurationFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TuyaSettingConfigurationFileDefaultTypeInternal() {}
  union {
    TuyaSettingConfigurationFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TuyaSettingConfigurationFileDefaultTypeInternal _TuyaSettingConfigurationFile_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_TuyaDpConfigurationFile_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TuyaDpConfigurationFile_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TuyaDpConfigurationFile_2eproto = nullptr;

const uint32_t TableStruct_TuyaDpConfigurationFile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::SetVirtualWall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::SetVirtualWall, _impl_.virtual_wall_number_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::SetVirtualWall, _impl_.virtual_wall_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::SetPenaltyArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::SetPenaltyArea, _impl_.ban_sweep_penalty_area_number_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::SetPenaltyArea, _impl_.ban_sweep_penalty_area_points_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::SetPenaltyArea, _impl_.ban_clean_and_sweep_penalty_area_number_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::SetPenaltyArea, _impl_.ban_clean_and_sweep_penalty_area_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::PartitionSegmentation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::PartitionSegmentation, _impl_.partition_segmentation_room_id_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::PartitionSegmentation, _impl_.partition_segmentation_points_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::PartitionSegmentation, _impl_.partition_segmentation_set_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::PartitionMerge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::PartitionMerge, _impl_.partition_merge_room_id_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::PartitionMerge, _impl_.partition_merge_set_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaRoomName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaRoomName, _impl_.room_number_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaRoomName, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaRoomName, _impl_.room_name_length_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaRoomName, _impl_.room_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaCleanOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaCleanOrder, _impl_.room_number_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaCleanOrder, _impl_.room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaRoomProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaRoomProperties, _impl_.room_number_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaRoomProperties, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaRoomProperties, _impl_.fan_motor_level_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaRoomProperties, _impl_.water_box_level_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaRoomProperties, _impl_.clean_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.set_tuya_virtual_wall_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.set_tuya_penalty_area_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.set_tuya_partition_segmentation_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.set_tuya_partition_merge_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.partition_switch_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.set_tuya_room_name_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.set_tuya_clean_order_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.set_tuya_room_properties_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.recharge_world_point_x_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.recharge_world_point_y_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.recharge_grid_point_x_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.recharge_grid_point_y_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.whether_near_partner_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.whether_adjust_right_pos_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.virtual_wall_data_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.penalty_area_data_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaSettingConfigurationFile, _impl_.set_language_pack_name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::SetVirtualWall)},
  { 10, -1, -1, sizeof(::LSLAM::SetPenaltyArea)},
  { 22, -1, -1, sizeof(::LSLAM::PartitionSegmentation)},
  { 33, -1, -1, sizeof(::LSLAM::PartitionMerge)},
  { 43, -1, -1, sizeof(::LSLAM::TuyaRoomName)},
  { 55, -1, -1, sizeof(::LSLAM::TuyaCleanOrder)},
  { 65, -1, -1, sizeof(::LSLAM::TuyaRoomProperties)},
  { 78, -1, -1, sizeof(::LSLAM::TuyaSettingConfigurationFile)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_SetVirtualWall_default_instance_._instance,
  &::LSLAM::_SetPenaltyArea_default_instance_._instance,
  &::LSLAM::_PartitionSegmentation_default_instance_._instance,
  &::LSLAM::_PartitionMerge_default_instance_._instance,
  &::LSLAM::_TuyaRoomName_default_instance_._instance,
  &::LSLAM::_TuyaCleanOrder_default_instance_._instance,
  &::LSLAM::_TuyaRoomProperties_default_instance_._instance,
  &::LSLAM::_TuyaSettingConfigurationFile_default_instance_._instance,
};

const char descriptor_table_protodef_TuyaDpConfigurationFile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035TuyaDpConfigurationFile.proto\022\005LSLAM\032\014"
  "Points.proto\"Y\n\016SetVirtualWall\022\033\n\023virtua"
  "l_wall_number\030\001 \001(\005\022*\n\023virtual_wall_poin"
  "ts\030\002 \003(\0132\r.LSLAM.Points\"\250\002\n\016SetPenaltyAr"
  "ea\022%\n\035ban_sweep_penalty_area_number\030\001 \001("
  "\005\0224\n\035ban_sweep_penalty_area_points\030\002 \003(\013"
  "2\r.LSLAM.Points\022/\n\'ban_clean_and_sweep_p"
  "enalty_area_number\030\003 \001(\005\022>\n\'ban_clean_an"
  "d_sweep_penalty_area_points\030\004 \003(\0132\r.LSLA"
  "M.Points\"H\n\017PenaltyAreaMode\022\027\n\023ban_clean"
  "_and_sweep\020\000\022\r\n\tban_clean\020\001\022\r\n\tban_sweep"
  "\020\002\"\240\001\n\025PartitionSegmentation\022&\n\036partitio"
  "n_segmentation_room_id\030\001 \001(\005\0224\n\035partitio"
  "n_segmentation_points\030\002 \003(\0132\r.LSLAM.Poin"
  "ts\022)\n!partition_segmentation_set_result\030"
  "\003 \001(\005\"U\n\016PartitionMerge\022\037\n\027partition_mer"
  "ge_room_id\030\001 \003(\005\022\"\n\032partition_merge_set_"
  "result\030\003 \001(\005\"a\n\014TuyaRoomName\022\023\n\013room_num"
  "ber\030\001 \001(\005\022\017\n\007room_id\030\002 \003(\005\022\030\n\020room_name_"
  "length\030\003 \003(\005\022\021\n\troom_name\030\004 \003(\t\"6\n\016TuyaC"
  "leanOrder\022\023\n\013room_number\030\001 \001(\005\022\017\n\007room_i"
  "d\030\002 \003(\005\"\256\001\n\022TuyaRoomProperties\022\023\n\013room_n"
  "umber\030\001 \001(\005\022\017\n\007room_id\030\002 \003(\005\022-\n\017fan_moto"
  "r_level\030\006 \003(\0162\024.LSLAM.FanMotorLevel\022-\n\017w"
  "ater_box_level\030\007 \003(\0162\024.LSLAM.WaterBoxLev"
  "el\022\024\n\014clean_number\030\010 \003(\005\"\333\005\n\034TuyaSetting"
  "ConfigurationFile\0224\n\025set_tuya_virtual_wa"
  "ll\030\001 \001(\0132\025.LSLAM.SetVirtualWall\0224\n\025set_t"
  "uya_penalty_area\030\002 \001(\0132\025.LSLAM.SetPenalt"
  "yArea\022E\n\037set_tuya_partition_segmentation"
  "\030\003 \001(\0132\034.LSLAM.PartitionSegmentation\0227\n\030"
  "set_tuya_partition_merge\030\004 \001(\0132\025.LSLAM.P"
  "artitionMerge\022\030\n\020partition_switch\030\005 \001(\010\022"
  "/\n\022set_tuya_room_name\030\006 \001(\0132\023.LSLAM.Tuya"
  "RoomName\0223\n\024set_tuya_clean_order\030\007 \001(\0132\025"
  ".LSLAM.TuyaCleanOrder\022;\n\030set_tuya_room_p"
  "roperties\030\010 \001(\0132\031.LSLAM.TuyaRoomProperti"
  "es\022\036\n\026recharge_world_point_x\030\t \001(\005\022\036\n\026re"
  "charge_world_point_y\030\n \001(\005\022\035\n\025recharge_g"
  "rid_point_x\030\013 \001(\005\022\035\n\025recharge_grid_point"
  "_y\030\014 \001(\005\022\034\n\024whether_near_partner\030\r \001(\005\022 "
  "\n\030whether_adjust_right_pos\030\016 \001(\005\022\031\n\021virt"
  "ual_wall_data\030\017 \003(\005\022\031\n\021penalty_area_data"
  "\030\020 \003(\005\022\036\n\026set_language_pack_name\030\021 \001(\014*\227"
  "\001\n\rFanMotorLevel\022\023\n\017FAN_MOTOR_CLOSE\020\000\022\022\n"
  "\016FAN_MOTOR_MUTE\020\001\022\024\n\020FAN_MOTOR_NORMAL\020\002\022"
  "\024\n\020FAN_MOTOR_STRONG\020\003\022\032\n\026FAN_MOTOR_SUPER"
  "_STRONG\020\004\022\025\n\021FAN_MOTOR_NOT_SET\020\005*\224\001\n\rWat"
  "erBoxLevel\022\031\n\025WATER_BOX_LEVEL_CLOSE\020\000\022\027\n"
  "\023WATER_BOX_LEVEL_ONE\020\001\022\027\n\023WATER_BOX_LEVE"
  "L_TWO\020\002\022\031\n\025WATER_BOX_LEVEL_THREE\020\003\022\033\n\027WA"
  "TER_BOX_LEVEL_NOT_SET\020\004*6\n\tCleanMode\022\023\n\017"
  "CLEAN_AND_SWEEP\020\000\022\t\n\005CLEAN\020\001\022\t\n\005SWEEP\020\002b"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TuyaDpConfigurationFile_2eproto_deps[1] = {
  &::descriptor_table_Points_2eproto,
};
static ::_pbi::once_flag descriptor_table_TuyaDpConfigurationFile_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TuyaDpConfigurationFile_2eproto = {
    false, false, 2127, descriptor_table_protodef_TuyaDpConfigurationFile_2eproto,
    "TuyaDpConfigurationFile.proto",
    &descriptor_table_TuyaDpConfigurationFile_2eproto_once, descriptor_table_TuyaDpConfigurationFile_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_TuyaDpConfigurationFile_2eproto::offsets,
    file_level_metadata_TuyaDpConfigurationFile_2eproto, file_level_enum_descriptors_TuyaDpConfigurationFile_2eproto,
    file_level_service_descriptors_TuyaDpConfigurationFile_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TuyaDpConfigurationFile_2eproto_getter() {
  return &descriptor_table_TuyaDpConfigurationFile_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TuyaDpConfigurationFile_2eproto(&descriptor_table_TuyaDpConfigurationFile_2eproto);
namespace LSLAM {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetPenaltyArea_PenaltyAreaMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TuyaDpConfigurationFile_2eproto);
  return file_level_enum_descriptors_TuyaDpConfigurationFile_2eproto[0];
}
bool SetPenaltyArea_PenaltyAreaMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SetPenaltyArea_PenaltyAreaMode SetPenaltyArea::ban_clean_and_sweep;
constexpr SetPenaltyArea_PenaltyAreaMode SetPenaltyArea::ban_clean;
constexpr SetPenaltyArea_PenaltyAreaMode SetPenaltyArea::ban_sweep;
constexpr SetPenaltyArea_PenaltyAreaMode SetPenaltyArea::PenaltyAreaMode_MIN;
constexpr SetPenaltyArea_PenaltyAreaMode SetPenaltyArea::PenaltyAreaMode_MAX;
constexpr int SetPenaltyArea::PenaltyAreaMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FanMotorLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TuyaDpConfigurationFile_2eproto);
  return file_level_enum_descriptors_TuyaDpConfigurationFile_2eproto[1];
}
bool FanMotorLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaterBoxLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TuyaDpConfigurationFile_2eproto);
  return file_level_enum_descriptors_TuyaDpConfigurationFile_2eproto[2];
}
bool WaterBoxLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CleanMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TuyaDpConfigurationFile_2eproto);
  return file_level_enum_descriptors_TuyaDpConfigurationFile_2eproto[3];
}
bool CleanMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SetVirtualWall::_Internal {
 public:
};

void SetVirtualWall::clear_virtual_wall_points() {
  _impl_.virtual_wall_points_.Clear();
}
SetVirtualWall::SetVirtualWall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.SetVirtualWall)
}
SetVirtualWall::SetVirtualWall(const SetVirtualWall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetVirtualWall* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_wall_points_){from._impl_.virtual_wall_points_}
    , decltype(_impl_.virtual_wall_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.virtual_wall_number_ = from._impl_.virtual_wall_number_;
  // @@protoc_insertion_point(copy_constructor:LSLAM.SetVirtualWall)
}

inline void SetVirtualWall::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_wall_points_){arena}
    , decltype(_impl_.virtual_wall_number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetVirtualWall::~SetVirtualWall() {
  // @@protoc_insertion_point(destructor:LSLAM.SetVirtualWall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetVirtualWall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.virtual_wall_points_.~RepeatedPtrField();
}

void SetVirtualWall::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetVirtualWall::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.SetVirtualWall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_wall_points_.Clear();
  _impl_.virtual_wall_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVirtualWall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 virtual_wall_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.virtual_wall_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.Points virtual_wall_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtual_wall_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetVirtualWall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.SetVirtualWall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 virtual_wall_number = 1;
  if (this->_internal_virtual_wall_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_virtual_wall_number(), target);
  }

  // repeated .LSLAM.Points virtual_wall_points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_virtual_wall_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_virtual_wall_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.SetVirtualWall)
  return target;
}

size_t SetVirtualWall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.SetVirtualWall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.Points virtual_wall_points = 2;
  total_size += 1UL * this->_internal_virtual_wall_points_size();
  for (const auto& msg : this->_impl_.virtual_wall_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 virtual_wall_number = 1;
  if (this->_internal_virtual_wall_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_virtual_wall_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVirtualWall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetVirtualWall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVirtualWall::GetClassData() const { return &_class_data_; }


void SetVirtualWall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetVirtualWall*>(&to_msg);
  auto& from = static_cast<const SetVirtualWall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.SetVirtualWall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.virtual_wall_points_.MergeFrom(from._impl_.virtual_wall_points_);
  if (from._internal_virtual_wall_number() != 0) {
    _this->_internal_set_virtual_wall_number(from._internal_virtual_wall_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVirtualWall::CopyFrom(const SetVirtualWall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.SetVirtualWall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVirtualWall::IsInitialized() const {
  return true;
}

void SetVirtualWall::InternalSwap(SetVirtualWall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.virtual_wall_points_.InternalSwap(&other->_impl_.virtual_wall_points_);
  swap(_impl_.virtual_wall_number_, other->_impl_.virtual_wall_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVirtualWall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TuyaDpConfigurationFile_2eproto_getter, &descriptor_table_TuyaDpConfigurationFile_2eproto_once,
      file_level_metadata_TuyaDpConfigurationFile_2eproto[0]);
}

// ===================================================================

class SetPenaltyArea::_Internal {
 public:
};

void SetPenaltyArea::clear_ban_sweep_penalty_area_points() {
  _impl_.ban_sweep_penalty_area_points_.Clear();
}
void SetPenaltyArea::clear_ban_clean_and_sweep_penalty_area_points() {
  _impl_.ban_clean_and_sweep_penalty_area_points_.Clear();
}
SetPenaltyArea::SetPenaltyArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.SetPenaltyArea)
}
SetPenaltyArea::SetPenaltyArea(const SetPenaltyArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetPenaltyArea* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ban_sweep_penalty_area_points_){from._impl_.ban_sweep_penalty_area_points_}
    , decltype(_impl_.ban_clean_and_sweep_penalty_area_points_){from._impl_.ban_clean_and_sweep_penalty_area_points_}
    , decltype(_impl_.ban_sweep_penalty_area_number_){}
    , decltype(_impl_.ban_clean_and_sweep_penalty_area_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ban_sweep_penalty_area_number_, &from._impl_.ban_sweep_penalty_area_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ban_clean_and_sweep_penalty_area_number_) -
    reinterpret_cast<char*>(&_impl_.ban_sweep_penalty_area_number_)) + sizeof(_impl_.ban_clean_and_sweep_penalty_area_number_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.SetPenaltyArea)
}

inline void SetPenaltyArea::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ban_sweep_penalty_area_points_){arena}
    , decltype(_impl_.ban_clean_and_sweep_penalty_area_points_){arena}
    , decltype(_impl_.ban_sweep_penalty_area_number_){0}
    , decltype(_impl_.ban_clean_and_sweep_penalty_area_number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetPenaltyArea::~SetPenaltyArea() {
  // @@protoc_insertion_point(destructor:LSLAM.SetPenaltyArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPenaltyArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ban_sweep_penalty_area_points_.~RepeatedPtrField();
  _impl_.ban_clean_and_sweep_penalty_area_points_.~RepeatedPtrField();
}

void SetPenaltyArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetPenaltyArea::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.SetPenaltyArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ban_sweep_penalty_area_points_.Clear();
  _impl_.ban_clean_and_sweep_penalty_area_points_.Clear();
  ::memset(&_impl_.ban_sweep_penalty_area_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ban_clean_and_sweep_penalty_area_number_) -
      reinterpret_cast<char*>(&_impl_.ban_sweep_penalty_area_number_)) + sizeof(_impl_.ban_clean_and_sweep_penalty_area_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPenaltyArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ban_sweep_penalty_area_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ban_sweep_penalty_area_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.Points ban_sweep_penalty_area_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ban_sweep_penalty_area_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 ban_clean_and_sweep_penalty_area_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ban_clean_and_sweep_penalty_area_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.Points ban_clean_and_sweep_penalty_area_points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ban_clean_and_sweep_penalty_area_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPenaltyArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.SetPenaltyArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ban_sweep_penalty_area_number = 1;
  if (this->_internal_ban_sweep_penalty_area_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ban_sweep_penalty_area_number(), target);
  }

  // repeated .LSLAM.Points ban_sweep_penalty_area_points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ban_sweep_penalty_area_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_ban_sweep_penalty_area_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 ban_clean_and_sweep_penalty_area_number = 3;
  if (this->_internal_ban_clean_and_sweep_penalty_area_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ban_clean_and_sweep_penalty_area_number(), target);
  }

  // repeated .LSLAM.Points ban_clean_and_sweep_penalty_area_points = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ban_clean_and_sweep_penalty_area_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_ban_clean_and_sweep_penalty_area_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.SetPenaltyArea)
  return target;
}

size_t SetPenaltyArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.SetPenaltyArea)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.Points ban_sweep_penalty_area_points = 2;
  total_size += 1UL * this->_internal_ban_sweep_penalty_area_points_size();
  for (const auto& msg : this->_impl_.ban_sweep_penalty_area_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LSLAM.Points ban_clean_and_sweep_penalty_area_points = 4;
  total_size += 1UL * this->_internal_ban_clean_and_sweep_penalty_area_points_size();
  for (const auto& msg : this->_impl_.ban_clean_and_sweep_penalty_area_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ban_sweep_penalty_area_number = 1;
  if (this->_internal_ban_sweep_penalty_area_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ban_sweep_penalty_area_number());
  }

  // int32 ban_clean_and_sweep_penalty_area_number = 3;
  if (this->_internal_ban_clean_and_sweep_penalty_area_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ban_clean_and_sweep_penalty_area_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPenaltyArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetPenaltyArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPenaltyArea::GetClassData() const { return &_class_data_; }


void SetPenaltyArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetPenaltyArea*>(&to_msg);
  auto& from = static_cast<const SetPenaltyArea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.SetPenaltyArea)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ban_sweep_penalty_area_points_.MergeFrom(from._impl_.ban_sweep_penalty_area_points_);
  _this->_impl_.ban_clean_and_sweep_penalty_area_points_.MergeFrom(from._impl_.ban_clean_and_sweep_penalty_area_points_);
  if (from._internal_ban_sweep_penalty_area_number() != 0) {
    _this->_internal_set_ban_sweep_penalty_area_number(from._internal_ban_sweep_penalty_area_number());
  }
  if (from._internal_ban_clean_and_sweep_penalty_area_number() != 0) {
    _this->_internal_set_ban_clean_and_sweep_penalty_area_number(from._internal_ban_clean_and_sweep_penalty_area_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPenaltyArea::CopyFrom(const SetPenaltyArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.SetPenaltyArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPenaltyArea::IsInitialized() const {
  return true;
}

void SetPenaltyArea::InternalSwap(SetPenaltyArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ban_sweep_penalty_area_points_.InternalSwap(&other->_impl_.ban_sweep_penalty_area_points_);
  _impl_.ban_clean_and_sweep_penalty_area_points_.InternalSwap(&other->_impl_.ban_clean_and_sweep_penalty_area_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPenaltyArea, _impl_.ban_clean_and_sweep_penalty_area_number_)
      + sizeof(SetPenaltyArea::_impl_.ban_clean_and_sweep_penalty_area_number_)
      - PROTOBUF_FIELD_OFFSET(SetPenaltyArea, _impl_.ban_sweep_penalty_area_number_)>(
          reinterpret_cast<char*>(&_impl_.ban_sweep_penalty_area_number_),
          reinterpret_cast<char*>(&other->_impl_.ban_sweep_penalty_area_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPenaltyArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TuyaDpConfigurationFile_2eproto_getter, &descriptor_table_TuyaDpConfigurationFile_2eproto_once,
      file_level_metadata_TuyaDpConfigurationFile_2eproto[1]);
}

// ===================================================================

class PartitionSegmentation::_Internal {
 public:
};

void PartitionSegmentation::clear_partition_segmentation_points() {
  _impl_.partition_segmentation_points_.Clear();
}
PartitionSegmentation::PartitionSegmentation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.PartitionSegmentation)
}
PartitionSegmentation::PartitionSegmentation(const PartitionSegmentation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartitionSegmentation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_segmentation_points_){from._impl_.partition_segmentation_points_}
    , decltype(_impl_.partition_segmentation_room_id_){}
    , decltype(_impl_.partition_segmentation_set_result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.partition_segmentation_room_id_, &from._impl_.partition_segmentation_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partition_segmentation_set_result_) -
    reinterpret_cast<char*>(&_impl_.partition_segmentation_room_id_)) + sizeof(_impl_.partition_segmentation_set_result_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.PartitionSegmentation)
}

inline void PartitionSegmentation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_segmentation_points_){arena}
    , decltype(_impl_.partition_segmentation_room_id_){0}
    , decltype(_impl_.partition_segmentation_set_result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PartitionSegmentation::~PartitionSegmentation() {
  // @@protoc_insertion_point(destructor:LSLAM.PartitionSegmentation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartitionSegmentation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_segmentation_points_.~RepeatedPtrField();
}

void PartitionSegmentation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartitionSegmentation::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.PartitionSegmentation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_segmentation_points_.Clear();
  ::memset(&_impl_.partition_segmentation_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partition_segmentation_set_result_) -
      reinterpret_cast<char*>(&_impl_.partition_segmentation_room_id_)) + sizeof(_impl_.partition_segmentation_set_result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartitionSegmentation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 partition_segmentation_room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.partition_segmentation_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.Points partition_segmentation_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partition_segmentation_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 partition_segmentation_set_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partition_segmentation_set_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartitionSegmentation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.PartitionSegmentation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 partition_segmentation_room_id = 1;
  if (this->_internal_partition_segmentation_room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_partition_segmentation_room_id(), target);
  }

  // repeated .LSLAM.Points partition_segmentation_points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partition_segmentation_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_partition_segmentation_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 partition_segmentation_set_result = 3;
  if (this->_internal_partition_segmentation_set_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_partition_segmentation_set_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.PartitionSegmentation)
  return target;
}

size_t PartitionSegmentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.PartitionSegmentation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.Points partition_segmentation_points = 2;
  total_size += 1UL * this->_internal_partition_segmentation_points_size();
  for (const auto& msg : this->_impl_.partition_segmentation_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 partition_segmentation_room_id = 1;
  if (this->_internal_partition_segmentation_room_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partition_segmentation_room_id());
  }

  // int32 partition_segmentation_set_result = 3;
  if (this->_internal_partition_segmentation_set_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partition_segmentation_set_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartitionSegmentation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartitionSegmentation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartitionSegmentation::GetClassData() const { return &_class_data_; }


void PartitionSegmentation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartitionSegmentation*>(&to_msg);
  auto& from = static_cast<const PartitionSegmentation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.PartitionSegmentation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_segmentation_points_.MergeFrom(from._impl_.partition_segmentation_points_);
  if (from._internal_partition_segmentation_room_id() != 0) {
    _this->_internal_set_partition_segmentation_room_id(from._internal_partition_segmentation_room_id());
  }
  if (from._internal_partition_segmentation_set_result() != 0) {
    _this->_internal_set_partition_segmentation_set_result(from._internal_partition_segmentation_set_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionSegmentation::CopyFrom(const PartitionSegmentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.PartitionSegmentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionSegmentation::IsInitialized() const {
  return true;
}

void PartitionSegmentation::InternalSwap(PartitionSegmentation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_segmentation_points_.InternalSwap(&other->_impl_.partition_segmentation_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartitionSegmentation, _impl_.partition_segmentation_set_result_)
      + sizeof(PartitionSegmentation::_impl_.partition_segmentation_set_result_)
      - PROTOBUF_FIELD_OFFSET(PartitionSegmentation, _impl_.partition_segmentation_room_id_)>(
          reinterpret_cast<char*>(&_impl_.partition_segmentation_room_id_),
          reinterpret_cast<char*>(&other->_impl_.partition_segmentation_room_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionSegmentation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TuyaDpConfigurationFile_2eproto_getter, &descriptor_table_TuyaDpConfigurationFile_2eproto_once,
      file_level_metadata_TuyaDpConfigurationFile_2eproto[2]);
}

// ===================================================================

class PartitionMerge::_Internal {
 public:
};

PartitionMerge::PartitionMerge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.PartitionMerge)
}
PartitionMerge::PartitionMerge(const PartitionMerge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartitionMerge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_merge_room_id_){from._impl_.partition_merge_room_id_}
    , /*decltype(_impl_._partition_merge_room_id_cached_byte_size_)*/{0}
    , decltype(_impl_.partition_merge_set_result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.partition_merge_set_result_ = from._impl_.partition_merge_set_result_;
  // @@protoc_insertion_point(copy_constructor:LSLAM.PartitionMerge)
}

inline void PartitionMerge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_merge_room_id_){arena}
    , /*decltype(_impl_._partition_merge_room_id_cached_byte_size_)*/{0}
    , decltype(_impl_.partition_merge_set_result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PartitionMerge::~PartitionMerge() {
  // @@protoc_insertion_point(destructor:LSLAM.PartitionMerge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartitionMerge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_merge_room_id_.~RepeatedField();
}

void PartitionMerge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartitionMerge::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.PartitionMerge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_merge_room_id_.Clear();
  _impl_.partition_merge_set_result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartitionMerge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 partition_merge_room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_partition_merge_room_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_partition_merge_room_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 partition_merge_set_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partition_merge_set_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartitionMerge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.PartitionMerge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 partition_merge_room_id = 1;
  {
    int byte_size = _impl_._partition_merge_room_id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_partition_merge_room_id(), byte_size, target);
    }
  }

  // int32 partition_merge_set_result = 3;
  if (this->_internal_partition_merge_set_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_partition_merge_set_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.PartitionMerge)
  return target;
}

size_t PartitionMerge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.PartitionMerge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 partition_merge_room_id = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.partition_merge_room_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partition_merge_room_id_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // int32 partition_merge_set_result = 3;
  if (this->_internal_partition_merge_set_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partition_merge_set_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartitionMerge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartitionMerge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartitionMerge::GetClassData() const { return &_class_data_; }


void PartitionMerge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartitionMerge*>(&to_msg);
  auto& from = static_cast<const PartitionMerge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.PartitionMerge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_merge_room_id_.MergeFrom(from._impl_.partition_merge_room_id_);
  if (from._internal_partition_merge_set_result() != 0) {
    _this->_internal_set_partition_merge_set_result(from._internal_partition_merge_set_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionMerge::CopyFrom(const PartitionMerge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.PartitionMerge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionMerge::IsInitialized() const {
  return true;
}

void PartitionMerge::InternalSwap(PartitionMerge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_merge_room_id_.InternalSwap(&other->_impl_.partition_merge_room_id_);
  swap(_impl_.partition_merge_set_result_, other->_impl_.partition_merge_set_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionMerge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TuyaDpConfigurationFile_2eproto_getter, &descriptor_table_TuyaDpConfigurationFile_2eproto_once,
      file_level_metadata_TuyaDpConfigurationFile_2eproto[3]);
}

// ===================================================================

class TuyaRoomName::_Internal {
 public:
};

TuyaRoomName::TuyaRoomName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.TuyaRoomName)
}
TuyaRoomName::TuyaRoomName(const TuyaRoomName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TuyaRoomName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){from._impl_.room_id_}
    , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
    , decltype(_impl_.room_name_length_){from._impl_.room_name_length_}
    , /*decltype(_impl_._room_name_length_cached_byte_size_)*/{0}
    , decltype(_impl_.room_name_){from._impl_.room_name_}
    , decltype(_impl_.room_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.room_number_ = from._impl_.room_number_;
  // @@protoc_insertion_point(copy_constructor:LSLAM.TuyaRoomName)
}

inline void TuyaRoomName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){arena}
    , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
    , decltype(_impl_.room_name_length_){arena}
    , /*decltype(_impl_._room_name_length_cached_byte_size_)*/{0}
    , decltype(_impl_.room_name_){arena}
    , decltype(_impl_.room_number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TuyaRoomName::~TuyaRoomName() {
  // @@protoc_insertion_point(destructor:LSLAM.TuyaRoomName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TuyaRoomName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_id_.~RepeatedField();
  _impl_.room_name_length_.~RepeatedField();
  _impl_.room_name_.~RepeatedPtrField();
}

void TuyaRoomName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TuyaRoomName::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.TuyaRoomName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_id_.Clear();
  _impl_.room_name_length_.Clear();
  _impl_.room_name_.Clear();
  _impl_.room_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuyaRoomName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 room_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_room_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_room_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 room_name_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_room_name_length(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_room_name_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string room_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_room_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "LSLAM.TuyaRoomName.room_name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TuyaRoomName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.TuyaRoomName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_number = 1;
  if (this->_internal_room_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_number(), target);
  }

  // repeated int32 room_id = 2;
  {
    int byte_size = _impl_._room_id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_room_id(), byte_size, target);
    }
  }

  // repeated int32 room_name_length = 3;
  {
    int byte_size = _impl_._room_name_length_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_room_name_length(), byte_size, target);
    }
  }

  // repeated string room_name = 4;
  for (int i = 0, n = this->_internal_room_name_size(); i < n; i++) {
    const auto& s = this->_internal_room_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LSLAM.TuyaRoomName.room_name");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.TuyaRoomName)
  return target;
}

size_t TuyaRoomName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.TuyaRoomName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 room_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.room_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._room_id_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated int32 room_name_length = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.room_name_length_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._room_name_length_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated string room_name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.room_name_.size());
  for (int i = 0, n = _impl_.room_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.room_name_.Get(i));
  }

  // int32 room_number = 1;
  if (this->_internal_room_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TuyaRoomName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TuyaRoomName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TuyaRoomName::GetClassData() const { return &_class_data_; }


void TuyaRoomName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TuyaRoomName*>(&to_msg);
  auto& from = static_cast<const TuyaRoomName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.TuyaRoomName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.room_id_.MergeFrom(from._impl_.room_id_);
  _this->_impl_.room_name_length_.MergeFrom(from._impl_.room_name_length_);
  _this->_impl_.room_name_.MergeFrom(from._impl_.room_name_);
  if (from._internal_room_number() != 0) {
    _this->_internal_set_room_number(from._internal_room_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TuyaRoomName::CopyFrom(const TuyaRoomName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.TuyaRoomName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuyaRoomName::IsInitialized() const {
  return true;
}

void TuyaRoomName::InternalSwap(TuyaRoomName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.room_id_.InternalSwap(&other->_impl_.room_id_);
  _impl_.room_name_length_.InternalSwap(&other->_impl_.room_name_length_);
  _impl_.room_name_.InternalSwap(&other->_impl_.room_name_);
  swap(_impl_.room_number_, other->_impl_.room_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuyaRoomName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TuyaDpConfigurationFile_2eproto_getter, &descriptor_table_TuyaDpConfigurationFile_2eproto_once,
      file_level_metadata_TuyaDpConfigurationFile_2eproto[4]);
}

// ===================================================================

class TuyaCleanOrder::_Internal {
 public:
};

TuyaCleanOrder::TuyaCleanOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.TuyaCleanOrder)
}
TuyaCleanOrder::TuyaCleanOrder(const TuyaCleanOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TuyaCleanOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){from._impl_.room_id_}
    , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
    , decltype(_impl_.room_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.room_number_ = from._impl_.room_number_;
  // @@protoc_insertion_point(copy_constructor:LSLAM.TuyaCleanOrder)
}

inline void TuyaCleanOrder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){arena}
    , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
    , decltype(_impl_.room_number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TuyaCleanOrder::~TuyaCleanOrder() {
  // @@protoc_insertion_point(destructor:LSLAM.TuyaCleanOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TuyaCleanOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_id_.~RepeatedField();
}

void TuyaCleanOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TuyaCleanOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.TuyaCleanOrder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_id_.Clear();
  _impl_.room_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuyaCleanOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 room_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_room_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_room_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TuyaCleanOrder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.TuyaCleanOrder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_number = 1;
  if (this->_internal_room_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_number(), target);
  }

  // repeated int32 room_id = 2;
  {
    int byte_size = _impl_._room_id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_room_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.TuyaCleanOrder)
  return target;
}

size_t TuyaCleanOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.TuyaCleanOrder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 room_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.room_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._room_id_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // int32 room_number = 1;
  if (this->_internal_room_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TuyaCleanOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TuyaCleanOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TuyaCleanOrder::GetClassData() const { return &_class_data_; }


void TuyaCleanOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TuyaCleanOrder*>(&to_msg);
  auto& from = static_cast<const TuyaCleanOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.TuyaCleanOrder)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.room_id_.MergeFrom(from._impl_.room_id_);
  if (from._internal_room_number() != 0) {
    _this->_internal_set_room_number(from._internal_room_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TuyaCleanOrder::CopyFrom(const TuyaCleanOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.TuyaCleanOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuyaCleanOrder::IsInitialized() const {
  return true;
}

void TuyaCleanOrder::InternalSwap(TuyaCleanOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.room_id_.InternalSwap(&other->_impl_.room_id_);
  swap(_impl_.room_number_, other->_impl_.room_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuyaCleanOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TuyaDpConfigurationFile_2eproto_getter, &descriptor_table_TuyaDpConfigurationFile_2eproto_once,
      file_level_metadata_TuyaDpConfigurationFile_2eproto[5]);
}

// ===================================================================

class TuyaRoomProperties::_Internal {
 public:
};

TuyaRoomProperties::TuyaRoomProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.TuyaRoomProperties)
}
TuyaRoomProperties::TuyaRoomProperties(const TuyaRoomProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TuyaRoomProperties* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){from._impl_.room_id_}
    , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
    , decltype(_impl_.fan_motor_level_){from._impl_.fan_motor_level_}
    , /*decltype(_impl_._fan_motor_level_cached_byte_size_)*/{0}
    , decltype(_impl_.water_box_level_){from._impl_.water_box_level_}
    , /*decltype(_impl_._water_box_level_cached_byte_size_)*/{0}
    , decltype(_impl_.clean_number_){from._impl_.clean_number_}
    , /*decltype(_impl_._clean_number_cached_byte_size_)*/{0}
    , decltype(_impl_.room_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.room_number_ = from._impl_.room_number_;
  // @@protoc_insertion_point(copy_constructor:LSLAM.TuyaRoomProperties)
}

inline void TuyaRoomProperties::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){arena}
    , /*decltype(_impl_._room_id_cached_byte_size_)*/{0}
    , decltype(_impl_.fan_motor_level_){arena}
    , /*decltype(_impl_._fan_motor_level_cached_byte_size_)*/{0}
    , decltype(_impl_.water_box_level_){arena}
    , /*decltype(_impl_._water_box_level_cached_byte_size_)*/{0}
    , decltype(_impl_.clean_number_){arena}
    , /*decltype(_impl_._clean_number_cached_byte_size_)*/{0}
    , decltype(_impl_.room_number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TuyaRoomProperties::~TuyaRoomProperties() {
  // @@protoc_insertion_point(destructor:LSLAM.TuyaRoomProperties)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TuyaRoomProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_id_.~RepeatedField();
  _impl_.fan_motor_level_.~RepeatedField();
  _impl_.water_box_level_.~RepeatedField();
  _impl_.clean_number_.~RepeatedField();
}

void TuyaRoomProperties::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TuyaRoomProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.TuyaRoomProperties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_id_.Clear();
  _impl_.fan_motor_level_.Clear();
  _impl_.water_box_level_.Clear();
  _impl_.clean_number_.Clear();
  _impl_.room_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuyaRoomProperties::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 room_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_room_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_room_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.FanMotorLevel fan_motor_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_fan_motor_level(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_fan_motor_level(static_cast<::LSLAM::FanMotorLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.WaterBoxLevel water_box_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_water_box_level(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_water_box_level(static_cast<::LSLAM::WaterBoxLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 clean_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_clean_number(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_clean_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TuyaRoomProperties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.TuyaRoomProperties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_number = 1;
  if (this->_internal_room_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_number(), target);
  }

  // repeated int32 room_id = 2;
  {
    int byte_size = _impl_._room_id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_room_id(), byte_size, target);
    }
  }

  // repeated .LSLAM.FanMotorLevel fan_motor_level = 6;
  {
    int byte_size = _impl_._fan_motor_level_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          6, _impl_.fan_motor_level_, byte_size, target);
    }
  }

  // repeated .LSLAM.WaterBoxLevel water_box_level = 7;
  {
    int byte_size = _impl_._water_box_level_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, _impl_.water_box_level_, byte_size, target);
    }
  }

  // repeated int32 clean_number = 8;
  {
    int byte_size = _impl_._clean_number_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_clean_number(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.TuyaRoomProperties)
  return target;
}

size_t TuyaRoomProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.TuyaRoomProperties)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 room_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.room_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._room_id_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated .LSLAM.FanMotorLevel fan_motor_level = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_fan_motor_level_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_fan_motor_level(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._fan_motor_level_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated .LSLAM.WaterBoxLevel water_box_level = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_water_box_level_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_water_box_level(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._water_box_level_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated int32 clean_number = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.clean_number_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._clean_number_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // int32 room_number = 1;
  if (this->_internal_room_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TuyaRoomProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TuyaRoomProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TuyaRoomProperties::GetClassData() const { return &_class_data_; }


void TuyaRoomProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TuyaRoomProperties*>(&to_msg);
  auto& from = static_cast<const TuyaRoomProperties&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.TuyaRoomProperties)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.room_id_.MergeFrom(from._impl_.room_id_);
  _this->_impl_.fan_motor_level_.MergeFrom(from._impl_.fan_motor_level_);
  _this->_impl_.water_box_level_.MergeFrom(from._impl_.water_box_level_);
  _this->_impl_.clean_number_.MergeFrom(from._impl_.clean_number_);
  if (from._internal_room_number() != 0) {
    _this->_internal_set_room_number(from._internal_room_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TuyaRoomProperties::CopyFrom(const TuyaRoomProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.TuyaRoomProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuyaRoomProperties::IsInitialized() const {
  return true;
}

void TuyaRoomProperties::InternalSwap(TuyaRoomProperties* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.room_id_.InternalSwap(&other->_impl_.room_id_);
  _impl_.fan_motor_level_.InternalSwap(&other->_impl_.fan_motor_level_);
  _impl_.water_box_level_.InternalSwap(&other->_impl_.water_box_level_);
  _impl_.clean_number_.InternalSwap(&other->_impl_.clean_number_);
  swap(_impl_.room_number_, other->_impl_.room_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuyaRoomProperties::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TuyaDpConfigurationFile_2eproto_getter, &descriptor_table_TuyaDpConfigurationFile_2eproto_once,
      file_level_metadata_TuyaDpConfigurationFile_2eproto[6]);
}

// ===================================================================

class TuyaSettingConfigurationFile::_Internal {
 public:
  static const ::LSLAM::SetVirtualWall& set_tuya_virtual_wall(const TuyaSettingConfigurationFile* msg);
  static const ::LSLAM::SetPenaltyArea& set_tuya_penalty_area(const TuyaSettingConfigurationFile* msg);
  static const ::LSLAM::PartitionSegmentation& set_tuya_partition_segmentation(const TuyaSettingConfigurationFile* msg);
  static const ::LSLAM::PartitionMerge& set_tuya_partition_merge(const TuyaSettingConfigurationFile* msg);
  static const ::LSLAM::TuyaRoomName& set_tuya_room_name(const TuyaSettingConfigurationFile* msg);
  static const ::LSLAM::TuyaCleanOrder& set_tuya_clean_order(const TuyaSettingConfigurationFile* msg);
  static const ::LSLAM::TuyaRoomProperties& set_tuya_room_properties(const TuyaSettingConfigurationFile* msg);
};

const ::LSLAM::SetVirtualWall&
TuyaSettingConfigurationFile::_Internal::set_tuya_virtual_wall(const TuyaSettingConfigurationFile* msg) {
  return *msg->_impl_.set_tuya_virtual_wall_;
}
const ::LSLAM::SetPenaltyArea&
TuyaSettingConfigurationFile::_Internal::set_tuya_penalty_area(const TuyaSettingConfigurationFile* msg) {
  return *msg->_impl_.set_tuya_penalty_area_;
}
const ::LSLAM::PartitionSegmentation&
TuyaSettingConfigurationFile::_Internal::set_tuya_partition_segmentation(const TuyaSettingConfigurationFile* msg) {
  return *msg->_impl_.set_tuya_partition_segmentation_;
}
const ::LSLAM::PartitionMerge&
TuyaSettingConfigurationFile::_Internal::set_tuya_partition_merge(const TuyaSettingConfigurationFile* msg) {
  return *msg->_impl_.set_tuya_partition_merge_;
}
const ::LSLAM::TuyaRoomName&
TuyaSettingConfigurationFile::_Internal::set_tuya_room_name(const TuyaSettingConfigurationFile* msg) {
  return *msg->_impl_.set_tuya_room_name_;
}
const ::LSLAM::TuyaCleanOrder&
TuyaSettingConfigurationFile::_Internal::set_tuya_clean_order(const TuyaSettingConfigurationFile* msg) {
  return *msg->_impl_.set_tuya_clean_order_;
}
const ::LSLAM::TuyaRoomProperties&
TuyaSettingConfigurationFile::_Internal::set_tuya_room_properties(const TuyaSettingConfigurationFile* msg) {
  return *msg->_impl_.set_tuya_room_properties_;
}
TuyaSettingConfigurationFile::TuyaSettingConfigurationFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.TuyaSettingConfigurationFile)
}
TuyaSettingConfigurationFile::TuyaSettingConfigurationFile(const TuyaSettingConfigurationFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TuyaSettingConfigurationFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_wall_data_){from._impl_.virtual_wall_data_}
    , /*decltype(_impl_._virtual_wall_data_cached_byte_size_)*/{0}
    , decltype(_impl_.penalty_area_data_){from._impl_.penalty_area_data_}
    , /*decltype(_impl_._penalty_area_data_cached_byte_size_)*/{0}
    , decltype(_impl_.set_language_pack_name_){}
    , decltype(_impl_.set_tuya_virtual_wall_){nullptr}
    , decltype(_impl_.set_tuya_penalty_area_){nullptr}
    , decltype(_impl_.set_tuya_partition_segmentation_){nullptr}
    , decltype(_impl_.set_tuya_partition_merge_){nullptr}
    , decltype(_impl_.set_tuya_room_name_){nullptr}
    , decltype(_impl_.set_tuya_clean_order_){nullptr}
    , decltype(_impl_.set_tuya_room_properties_){nullptr}
    , decltype(_impl_.partition_switch_){}
    , decltype(_impl_.recharge_world_point_x_){}
    , decltype(_impl_.recharge_world_point_y_){}
    , decltype(_impl_.recharge_grid_point_x_){}
    , decltype(_impl_.recharge_grid_point_y_){}
    , decltype(_impl_.whether_near_partner_){}
    , decltype(_impl_.whether_adjust_right_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.set_language_pack_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.set_language_pack_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_set_language_pack_name().empty()) {
    _this->_impl_.set_language_pack_name_.Set(from._internal_set_language_pack_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_set_tuya_virtual_wall()) {
    _this->_impl_.set_tuya_virtual_wall_ = new ::LSLAM::SetVirtualWall(*from._impl_.set_tuya_virtual_wall_);
  }
  if (from._internal_has_set_tuya_penalty_area()) {
    _this->_impl_.set_tuya_penalty_area_ = new ::LSLAM::SetPenaltyArea(*from._impl_.set_tuya_penalty_area_);
  }
  if (from._internal_has_set_tuya_partition_segmentation()) {
    _this->_impl_.set_tuya_partition_segmentation_ = new ::LSLAM::PartitionSegmentation(*from._impl_.set_tuya_partition_segmentation_);
  }
  if (from._internal_has_set_tuya_partition_merge()) {
    _this->_impl_.set_tuya_partition_merge_ = new ::LSLAM::PartitionMerge(*from._impl_.set_tuya_partition_merge_);
  }
  if (from._internal_has_set_tuya_room_name()) {
    _this->_impl_.set_tuya_room_name_ = new ::LSLAM::TuyaRoomName(*from._impl_.set_tuya_room_name_);
  }
  if (from._internal_has_set_tuya_clean_order()) {
    _this->_impl_.set_tuya_clean_order_ = new ::LSLAM::TuyaCleanOrder(*from._impl_.set_tuya_clean_order_);
  }
  if (from._internal_has_set_tuya_room_properties()) {
    _this->_impl_.set_tuya_room_properties_ = new ::LSLAM::TuyaRoomProperties(*from._impl_.set_tuya_room_properties_);
  }
  ::memcpy(&_impl_.partition_switch_, &from._impl_.partition_switch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.whether_adjust_right_pos_) -
    reinterpret_cast<char*>(&_impl_.partition_switch_)) + sizeof(_impl_.whether_adjust_right_pos_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.TuyaSettingConfigurationFile)
}

inline void TuyaSettingConfigurationFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_wall_data_){arena}
    , /*decltype(_impl_._virtual_wall_data_cached_byte_size_)*/{0}
    , decltype(_impl_.penalty_area_data_){arena}
    , /*decltype(_impl_._penalty_area_data_cached_byte_size_)*/{0}
    , decltype(_impl_.set_language_pack_name_){}
    , decltype(_impl_.set_tuya_virtual_wall_){nullptr}
    , decltype(_impl_.set_tuya_penalty_area_){nullptr}
    , decltype(_impl_.set_tuya_partition_segmentation_){nullptr}
    , decltype(_impl_.set_tuya_partition_merge_){nullptr}
    , decltype(_impl_.set_tuya_room_name_){nullptr}
    , decltype(_impl_.set_tuya_clean_order_){nullptr}
    , decltype(_impl_.set_tuya_room_properties_){nullptr}
    , decltype(_impl_.partition_switch_){false}
    , decltype(_impl_.recharge_world_point_x_){0}
    , decltype(_impl_.recharge_world_point_y_){0}
    , decltype(_impl_.recharge_grid_point_x_){0}
    , decltype(_impl_.recharge_grid_point_y_){0}
    , decltype(_impl_.whether_near_partner_){0}
    , decltype(_impl_.whether_adjust_right_pos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.set_language_pack_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.set_language_pack_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TuyaSettingConfigurationFile::~TuyaSettingConfigurationFile() {
  // @@protoc_insertion_point(destructor:LSLAM.TuyaSettingConfigurationFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TuyaSettingConfigurationFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.virtual_wall_data_.~RepeatedField();
  _impl_.penalty_area_data_.~RepeatedField();
  _impl_.set_language_pack_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.set_tuya_virtual_wall_;
  if (this != internal_default_instance()) delete _impl_.set_tuya_penalty_area_;
  if (this != internal_default_instance()) delete _impl_.set_tuya_partition_segmentation_;
  if (this != internal_default_instance()) delete _impl_.set_tuya_partition_merge_;
  if (this != internal_default_instance()) delete _impl_.set_tuya_room_name_;
  if (this != internal_default_instance()) delete _impl_.set_tuya_clean_order_;
  if (this != internal_default_instance()) delete _impl_.set_tuya_room_properties_;
}

void TuyaSettingConfigurationFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TuyaSettingConfigurationFile::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.TuyaSettingConfigurationFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_wall_data_.Clear();
  _impl_.penalty_area_data_.Clear();
  _impl_.set_language_pack_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_virtual_wall_ != nullptr) {
    delete _impl_.set_tuya_virtual_wall_;
  }
  _impl_.set_tuya_virtual_wall_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_penalty_area_ != nullptr) {
    delete _impl_.set_tuya_penalty_area_;
  }
  _impl_.set_tuya_penalty_area_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_partition_segmentation_ != nullptr) {
    delete _impl_.set_tuya_partition_segmentation_;
  }
  _impl_.set_tuya_partition_segmentation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_partition_merge_ != nullptr) {
    delete _impl_.set_tuya_partition_merge_;
  }
  _impl_.set_tuya_partition_merge_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_room_name_ != nullptr) {
    delete _impl_.set_tuya_room_name_;
  }
  _impl_.set_tuya_room_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_clean_order_ != nullptr) {
    delete _impl_.set_tuya_clean_order_;
  }
  _impl_.set_tuya_clean_order_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_room_properties_ != nullptr) {
    delete _impl_.set_tuya_room_properties_;
  }
  _impl_.set_tuya_room_properties_ = nullptr;
  ::memset(&_impl_.partition_switch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.whether_adjust_right_pos_) -
      reinterpret_cast<char*>(&_impl_.partition_switch_)) + sizeof(_impl_.whether_adjust_right_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuyaSettingConfigurationFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.SetVirtualWall set_tuya_virtual_wall = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_tuya_virtual_wall(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.SetPenaltyArea set_tuya_penalty_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_tuya_penalty_area(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.PartitionSegmentation set_tuya_partition_segmentation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_tuya_partition_segmentation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.PartitionMerge set_tuya_partition_merge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_tuya_partition_merge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool partition_switch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.partition_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.TuyaRoomName set_tuya_room_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_tuya_room_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.TuyaCleanOrder set_tuya_clean_order = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_tuya_clean_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.TuyaRoomProperties set_tuya_room_properties = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_tuya_room_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 recharge_world_point_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.recharge_world_point_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 recharge_world_point_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.recharge_world_point_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 recharge_grid_point_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.recharge_grid_point_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 recharge_grid_point_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.recharge_grid_point_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 whether_near_partner = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.whether_near_partner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 whether_adjust_right_pos = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.whether_adjust_right_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 virtual_wall_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_virtual_wall_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          _internal_add_virtual_wall_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 penalty_area_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_penalty_area_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          _internal_add_penalty_area_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes set_language_pack_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_set_language_pack_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TuyaSettingConfigurationFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.TuyaSettingConfigurationFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.SetVirtualWall set_tuya_virtual_wall = 1;
  if (this->_internal_has_set_tuya_virtual_wall()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::set_tuya_virtual_wall(this),
        _Internal::set_tuya_virtual_wall(this).GetCachedSize(), target, stream);
  }

  // .LSLAM.SetPenaltyArea set_tuya_penalty_area = 2;
  if (this->_internal_has_set_tuya_penalty_area()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::set_tuya_penalty_area(this),
        _Internal::set_tuya_penalty_area(this).GetCachedSize(), target, stream);
  }

  // .LSLAM.PartitionSegmentation set_tuya_partition_segmentation = 3;
  if (this->_internal_has_set_tuya_partition_segmentation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::set_tuya_partition_segmentation(this),
        _Internal::set_tuya_partition_segmentation(this).GetCachedSize(), target, stream);
  }

  // .LSLAM.PartitionMerge set_tuya_partition_merge = 4;
  if (this->_internal_has_set_tuya_partition_merge()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::set_tuya_partition_merge(this),
        _Internal::set_tuya_partition_merge(this).GetCachedSize(), target, stream);
  }

  // bool partition_switch = 5;
  if (this->_internal_partition_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_partition_switch(), target);
  }

  // .LSLAM.TuyaRoomName set_tuya_room_name = 6;
  if (this->_internal_has_set_tuya_room_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::set_tuya_room_name(this),
        _Internal::set_tuya_room_name(this).GetCachedSize(), target, stream);
  }

  // .LSLAM.TuyaCleanOrder set_tuya_clean_order = 7;
  if (this->_internal_has_set_tuya_clean_order()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::set_tuya_clean_order(this),
        _Internal::set_tuya_clean_order(this).GetCachedSize(), target, stream);
  }

  // .LSLAM.TuyaRoomProperties set_tuya_room_properties = 8;
  if (this->_internal_has_set_tuya_room_properties()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::set_tuya_room_properties(this),
        _Internal::set_tuya_room_properties(this).GetCachedSize(), target, stream);
  }

  // int32 recharge_world_point_x = 9;
  if (this->_internal_recharge_world_point_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_recharge_world_point_x(), target);
  }

  // int32 recharge_world_point_y = 10;
  if (this->_internal_recharge_world_point_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_recharge_world_point_y(), target);
  }

  // int32 recharge_grid_point_x = 11;
  if (this->_internal_recharge_grid_point_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_recharge_grid_point_x(), target);
  }

  // int32 recharge_grid_point_y = 12;
  if (this->_internal_recharge_grid_point_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_recharge_grid_point_y(), target);
  }

  // int32 whether_near_partner = 13;
  if (this->_internal_whether_near_partner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_whether_near_partner(), target);
  }

  // int32 whether_adjust_right_pos = 14;
  if (this->_internal_whether_adjust_right_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_whether_adjust_right_pos(), target);
  }

  // repeated int32 virtual_wall_data = 15;
  {
    int byte_size = _impl_._virtual_wall_data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_virtual_wall_data(), byte_size, target);
    }
  }

  // repeated int32 penalty_area_data = 16;
  {
    int byte_size = _impl_._penalty_area_data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          16, _internal_penalty_area_data(), byte_size, target);
    }
  }

  // bytes set_language_pack_name = 17;
  if (!this->_internal_set_language_pack_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_set_language_pack_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.TuyaSettingConfigurationFile)
  return target;
}

size_t TuyaSettingConfigurationFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.TuyaSettingConfigurationFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 virtual_wall_data = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.virtual_wall_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._virtual_wall_data_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated int32 penalty_area_data = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.penalty_area_data_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._penalty_area_data_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // bytes set_language_pack_name = 17;
  if (!this->_internal_set_language_pack_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_set_language_pack_name());
  }

  // .LSLAM.SetVirtualWall set_tuya_virtual_wall = 1;
  if (this->_internal_has_set_tuya_virtual_wall()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.set_tuya_virtual_wall_);
  }

  // .LSLAM.SetPenaltyArea set_tuya_penalty_area = 2;
  if (this->_internal_has_set_tuya_penalty_area()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.set_tuya_penalty_area_);
  }

  // .LSLAM.PartitionSegmentation set_tuya_partition_segmentation = 3;
  if (this->_internal_has_set_tuya_partition_segmentation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.set_tuya_partition_segmentation_);
  }

  // .LSLAM.PartitionMerge set_tuya_partition_merge = 4;
  if (this->_internal_has_set_tuya_partition_merge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.set_tuya_partition_merge_);
  }

  // .LSLAM.TuyaRoomName set_tuya_room_name = 6;
  if (this->_internal_has_set_tuya_room_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.set_tuya_room_name_);
  }

  // .LSLAM.TuyaCleanOrder set_tuya_clean_order = 7;
  if (this->_internal_has_set_tuya_clean_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.set_tuya_clean_order_);
  }

  // .LSLAM.TuyaRoomProperties set_tuya_room_properties = 8;
  if (this->_internal_has_set_tuya_room_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.set_tuya_room_properties_);
  }

  // bool partition_switch = 5;
  if (this->_internal_partition_switch() != 0) {
    total_size += 1 + 1;
  }

  // int32 recharge_world_point_x = 9;
  if (this->_internal_recharge_world_point_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recharge_world_point_x());
  }

  // int32 recharge_world_point_y = 10;
  if (this->_internal_recharge_world_point_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recharge_world_point_y());
  }

  // int32 recharge_grid_point_x = 11;
  if (this->_internal_recharge_grid_point_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recharge_grid_point_x());
  }

  // int32 recharge_grid_point_y = 12;
  if (this->_internal_recharge_grid_point_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recharge_grid_point_y());
  }

  // int32 whether_near_partner = 13;
  if (this->_internal_whether_near_partner() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_whether_near_partner());
  }

  // int32 whether_adjust_right_pos = 14;
  if (this->_internal_whether_adjust_right_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_whether_adjust_right_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TuyaSettingConfigurationFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TuyaSettingConfigurationFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TuyaSettingConfigurationFile::GetClassData() const { return &_class_data_; }


void TuyaSettingConfigurationFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TuyaSettingConfigurationFile*>(&to_msg);
  auto& from = static_cast<const TuyaSettingConfigurationFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.TuyaSettingConfigurationFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.virtual_wall_data_.MergeFrom(from._impl_.virtual_wall_data_);
  _this->_impl_.penalty_area_data_.MergeFrom(from._impl_.penalty_area_data_);
  if (!from._internal_set_language_pack_name().empty()) {
    _this->_internal_set_set_language_pack_name(from._internal_set_language_pack_name());
  }
  if (from._internal_has_set_tuya_virtual_wall()) {
    _this->_internal_mutable_set_tuya_virtual_wall()->::LSLAM::SetVirtualWall::MergeFrom(
        from._internal_set_tuya_virtual_wall());
  }
  if (from._internal_has_set_tuya_penalty_area()) {
    _this->_internal_mutable_set_tuya_penalty_area()->::LSLAM::SetPenaltyArea::MergeFrom(
        from._internal_set_tuya_penalty_area());
  }
  if (from._internal_has_set_tuya_partition_segmentation()) {
    _this->_internal_mutable_set_tuya_partition_segmentation()->::LSLAM::PartitionSegmentation::MergeFrom(
        from._internal_set_tuya_partition_segmentation());
  }
  if (from._internal_has_set_tuya_partition_merge()) {
    _this->_internal_mutable_set_tuya_partition_merge()->::LSLAM::PartitionMerge::MergeFrom(
        from._internal_set_tuya_partition_merge());
  }
  if (from._internal_has_set_tuya_room_name()) {
    _this->_internal_mutable_set_tuya_room_name()->::LSLAM::TuyaRoomName::MergeFrom(
        from._internal_set_tuya_room_name());
  }
  if (from._internal_has_set_tuya_clean_order()) {
    _this->_internal_mutable_set_tuya_clean_order()->::LSLAM::TuyaCleanOrder::MergeFrom(
        from._internal_set_tuya_clean_order());
  }
  if (from._internal_has_set_tuya_room_properties()) {
    _this->_internal_mutable_set_tuya_room_properties()->::LSLAM::TuyaRoomProperties::MergeFrom(
        from._internal_set_tuya_room_properties());
  }
  if (from._internal_partition_switch() != 0) {
    _this->_internal_set_partition_switch(from._internal_partition_switch());
  }
  if (from._internal_recharge_world_point_x() != 0) {
    _this->_internal_set_recharge_world_point_x(from._internal_recharge_world_point_x());
  }
  if (from._internal_recharge_world_point_y() != 0) {
    _this->_internal_set_recharge_world_point_y(from._internal_recharge_world_point_y());
  }
  if (from._internal_recharge_grid_point_x() != 0) {
    _this->_internal_set_recharge_grid_point_x(from._internal_recharge_grid_point_x());
  }
  if (from._internal_recharge_grid_point_y() != 0) {
    _this->_internal_set_recharge_grid_point_y(from._internal_recharge_grid_point_y());
  }
  if (from._internal_whether_near_partner() != 0) {
    _this->_internal_set_whether_near_partner(from._internal_whether_near_partner());
  }
  if (from._internal_whether_adjust_right_pos() != 0) {
    _this->_internal_set_whether_adjust_right_pos(from._internal_whether_adjust_right_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TuyaSettingConfigurationFile::CopyFrom(const TuyaSettingConfigurationFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.TuyaSettingConfigurationFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuyaSettingConfigurationFile::IsInitialized() const {
  return true;
}

void TuyaSettingConfigurationFile::InternalSwap(TuyaSettingConfigurationFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.virtual_wall_data_.InternalSwap(&other->_impl_.virtual_wall_data_);
  _impl_.penalty_area_data_.InternalSwap(&other->_impl_.penalty_area_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.set_language_pack_name_, lhs_arena,
      &other->_impl_.set_language_pack_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TuyaSettingConfigurationFile, _impl_.whether_adjust_right_pos_)
      + sizeof(TuyaSettingConfigurationFile::_impl_.whether_adjust_right_pos_)
      - PROTOBUF_FIELD_OFFSET(TuyaSettingConfigurationFile, _impl_.set_tuya_virtual_wall_)>(
          reinterpret_cast<char*>(&_impl_.set_tuya_virtual_wall_),
          reinterpret_cast<char*>(&other->_impl_.set_tuya_virtual_wall_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TuyaSettingConfigurationFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TuyaDpConfigurationFile_2eproto_getter, &descriptor_table_TuyaDpConfigurationFile_2eproto_once,
      file_level_metadata_TuyaDpConfigurationFile_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::SetVirtualWall*
Arena::CreateMaybeMessage< ::LSLAM::SetVirtualWall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::SetVirtualWall >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::SetPenaltyArea*
Arena::CreateMaybeMessage< ::LSLAM::SetPenaltyArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::SetPenaltyArea >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::PartitionSegmentation*
Arena::CreateMaybeMessage< ::LSLAM::PartitionSegmentation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::PartitionSegmentation >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::PartitionMerge*
Arena::CreateMaybeMessage< ::LSLAM::PartitionMerge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::PartitionMerge >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::TuyaRoomName*
Arena::CreateMaybeMessage< ::LSLAM::TuyaRoomName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::TuyaRoomName >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::TuyaCleanOrder*
Arena::CreateMaybeMessage< ::LSLAM::TuyaCleanOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::TuyaCleanOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::TuyaRoomProperties*
Arena::CreateMaybeMessage< ::LSLAM::TuyaRoomProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::TuyaRoomProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::TuyaSettingConfigurationFile*
Arena::CreateMaybeMessage< ::LSLAM::TuyaSettingConfigurationFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::TuyaSettingConfigurationFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
