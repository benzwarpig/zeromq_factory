// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Laserscan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Laserscan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Laserscan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Laserscan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Laserscan_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Laserscan_2eproto;
namespace LSLAM {
class Laserscan;
struct LaserscanDefaultTypeInternal;
extern LaserscanDefaultTypeInternal _Laserscan_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::Laserscan* Arena::CreateMaybeMessage<::LSLAM::Laserscan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class Laserscan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.Laserscan) */ {
 public:
  inline Laserscan() : Laserscan(nullptr) {}
  ~Laserscan() override;
  explicit PROTOBUF_CONSTEXPR Laserscan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Laserscan(const Laserscan& from);
  Laserscan(Laserscan&& from) noexcept
    : Laserscan() {
    *this = ::std::move(from);
  }

  inline Laserscan& operator=(const Laserscan& from) {
    CopyFrom(from);
    return *this;
  }
  inline Laserscan& operator=(Laserscan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Laserscan& default_instance() {
    return *internal_default_instance();
  }
  static inline const Laserscan* internal_default_instance() {
    return reinterpret_cast<const Laserscan*>(
               &_Laserscan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Laserscan& a, Laserscan& b) {
    a.Swap(&b);
  }
  inline void Swap(Laserscan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Laserscan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Laserscan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Laserscan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Laserscan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Laserscan& from) {
    Laserscan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Laserscan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.Laserscan";
  }
  protected:
  explicit Laserscan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 9,
    kIntensitiesFieldNumber = 10,
    kHeaderFieldNumber = 1,
    kAngleMinFieldNumber = 2,
    kAngleMaxFieldNumber = 3,
    kAngleIncrementFieldNumber = 4,
    kTimeIncrementFieldNumber = 5,
    kScanTimeFieldNumber = 6,
    kRangeMinFieldNumber = 7,
    kRangeMaxFieldNumber = 8,
  };
  // repeated double ranges = 9;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  private:
  double _internal_ranges(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ranges() const;
  void _internal_add_ranges(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ranges();
  public:
  double ranges(int index) const;
  void set_ranges(int index, double value);
  void add_ranges(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ranges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ranges();

  // repeated double intensities = 10;
  int intensities_size() const;
  private:
  int _internal_intensities_size() const;
  public:
  void clear_intensities();
  private:
  double _internal_intensities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_intensities() const;
  void _internal_add_intensities(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_intensities();
  public:
  double intensities(int index) const;
  void set_intensities(int index, double value);
  void add_intensities(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      intensities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_intensities();

  // .LSLAM.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::LSLAM::Header& header() const;
  PROTOBUF_NODISCARD ::LSLAM::Header* release_header();
  ::LSLAM::Header* mutable_header();
  void set_allocated_header(::LSLAM::Header* header);
  private:
  const ::LSLAM::Header& _internal_header() const;
  ::LSLAM::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::LSLAM::Header* header);
  ::LSLAM::Header* unsafe_arena_release_header();

  // double angle_min = 2;
  void clear_angle_min();
  double angle_min() const;
  void set_angle_min(double value);
  private:
  double _internal_angle_min() const;
  void _internal_set_angle_min(double value);
  public:

  // double angle_max = 3;
  void clear_angle_max();
  double angle_max() const;
  void set_angle_max(double value);
  private:
  double _internal_angle_max() const;
  void _internal_set_angle_max(double value);
  public:

  // double angle_increment = 4;
  void clear_angle_increment();
  double angle_increment() const;
  void set_angle_increment(double value);
  private:
  double _internal_angle_increment() const;
  void _internal_set_angle_increment(double value);
  public:

  // double time_increment = 5;
  void clear_time_increment();
  double time_increment() const;
  void set_time_increment(double value);
  private:
  double _internal_time_increment() const;
  void _internal_set_time_increment(double value);
  public:

  // double scan_time = 6;
  void clear_scan_time();
  double scan_time() const;
  void set_scan_time(double value);
  private:
  double _internal_scan_time() const;
  void _internal_set_scan_time(double value);
  public:

  // double range_min = 7;
  void clear_range_min();
  double range_min() const;
  void set_range_min(double value);
  private:
  double _internal_range_min() const;
  void _internal_set_range_min(double value);
  public:

  // double range_max = 8;
  void clear_range_max();
  double range_max() const;
  void set_range_max(double value);
  private:
  double _internal_range_max() const;
  void _internal_set_range_max(double value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.Laserscan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ranges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > intensities_;
    ::LSLAM::Header* header_;
    double angle_min_;
    double angle_max_;
    double angle_increment_;
    double time_increment_;
    double scan_time_;
    double range_min_;
    double range_max_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Laserscan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Laserscan

// .LSLAM.Header header = 1;
inline bool Laserscan::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Laserscan::has_header() const {
  return _internal_has_header();
}
inline const ::LSLAM::Header& Laserscan::_internal_header() const {
  const ::LSLAM::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::Header&>(
      ::LSLAM::_Header_default_instance_);
}
inline const ::LSLAM::Header& Laserscan::header() const {
  // @@protoc_insertion_point(field_get:LSLAM.Laserscan.header)
  return _internal_header();
}
inline void Laserscan::unsafe_arena_set_allocated_header(
    ::LSLAM::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.Laserscan.header)
}
inline ::LSLAM::Header* Laserscan::release_header() {
  
  ::LSLAM::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::Header* Laserscan::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:LSLAM.Laserscan.header)
  
  ::LSLAM::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::LSLAM::Header* Laserscan::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::LSLAM::Header* Laserscan::mutable_header() {
  ::LSLAM::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:LSLAM.Laserscan.header)
  return _msg;
}
inline void Laserscan::set_allocated_header(::LSLAM::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.Laserscan.header)
}

// double angle_min = 2;
inline void Laserscan::clear_angle_min() {
  _impl_.angle_min_ = 0;
}
inline double Laserscan::_internal_angle_min() const {
  return _impl_.angle_min_;
}
inline double Laserscan::angle_min() const {
  // @@protoc_insertion_point(field_get:LSLAM.Laserscan.angle_min)
  return _internal_angle_min();
}
inline void Laserscan::_internal_set_angle_min(double value) {
  
  _impl_.angle_min_ = value;
}
inline void Laserscan::set_angle_min(double value) {
  _internal_set_angle_min(value);
  // @@protoc_insertion_point(field_set:LSLAM.Laserscan.angle_min)
}

// double angle_max = 3;
inline void Laserscan::clear_angle_max() {
  _impl_.angle_max_ = 0;
}
inline double Laserscan::_internal_angle_max() const {
  return _impl_.angle_max_;
}
inline double Laserscan::angle_max() const {
  // @@protoc_insertion_point(field_get:LSLAM.Laserscan.angle_max)
  return _internal_angle_max();
}
inline void Laserscan::_internal_set_angle_max(double value) {
  
  _impl_.angle_max_ = value;
}
inline void Laserscan::set_angle_max(double value) {
  _internal_set_angle_max(value);
  // @@protoc_insertion_point(field_set:LSLAM.Laserscan.angle_max)
}

// double angle_increment = 4;
inline void Laserscan::clear_angle_increment() {
  _impl_.angle_increment_ = 0;
}
inline double Laserscan::_internal_angle_increment() const {
  return _impl_.angle_increment_;
}
inline double Laserscan::angle_increment() const {
  // @@protoc_insertion_point(field_get:LSLAM.Laserscan.angle_increment)
  return _internal_angle_increment();
}
inline void Laserscan::_internal_set_angle_increment(double value) {
  
  _impl_.angle_increment_ = value;
}
inline void Laserscan::set_angle_increment(double value) {
  _internal_set_angle_increment(value);
  // @@protoc_insertion_point(field_set:LSLAM.Laserscan.angle_increment)
}

// double time_increment = 5;
inline void Laserscan::clear_time_increment() {
  _impl_.time_increment_ = 0;
}
inline double Laserscan::_internal_time_increment() const {
  return _impl_.time_increment_;
}
inline double Laserscan::time_increment() const {
  // @@protoc_insertion_point(field_get:LSLAM.Laserscan.time_increment)
  return _internal_time_increment();
}
inline void Laserscan::_internal_set_time_increment(double value) {
  
  _impl_.time_increment_ = value;
}
inline void Laserscan::set_time_increment(double value) {
  _internal_set_time_increment(value);
  // @@protoc_insertion_point(field_set:LSLAM.Laserscan.time_increment)
}

// double scan_time = 6;
inline void Laserscan::clear_scan_time() {
  _impl_.scan_time_ = 0;
}
inline double Laserscan::_internal_scan_time() const {
  return _impl_.scan_time_;
}
inline double Laserscan::scan_time() const {
  // @@protoc_insertion_point(field_get:LSLAM.Laserscan.scan_time)
  return _internal_scan_time();
}
inline void Laserscan::_internal_set_scan_time(double value) {
  
  _impl_.scan_time_ = value;
}
inline void Laserscan::set_scan_time(double value) {
  _internal_set_scan_time(value);
  // @@protoc_insertion_point(field_set:LSLAM.Laserscan.scan_time)
}

// double range_min = 7;
inline void Laserscan::clear_range_min() {
  _impl_.range_min_ = 0;
}
inline double Laserscan::_internal_range_min() const {
  return _impl_.range_min_;
}
inline double Laserscan::range_min() const {
  // @@protoc_insertion_point(field_get:LSLAM.Laserscan.range_min)
  return _internal_range_min();
}
inline void Laserscan::_internal_set_range_min(double value) {
  
  _impl_.range_min_ = value;
}
inline void Laserscan::set_range_min(double value) {
  _internal_set_range_min(value);
  // @@protoc_insertion_point(field_set:LSLAM.Laserscan.range_min)
}

// double range_max = 8;
inline void Laserscan::clear_range_max() {
  _impl_.range_max_ = 0;
}
inline double Laserscan::_internal_range_max() const {
  return _impl_.range_max_;
}
inline double Laserscan::range_max() const {
  // @@protoc_insertion_point(field_get:LSLAM.Laserscan.range_max)
  return _internal_range_max();
}
inline void Laserscan::_internal_set_range_max(double value) {
  
  _impl_.range_max_ = value;
}
inline void Laserscan::set_range_max(double value) {
  _internal_set_range_max(value);
  // @@protoc_insertion_point(field_set:LSLAM.Laserscan.range_max)
}

// repeated double ranges = 9;
inline int Laserscan::_internal_ranges_size() const {
  return _impl_.ranges_.size();
}
inline int Laserscan::ranges_size() const {
  return _internal_ranges_size();
}
inline void Laserscan::clear_ranges() {
  _impl_.ranges_.Clear();
}
inline double Laserscan::_internal_ranges(int index) const {
  return _impl_.ranges_.Get(index);
}
inline double Laserscan::ranges(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.Laserscan.ranges)
  return _internal_ranges(index);
}
inline void Laserscan::set_ranges(int index, double value) {
  _impl_.ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.Laserscan.ranges)
}
inline void Laserscan::_internal_add_ranges(double value) {
  _impl_.ranges_.Add(value);
}
inline void Laserscan::add_ranges(double value) {
  _internal_add_ranges(value);
  // @@protoc_insertion_point(field_add:LSLAM.Laserscan.ranges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Laserscan::_internal_ranges() const {
  return _impl_.ranges_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Laserscan::ranges() const {
  // @@protoc_insertion_point(field_list:LSLAM.Laserscan.ranges)
  return _internal_ranges();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Laserscan::_internal_mutable_ranges() {
  return &_impl_.ranges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Laserscan::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.Laserscan.ranges)
  return _internal_mutable_ranges();
}

// repeated double intensities = 10;
inline int Laserscan::_internal_intensities_size() const {
  return _impl_.intensities_.size();
}
inline int Laserscan::intensities_size() const {
  return _internal_intensities_size();
}
inline void Laserscan::clear_intensities() {
  _impl_.intensities_.Clear();
}
inline double Laserscan::_internal_intensities(int index) const {
  return _impl_.intensities_.Get(index);
}
inline double Laserscan::intensities(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.Laserscan.intensities)
  return _internal_intensities(index);
}
inline void Laserscan::set_intensities(int index, double value) {
  _impl_.intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.Laserscan.intensities)
}
inline void Laserscan::_internal_add_intensities(double value) {
  _impl_.intensities_.Add(value);
}
inline void Laserscan::add_intensities(double value) {
  _internal_add_intensities(value);
  // @@protoc_insertion_point(field_add:LSLAM.Laserscan.intensities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Laserscan::_internal_intensities() const {
  return _impl_.intensities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Laserscan::intensities() const {
  // @@protoc_insertion_point(field_list:LSLAM.Laserscan.intensities)
  return _internal_intensities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Laserscan::_internal_mutable_intensities() {
  return &_impl_.intensities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Laserscan::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.Laserscan.intensities)
  return _internal_mutable_intensities();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Laserscan_2eproto
