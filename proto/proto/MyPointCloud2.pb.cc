// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyPointCloud2.proto

#include "MyPointCloud2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR Point4d::Point4d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.k_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Point4dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Point4dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Point4dDefaultTypeInternal() {}
  union {
    Point4d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Point4dDefaultTypeInternal _Point4d_default_instance_;
PROTOBUF_CONSTEXPR MyPointCloud2::MyPointCloud2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.is_dense_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MyPointCloud2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyPointCloud2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyPointCloud2DefaultTypeInternal() {}
  union {
    MyPointCloud2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyPointCloud2DefaultTypeInternal _MyPointCloud2_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_MyPointCloud2_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MyPointCloud2_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MyPointCloud2_2eproto = nullptr;

const uint32_t TableStruct_MyPointCloud2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::Point4d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::Point4d, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Point4d, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Point4d, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Point4d, _impl_.k_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyPointCloud2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyPointCloud2, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyPointCloud2, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyPointCloud2, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyPointCloud2, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyPointCloud2, _impl_.is_dense_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::Point4d)},
  { 12, -1, -1, sizeof(::LSLAM::MyPointCloud2)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_Point4d_default_instance_._instance,
  &::LSLAM::_MyPointCloud2_default_instance_._instance,
};

const char descriptor_table_protodef_MyPointCloud2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023MyPointCloud2.proto\022\005LSLAM\032\014Header.pro"
  "to\"5\n\007Point4d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z"
  "\030\003 \001(\001\022\t\n\001k\030\004 \001(\001\"\177\n\rMyPointCloud2\022\035\n\006he"
  "ader\030\001 \001(\0132\r.LSLAM.Header\022\016\n\006height\030\002 \001("
  "\r\022\r\n\005width\030\003 \001(\r\022\036\n\006points\030\004 \003(\0132\016.LSLAM"
  ".Point4d\022\020\n\010is_dense\030\005 \001(\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MyPointCloud2_2eproto_deps[1] = {
  &::descriptor_table_Header_2eproto,
};
static ::_pbi::once_flag descriptor_table_MyPointCloud2_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MyPointCloud2_2eproto = {
    false, false, 234, descriptor_table_protodef_MyPointCloud2_2eproto,
    "MyPointCloud2.proto",
    &descriptor_table_MyPointCloud2_2eproto_once, descriptor_table_MyPointCloud2_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_MyPointCloud2_2eproto::offsets,
    file_level_metadata_MyPointCloud2_2eproto, file_level_enum_descriptors_MyPointCloud2_2eproto,
    file_level_service_descriptors_MyPointCloud2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MyPointCloud2_2eproto_getter() {
  return &descriptor_table_MyPointCloud2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MyPointCloud2_2eproto(&descriptor_table_MyPointCloud2_2eproto);
namespace LSLAM {

// ===================================================================

class Point4d::_Internal {
 public:
};

Point4d::Point4d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.Point4d)
}
Point4d::Point4d(const Point4d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point4d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.k_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.k_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.k_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.Point4d)
}

inline void Point4d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.k_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point4d::~Point4d() {
  // @@protoc_insertion_point(destructor:LSLAM.Point4d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point4d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point4d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point4d::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.Point4d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.k_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.k_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point4d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point4d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.Point4d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double k = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_k = this->_internal_k();
  uint64_t raw_k;
  memcpy(&raw_k, &tmp_k, sizeof(tmp_k));
  if (raw_k != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_k(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.Point4d)
  return target;
}

size_t Point4d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.Point4d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double k = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_k = this->_internal_k();
  uint64_t raw_k;
  memcpy(&raw_k, &tmp_k, sizeof(tmp_k));
  if (raw_k != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point4d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point4d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point4d::GetClassData() const { return &_class_data_; }


void Point4d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point4d*>(&to_msg);
  auto& from = static_cast<const Point4d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.Point4d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_k = from._internal_k();
  uint64_t raw_k;
  memcpy(&raw_k, &tmp_k, sizeof(tmp_k));
  if (raw_k != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point4d::CopyFrom(const Point4d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.Point4d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point4d::IsInitialized() const {
  return true;
}

void Point4d::InternalSwap(Point4d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point4d, _impl_.k_)
      + sizeof(Point4d::_impl_.k_)
      - PROTOBUF_FIELD_OFFSET(Point4d, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point4d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MyPointCloud2_2eproto_getter, &descriptor_table_MyPointCloud2_2eproto_once,
      file_level_metadata_MyPointCloud2_2eproto[0]);
}

// ===================================================================

class MyPointCloud2::_Internal {
 public:
  static const ::LSLAM::Header& header(const MyPointCloud2* msg);
};

const ::LSLAM::Header&
MyPointCloud2::_Internal::header(const MyPointCloud2* msg) {
  return *msg->_impl_.header_;
}
void MyPointCloud2::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
MyPointCloud2::MyPointCloud2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.MyPointCloud2)
}
MyPointCloud2::MyPointCloud2(const MyPointCloud2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MyPointCloud2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.is_dense_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::LSLAM::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_dense_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.is_dense_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.MyPointCloud2)
}

inline void MyPointCloud2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.is_dense_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MyPointCloud2::~MyPointCloud2() {
  // @@protoc_insertion_point(destructor:LSLAM.MyPointCloud2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MyPointCloud2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void MyPointCloud2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MyPointCloud2::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.MyPointCloud2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_dense_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.is_dense_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyPointCloud2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.Point4d points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_dense = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_dense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyPointCloud2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.MyPointCloud2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // repeated .LSLAM.Point4d points = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_dense = 5;
  if (this->_internal_is_dense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_dense(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.MyPointCloud2)
  return target;
}

size_t MyPointCloud2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.MyPointCloud2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.Point4d points = 4;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .LSLAM.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // bool is_dense = 5;
  if (this->_internal_is_dense() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyPointCloud2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MyPointCloud2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyPointCloud2::GetClassData() const { return &_class_data_; }


void MyPointCloud2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MyPointCloud2*>(&to_msg);
  auto& from = static_cast<const MyPointCloud2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.MyPointCloud2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::LSLAM::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_is_dense() != 0) {
    _this->_internal_set_is_dense(from._internal_is_dense());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyPointCloud2::CopyFrom(const MyPointCloud2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.MyPointCloud2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyPointCloud2::IsInitialized() const {
  return true;
}

void MyPointCloud2::InternalSwap(MyPointCloud2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyPointCloud2, _impl_.is_dense_)
      + sizeof(MyPointCloud2::_impl_.is_dense_)
      - PROTOBUF_FIELD_OFFSET(MyPointCloud2, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyPointCloud2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MyPointCloud2_2eproto_getter, &descriptor_table_MyPointCloud2_2eproto_once,
      file_level_metadata_MyPointCloud2_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::Point4d*
Arena::CreateMaybeMessage< ::LSLAM::Point4d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::Point4d >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::MyPointCloud2*
Arena::CreateMaybeMessage< ::LSLAM::MyPointCloud2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::MyPointCloud2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
