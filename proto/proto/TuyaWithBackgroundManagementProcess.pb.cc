// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TuyaWithBackgroundManagementProcess.proto

#include "TuyaWithBackgroundManagementProcess.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR TuyaWithBackgroundManagementProcess::TuyaWithBackgroundManagementProcess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tuya_robot_task_)*/0
  , /*decltype(_impl_.tuya_map_id_)*/0
  , /*decltype(_impl_.start_or_pause_)*/0
  , /*decltype(_impl_.switch_map_)*/0
  , /*decltype(_impl_.select_area_clean_)*/0
  , /*decltype(_impl_.aim_point_clean_)*/0
  , /*decltype(_impl_.plan_area_clean_)*/0
  , /*decltype(_impl_.tuya_robot_su_task_)*/0
  , /*decltype(_impl_.do_not_disturb_switch_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TuyaWithBackgroundManagementProcessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TuyaWithBackgroundManagementProcessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TuyaWithBackgroundManagementProcessDefaultTypeInternal() {}
  union {
    TuyaWithBackgroundManagementProcess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TuyaWithBackgroundManagementProcessDefaultTypeInternal _TuyaWithBackgroundManagementProcess_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_TuyaWithBackgroundManagementProcess_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TuyaWithBackgroundManagementProcess_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TuyaWithBackgroundManagementProcess_2eproto = nullptr;

const uint32_t TableStruct_TuyaWithBackgroundManagementProcess_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaWithBackgroundManagementProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaWithBackgroundManagementProcess, _impl_.tuya_robot_task_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaWithBackgroundManagementProcess, _impl_.tuya_map_id_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaWithBackgroundManagementProcess, _impl_.start_or_pause_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaWithBackgroundManagementProcess, _impl_.switch_map_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaWithBackgroundManagementProcess, _impl_.select_area_clean_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaWithBackgroundManagementProcess, _impl_.aim_point_clean_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaWithBackgroundManagementProcess, _impl_.plan_area_clean_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaWithBackgroundManagementProcess, _impl_.tuya_robot_su_task_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaWithBackgroundManagementProcess, _impl_.do_not_disturb_switch_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::TuyaWithBackgroundManagementProcess, _impl_.direction_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::TuyaWithBackgroundManagementProcess)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_TuyaWithBackgroundManagementProcess_default_instance_._instance,
};

const char descriptor_table_protodef_TuyaWithBackgroundManagementProcess_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)TuyaWithBackgroundManagementProcess.pr"
  "oto\022\005LSLAM\032\021ToDaemonMsg.proto\"\360\002\n#TuyaWi"
  "thBackgroundManagementProcess\0221\n\017tuya_ro"
  "bot_task\030\001 \001(\0162\030.LSLAM.TuyaRobotTaskType"
  "\022\023\n\013tuya_map_id\030\002 \001(\005\022\026\n\016start_or_pause\030"
  "\003 \001(\005\022\022\n\nswitch_map\030\004 \001(\005\022\031\n\021select_area"
  "_clean\030\005 \001(\005\022\027\n\017aim_point_clean\030\006 \001(\005\022\027\n"
  "\017plan_area_clean\030\007 \001(\005\0227\n\022tuya_robot_su_"
  "task\030\010 \001(\0162\033.LSLAM.RobotStartUpTaskType\022"
  "\035\n\025do_not_disturb_switch\030\t \001(\005\0220\n\tdirect"
  "ion\030\n \001(\0162\035.LSLAM.RemoteControlDirection"
  "*\235\001\n\021TuyaRobotTaskType\022\024\n\020TUYA_UNUSED_TA"
  "SK\020\000\022\025\n\021TUYA_EXPLORE_TASK\020\001\022\023\n\017TUYA_SWEE"
  "P_TASK\020\002\022\021\n\rTUYA_MOP_TASK\020\003\022\033\n\027TUYA_SWEE"
  "P_AND_MOP_TASK\020\004\022\026\n\022TUYA_RECHARGE_TASK\020\005"
  "*h\n\026RemoteControlDirection\022\n\n\006DEFAIL\020\000\022\013"
  "\n\007FORWARD\020\001\022\014\n\010BACKWARD\020\002\022\r\n\tTRUN_LEFT\020\003"
  "\022\016\n\nTURN_RIGHT\020\004\022\010\n\004STOP\020\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TuyaWithBackgroundManagementProcess_2eproto_deps[1] = {
  &::descriptor_table_ToDaemonMsg_2eproto,
};
static ::_pbi::once_flag descriptor_table_TuyaWithBackgroundManagementProcess_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TuyaWithBackgroundManagementProcess_2eproto = {
    false, false, 714, descriptor_table_protodef_TuyaWithBackgroundManagementProcess_2eproto,
    "TuyaWithBackgroundManagementProcess.proto",
    &descriptor_table_TuyaWithBackgroundManagementProcess_2eproto_once, descriptor_table_TuyaWithBackgroundManagementProcess_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_TuyaWithBackgroundManagementProcess_2eproto::offsets,
    file_level_metadata_TuyaWithBackgroundManagementProcess_2eproto, file_level_enum_descriptors_TuyaWithBackgroundManagementProcess_2eproto,
    file_level_service_descriptors_TuyaWithBackgroundManagementProcess_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TuyaWithBackgroundManagementProcess_2eproto_getter() {
  return &descriptor_table_TuyaWithBackgroundManagementProcess_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TuyaWithBackgroundManagementProcess_2eproto(&descriptor_table_TuyaWithBackgroundManagementProcess_2eproto);
namespace LSLAM {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TuyaRobotTaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TuyaWithBackgroundManagementProcess_2eproto);
  return file_level_enum_descriptors_TuyaWithBackgroundManagementProcess_2eproto[0];
}
bool TuyaRobotTaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemoteControlDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TuyaWithBackgroundManagementProcess_2eproto);
  return file_level_enum_descriptors_TuyaWithBackgroundManagementProcess_2eproto[1];
}
bool RemoteControlDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TuyaWithBackgroundManagementProcess::_Internal {
 public:
};

TuyaWithBackgroundManagementProcess::TuyaWithBackgroundManagementProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.TuyaWithBackgroundManagementProcess)
}
TuyaWithBackgroundManagementProcess::TuyaWithBackgroundManagementProcess(const TuyaWithBackgroundManagementProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TuyaWithBackgroundManagementProcess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tuya_robot_task_){}
    , decltype(_impl_.tuya_map_id_){}
    , decltype(_impl_.start_or_pause_){}
    , decltype(_impl_.switch_map_){}
    , decltype(_impl_.select_area_clean_){}
    , decltype(_impl_.aim_point_clean_){}
    , decltype(_impl_.plan_area_clean_){}
    , decltype(_impl_.tuya_robot_su_task_){}
    , decltype(_impl_.do_not_disturb_switch_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tuya_robot_task_, &from._impl_.tuya_robot_task_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.tuya_robot_task_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.TuyaWithBackgroundManagementProcess)
}

inline void TuyaWithBackgroundManagementProcess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tuya_robot_task_){0}
    , decltype(_impl_.tuya_map_id_){0}
    , decltype(_impl_.start_or_pause_){0}
    , decltype(_impl_.switch_map_){0}
    , decltype(_impl_.select_area_clean_){0}
    , decltype(_impl_.aim_point_clean_){0}
    , decltype(_impl_.plan_area_clean_){0}
    , decltype(_impl_.tuya_robot_su_task_){0}
    , decltype(_impl_.do_not_disturb_switch_){0}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TuyaWithBackgroundManagementProcess::~TuyaWithBackgroundManagementProcess() {
  // @@protoc_insertion_point(destructor:LSLAM.TuyaWithBackgroundManagementProcess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TuyaWithBackgroundManagementProcess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TuyaWithBackgroundManagementProcess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TuyaWithBackgroundManagementProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.TuyaWithBackgroundManagementProcess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tuya_robot_task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.tuya_robot_task_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TuyaWithBackgroundManagementProcess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.TuyaRobotTaskType tuya_robot_task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tuya_robot_task(static_cast<::LSLAM::TuyaRobotTaskType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 tuya_map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tuya_map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 start_or_pause = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.start_or_pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 switch_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.switch_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 select_area_clean = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.select_area_clean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 aim_point_clean = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.aim_point_clean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 plan_area_clean = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.plan_area_clean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.RobotStartUpTaskType tuya_robot_su_task = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tuya_robot_su_task(static_cast<::LSLAM::RobotStartUpTaskType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 do_not_disturb_switch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.do_not_disturb_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.RemoteControlDirection direction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::LSLAM::RemoteControlDirection>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TuyaWithBackgroundManagementProcess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.TuyaWithBackgroundManagementProcess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.TuyaRobotTaskType tuya_robot_task = 1;
  if (this->_internal_tuya_robot_task() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tuya_robot_task(), target);
  }

  // int32 tuya_map_id = 2;
  if (this->_internal_tuya_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tuya_map_id(), target);
  }

  // int32 start_or_pause = 3;
  if (this->_internal_start_or_pause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_or_pause(), target);
  }

  // int32 switch_map = 4;
  if (this->_internal_switch_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_switch_map(), target);
  }

  // int32 select_area_clean = 5;
  if (this->_internal_select_area_clean() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_select_area_clean(), target);
  }

  // int32 aim_point_clean = 6;
  if (this->_internal_aim_point_clean() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_aim_point_clean(), target);
  }

  // int32 plan_area_clean = 7;
  if (this->_internal_plan_area_clean() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_plan_area_clean(), target);
  }

  // .LSLAM.RobotStartUpTaskType tuya_robot_su_task = 8;
  if (this->_internal_tuya_robot_su_task() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_tuya_robot_su_task(), target);
  }

  // int32 do_not_disturb_switch = 9;
  if (this->_internal_do_not_disturb_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_do_not_disturb_switch(), target);
  }

  // .LSLAM.RemoteControlDirection direction = 10;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.TuyaWithBackgroundManagementProcess)
  return target;
}

size_t TuyaWithBackgroundManagementProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.TuyaWithBackgroundManagementProcess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LSLAM.TuyaRobotTaskType tuya_robot_task = 1;
  if (this->_internal_tuya_robot_task() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tuya_robot_task());
  }

  // int32 tuya_map_id = 2;
  if (this->_internal_tuya_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tuya_map_id());
  }

  // int32 start_or_pause = 3;
  if (this->_internal_start_or_pause() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_or_pause());
  }

  // int32 switch_map = 4;
  if (this->_internal_switch_map() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_switch_map());
  }

  // int32 select_area_clean = 5;
  if (this->_internal_select_area_clean() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_select_area_clean());
  }

  // int32 aim_point_clean = 6;
  if (this->_internal_aim_point_clean() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_aim_point_clean());
  }

  // int32 plan_area_clean = 7;
  if (this->_internal_plan_area_clean() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plan_area_clean());
  }

  // .LSLAM.RobotStartUpTaskType tuya_robot_su_task = 8;
  if (this->_internal_tuya_robot_su_task() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tuya_robot_su_task());
  }

  // int32 do_not_disturb_switch = 9;
  if (this->_internal_do_not_disturb_switch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_do_not_disturb_switch());
  }

  // .LSLAM.RemoteControlDirection direction = 10;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TuyaWithBackgroundManagementProcess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TuyaWithBackgroundManagementProcess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TuyaWithBackgroundManagementProcess::GetClassData() const { return &_class_data_; }


void TuyaWithBackgroundManagementProcess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TuyaWithBackgroundManagementProcess*>(&to_msg);
  auto& from = static_cast<const TuyaWithBackgroundManagementProcess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.TuyaWithBackgroundManagementProcess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tuya_robot_task() != 0) {
    _this->_internal_set_tuya_robot_task(from._internal_tuya_robot_task());
  }
  if (from._internal_tuya_map_id() != 0) {
    _this->_internal_set_tuya_map_id(from._internal_tuya_map_id());
  }
  if (from._internal_start_or_pause() != 0) {
    _this->_internal_set_start_or_pause(from._internal_start_or_pause());
  }
  if (from._internal_switch_map() != 0) {
    _this->_internal_set_switch_map(from._internal_switch_map());
  }
  if (from._internal_select_area_clean() != 0) {
    _this->_internal_set_select_area_clean(from._internal_select_area_clean());
  }
  if (from._internal_aim_point_clean() != 0) {
    _this->_internal_set_aim_point_clean(from._internal_aim_point_clean());
  }
  if (from._internal_plan_area_clean() != 0) {
    _this->_internal_set_plan_area_clean(from._internal_plan_area_clean());
  }
  if (from._internal_tuya_robot_su_task() != 0) {
    _this->_internal_set_tuya_robot_su_task(from._internal_tuya_robot_su_task());
  }
  if (from._internal_do_not_disturb_switch() != 0) {
    _this->_internal_set_do_not_disturb_switch(from._internal_do_not_disturb_switch());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TuyaWithBackgroundManagementProcess::CopyFrom(const TuyaWithBackgroundManagementProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.TuyaWithBackgroundManagementProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuyaWithBackgroundManagementProcess::IsInitialized() const {
  return true;
}

void TuyaWithBackgroundManagementProcess::InternalSwap(TuyaWithBackgroundManagementProcess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TuyaWithBackgroundManagementProcess, _impl_.direction_)
      + sizeof(TuyaWithBackgroundManagementProcess::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(TuyaWithBackgroundManagementProcess, _impl_.tuya_robot_task_)>(
          reinterpret_cast<char*>(&_impl_.tuya_robot_task_),
          reinterpret_cast<char*>(&other->_impl_.tuya_robot_task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TuyaWithBackgroundManagementProcess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TuyaWithBackgroundManagementProcess_2eproto_getter, &descriptor_table_TuyaWithBackgroundManagementProcess_2eproto_once,
      file_level_metadata_TuyaWithBackgroundManagementProcess_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::TuyaWithBackgroundManagementProcess*
Arena::CreateMaybeMessage< ::LSLAM::TuyaWithBackgroundManagementProcess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::TuyaWithBackgroundManagementProcess >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
