// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PointsToSimulation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PointsToSimulation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PointsToSimulation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PointsToSimulation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PointsToSimulation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PointsToSimulation_2eproto;
namespace LSLAM {
class PointsToSimulation;
struct PointsToSimulationDefaultTypeInternal;
extern PointsToSimulationDefaultTypeInternal _PointsToSimulation_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::PointsToSimulation* Arena::CreateMaybeMessage<::LSLAM::PointsToSimulation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class PointsToSimulation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.PointsToSimulation) */ {
 public:
  inline PointsToSimulation() : PointsToSimulation(nullptr) {}
  ~PointsToSimulation() override;
  explicit PROTOBUF_CONSTEXPR PointsToSimulation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointsToSimulation(const PointsToSimulation& from);
  PointsToSimulation(PointsToSimulation&& from) noexcept
    : PointsToSimulation() {
    *this = ::std::move(from);
  }

  inline PointsToSimulation& operator=(const PointsToSimulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointsToSimulation& operator=(PointsToSimulation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointsToSimulation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointsToSimulation* internal_default_instance() {
    return reinterpret_cast<const PointsToSimulation*>(
               &_PointsToSimulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PointsToSimulation& a, PointsToSimulation& b) {
    a.Swap(&b);
  }
  inline void Swap(PointsToSimulation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointsToSimulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointsToSimulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointsToSimulation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointsToSimulation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PointsToSimulation& from) {
    PointsToSimulation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointsToSimulation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.PointsToSimulation";
  }
  protected:
  explicit PointsToSimulation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 6,
    kTopicNameFieldNumber = 1,
    kShapeFieldNumber = 2,
    kColorFieldNumber = 3,
    kSizeFieldNumber = 4,
    kIsConnectedFieldNumber = 5,
  };
  // repeated .LSLAM.Point points = 6;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::LSLAM::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point >*
      mutable_points();
  private:
  const ::LSLAM::Point& _internal_points(int index) const;
  ::LSLAM::Point* _internal_add_points();
  public:
  const ::LSLAM::Point& points(int index) const;
  ::LSLAM::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point >&
      points() const;

  // string topic_name = 1;
  void clear_topic_name();
  const std::string& topic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* topic_name);
  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(const std::string& value);
  std::string* _internal_mutable_topic_name();
  public:

  // int32 shape = 2;
  void clear_shape();
  int32_t shape() const;
  void set_shape(int32_t value);
  private:
  int32_t _internal_shape() const;
  void _internal_set_shape(int32_t value);
  public:

  // int32 color = 3;
  void clear_color();
  int32_t color() const;
  void set_color(int32_t value);
  private:
  int32_t _internal_color() const;
  void _internal_set_color(int32_t value);
  public:

  // int32 size = 4;
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // bool is_connected = 5;
  void clear_is_connected();
  bool is_connected() const;
  void set_is_connected(bool value);
  private:
  bool _internal_is_connected() const;
  void _internal_set_is_connected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.PointsToSimulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point > points_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_name_;
    int32_t shape_;
    int32_t color_;
    int32_t size_;
    bool is_connected_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PointsToSimulation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointsToSimulation

// string topic_name = 1;
inline void PointsToSimulation::clear_topic_name() {
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& PointsToSimulation::topic_name() const {
  // @@protoc_insertion_point(field_get:LSLAM.PointsToSimulation.topic_name)
  return _internal_topic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PointsToSimulation::set_topic_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LSLAM.PointsToSimulation.topic_name)
}
inline std::string* PointsToSimulation::mutable_topic_name() {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:LSLAM.PointsToSimulation.topic_name)
  return _s;
}
inline const std::string& PointsToSimulation::_internal_topic_name() const {
  return _impl_.topic_name_.Get();
}
inline void PointsToSimulation::_internal_set_topic_name(const std::string& value) {
  
  _impl_.topic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PointsToSimulation::_internal_mutable_topic_name() {
  
  return _impl_.topic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PointsToSimulation::release_topic_name() {
  // @@protoc_insertion_point(field_release:LSLAM.PointsToSimulation.topic_name)
  return _impl_.topic_name_.Release();
}
inline void PointsToSimulation::set_allocated_topic_name(std::string* topic_name) {
  if (topic_name != nullptr) {
    
  } else {
    
  }
  _impl_.topic_name_.SetAllocated(topic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_name_.IsDefault()) {
    _impl_.topic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LSLAM.PointsToSimulation.topic_name)
}

// int32 shape = 2;
inline void PointsToSimulation::clear_shape() {
  _impl_.shape_ = 0;
}
inline int32_t PointsToSimulation::_internal_shape() const {
  return _impl_.shape_;
}
inline int32_t PointsToSimulation::shape() const {
  // @@protoc_insertion_point(field_get:LSLAM.PointsToSimulation.shape)
  return _internal_shape();
}
inline void PointsToSimulation::_internal_set_shape(int32_t value) {
  
  _impl_.shape_ = value;
}
inline void PointsToSimulation::set_shape(int32_t value) {
  _internal_set_shape(value);
  // @@protoc_insertion_point(field_set:LSLAM.PointsToSimulation.shape)
}

// int32 color = 3;
inline void PointsToSimulation::clear_color() {
  _impl_.color_ = 0;
}
inline int32_t PointsToSimulation::_internal_color() const {
  return _impl_.color_;
}
inline int32_t PointsToSimulation::color() const {
  // @@protoc_insertion_point(field_get:LSLAM.PointsToSimulation.color)
  return _internal_color();
}
inline void PointsToSimulation::_internal_set_color(int32_t value) {
  
  _impl_.color_ = value;
}
inline void PointsToSimulation::set_color(int32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:LSLAM.PointsToSimulation.color)
}

// int32 size = 4;
inline void PointsToSimulation::clear_size() {
  _impl_.size_ = 0;
}
inline int32_t PointsToSimulation::_internal_size() const {
  return _impl_.size_;
}
inline int32_t PointsToSimulation::size() const {
  // @@protoc_insertion_point(field_get:LSLAM.PointsToSimulation.size)
  return _internal_size();
}
inline void PointsToSimulation::_internal_set_size(int32_t value) {
  
  _impl_.size_ = value;
}
inline void PointsToSimulation::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:LSLAM.PointsToSimulation.size)
}

// bool is_connected = 5;
inline void PointsToSimulation::clear_is_connected() {
  _impl_.is_connected_ = false;
}
inline bool PointsToSimulation::_internal_is_connected() const {
  return _impl_.is_connected_;
}
inline bool PointsToSimulation::is_connected() const {
  // @@protoc_insertion_point(field_get:LSLAM.PointsToSimulation.is_connected)
  return _internal_is_connected();
}
inline void PointsToSimulation::_internal_set_is_connected(bool value) {
  
  _impl_.is_connected_ = value;
}
inline void PointsToSimulation::set_is_connected(bool value) {
  _internal_set_is_connected(value);
  // @@protoc_insertion_point(field_set:LSLAM.PointsToSimulation.is_connected)
}

// repeated .LSLAM.Point points = 6;
inline int PointsToSimulation::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int PointsToSimulation::points_size() const {
  return _internal_points_size();
}
inline ::LSLAM::Point* PointsToSimulation::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.PointsToSimulation.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point >*
PointsToSimulation::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.PointsToSimulation.points)
  return &_impl_.points_;
}
inline const ::LSLAM::Point& PointsToSimulation::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::LSLAM::Point& PointsToSimulation::points(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.PointsToSimulation.points)
  return _internal_points(index);
}
inline ::LSLAM::Point* PointsToSimulation::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::LSLAM::Point* PointsToSimulation::add_points() {
  ::LSLAM::Point* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:LSLAM.PointsToSimulation.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point >&
PointsToSimulation::points() const {
  // @@protoc_insertion_point(field_list:LSLAM.PointsToSimulation.points)
  return _impl_.points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PointsToSimulation_2eproto
