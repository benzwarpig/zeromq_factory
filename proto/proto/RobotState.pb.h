// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RobotState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RobotState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RobotState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RobotState_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RobotState_2eproto;
namespace LSLAM {
class RobotState;
struct RobotStateDefaultTypeInternal;
extern RobotStateDefaultTypeInternal _RobotState_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::RobotState* Arena::CreateMaybeMessage<::LSLAM::RobotState>(Arena*);
template<> ::LSLAM::State* Arena::CreateMaybeMessage<::LSLAM::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

enum KeyStateType : int {
  KeyIdle = 0,
  kKey1Up = 1,
  kKey2Up = 2,
  kKey1double = 3,
  kKey2double = 4,
  kKey1Long = 5,
  kKey2Long = 6,
  kKeyGropup = 7,
  KeyStateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  KeyStateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool KeyStateType_IsValid(int value);
constexpr KeyStateType KeyStateType_MIN = KeyIdle;
constexpr KeyStateType KeyStateType_MAX = kKeyGropup;
constexpr int KeyStateType_ARRAYSIZE = KeyStateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyStateType_descriptor();
template<typename T>
inline const std::string& KeyStateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyStateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyStateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeyStateType_descriptor(), enum_t_value);
}
inline bool KeyStateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KeyStateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeyStateType>(
    KeyStateType_descriptor(), name, value);
}
// ===================================================================

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit PROTOBUF_CONSTEXPR State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const State& from) {
    State::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemainBatteryFieldNumber = 1,
    kRobotMotionStateFieldNumber = 2,
    kPreviousRobotMotionStateFieldNumber = 3,
    kRobotErroStateFieldNumber = 4,
    kRobotAbnormalStateFieldNumber = 5,
  };
  // uint32 remain_battery = 1;
  void clear_remain_battery();
  uint32_t remain_battery() const;
  void set_remain_battery(uint32_t value);
  private:
  uint32_t _internal_remain_battery() const;
  void _internal_set_remain_battery(uint32_t value);
  public:

  // uint32 robot_motion_state = 2;
  void clear_robot_motion_state();
  uint32_t robot_motion_state() const;
  void set_robot_motion_state(uint32_t value);
  private:
  uint32_t _internal_robot_motion_state() const;
  void _internal_set_robot_motion_state(uint32_t value);
  public:

  // uint32 previous_robot_motion_state = 3;
  void clear_previous_robot_motion_state();
  uint32_t previous_robot_motion_state() const;
  void set_previous_robot_motion_state(uint32_t value);
  private:
  uint32_t _internal_previous_robot_motion_state() const;
  void _internal_set_previous_robot_motion_state(uint32_t value);
  public:

  // uint32 robot_erro_state = 4;
  void clear_robot_erro_state();
  uint32_t robot_erro_state() const;
  void set_robot_erro_state(uint32_t value);
  private:
  uint32_t _internal_robot_erro_state() const;
  void _internal_set_robot_erro_state(uint32_t value);
  public:

  // uint32 robot_abnormal_state = 5;
  void clear_robot_abnormal_state();
  uint32_t robot_abnormal_state() const;
  void set_robot_abnormal_state(uint32_t value);
  private:
  uint32_t _internal_robot_abnormal_state() const;
  void _internal_set_robot_abnormal_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t remain_battery_;
    uint32_t robot_motion_state_;
    uint32_t previous_robot_motion_state_;
    uint32_t robot_erro_state_;
    uint32_t robot_abnormal_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RobotState_2eproto;
};
// -------------------------------------------------------------------

class RobotState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.RobotState) */ {
 public:
  inline RobotState() : RobotState(nullptr) {}
  ~RobotState() override;
  explicit PROTOBUF_CONSTEXPR RobotState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotState(const RobotState& from);
  RobotState(RobotState&& from) noexcept
    : RobotState() {
    *this = ::std::move(from);
  }

  inline RobotState& operator=(const RobotState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotState& operator=(RobotState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotState* internal_default_instance() {
    return reinterpret_cast<const RobotState*>(
               &_RobotState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RobotState& a, RobotState& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotState& from) {
    RobotState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.RobotState";
  }
  protected:
  explicit RobotState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 5,
    kUserNumberFieldNumber = 1,
    kFirmVersionFieldNumber = 2,
    kRobotKeyStateFieldNumber = 3,
    kPartnerKeyStateFieldNumber = 4,
    kEdgeDistanceFieldNumber = 6,
    kIsRobotPoseTrappedFieldNumber = 7,
  };
  // .LSLAM.State state = 5;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::LSLAM::State& state() const;
  PROTOBUF_NODISCARD ::LSLAM::State* release_state();
  ::LSLAM::State* mutable_state();
  void set_allocated_state(::LSLAM::State* state);
  private:
  const ::LSLAM::State& _internal_state() const;
  ::LSLAM::State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::LSLAM::State* state);
  ::LSLAM::State* unsafe_arena_release_state();

  // uint32 user_number = 1;
  void clear_user_number();
  uint32_t user_number() const;
  void set_user_number(uint32_t value);
  private:
  uint32_t _internal_user_number() const;
  void _internal_set_user_number(uint32_t value);
  public:

  // uint32 firm_version = 2;
  void clear_firm_version();
  uint32_t firm_version() const;
  void set_firm_version(uint32_t value);
  private:
  uint32_t _internal_firm_version() const;
  void _internal_set_firm_version(uint32_t value);
  public:

  // .LSLAM.KeyStateType robot_key_state = 3;
  void clear_robot_key_state();
  ::LSLAM::KeyStateType robot_key_state() const;
  void set_robot_key_state(::LSLAM::KeyStateType value);
  private:
  ::LSLAM::KeyStateType _internal_robot_key_state() const;
  void _internal_set_robot_key_state(::LSLAM::KeyStateType value);
  public:

  // .LSLAM.KeyStateType partner_key_state = 4;
  void clear_partner_key_state();
  ::LSLAM::KeyStateType partner_key_state() const;
  void set_partner_key_state(::LSLAM::KeyStateType value);
  private:
  ::LSLAM::KeyStateType _internal_partner_key_state() const;
  void _internal_set_partner_key_state(::LSLAM::KeyStateType value);
  public:

  // int32 edge_distance = 6;
  void clear_edge_distance();
  int32_t edge_distance() const;
  void set_edge_distance(int32_t value);
  private:
  int32_t _internal_edge_distance() const;
  void _internal_set_edge_distance(int32_t value);
  public:

  // bool is_robot_pose_trapped = 7;
  void clear_is_robot_pose_trapped();
  bool is_robot_pose_trapped() const;
  void set_is_robot_pose_trapped(bool value);
  private:
  bool _internal_is_robot_pose_trapped() const;
  void _internal_set_is_robot_pose_trapped(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.RobotState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::LSLAM::State* state_;
    uint32_t user_number_;
    uint32_t firm_version_;
    int robot_key_state_;
    int partner_key_state_;
    int32_t edge_distance_;
    bool is_robot_pose_trapped_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RobotState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State

// uint32 remain_battery = 1;
inline void State::clear_remain_battery() {
  _impl_.remain_battery_ = 0u;
}
inline uint32_t State::_internal_remain_battery() const {
  return _impl_.remain_battery_;
}
inline uint32_t State::remain_battery() const {
  // @@protoc_insertion_point(field_get:LSLAM.State.remain_battery)
  return _internal_remain_battery();
}
inline void State::_internal_set_remain_battery(uint32_t value) {
  
  _impl_.remain_battery_ = value;
}
inline void State::set_remain_battery(uint32_t value) {
  _internal_set_remain_battery(value);
  // @@protoc_insertion_point(field_set:LSLAM.State.remain_battery)
}

// uint32 robot_motion_state = 2;
inline void State::clear_robot_motion_state() {
  _impl_.robot_motion_state_ = 0u;
}
inline uint32_t State::_internal_robot_motion_state() const {
  return _impl_.robot_motion_state_;
}
inline uint32_t State::robot_motion_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.State.robot_motion_state)
  return _internal_robot_motion_state();
}
inline void State::_internal_set_robot_motion_state(uint32_t value) {
  
  _impl_.robot_motion_state_ = value;
}
inline void State::set_robot_motion_state(uint32_t value) {
  _internal_set_robot_motion_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.State.robot_motion_state)
}

// uint32 previous_robot_motion_state = 3;
inline void State::clear_previous_robot_motion_state() {
  _impl_.previous_robot_motion_state_ = 0u;
}
inline uint32_t State::_internal_previous_robot_motion_state() const {
  return _impl_.previous_robot_motion_state_;
}
inline uint32_t State::previous_robot_motion_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.State.previous_robot_motion_state)
  return _internal_previous_robot_motion_state();
}
inline void State::_internal_set_previous_robot_motion_state(uint32_t value) {
  
  _impl_.previous_robot_motion_state_ = value;
}
inline void State::set_previous_robot_motion_state(uint32_t value) {
  _internal_set_previous_robot_motion_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.State.previous_robot_motion_state)
}

// uint32 robot_erro_state = 4;
inline void State::clear_robot_erro_state() {
  _impl_.robot_erro_state_ = 0u;
}
inline uint32_t State::_internal_robot_erro_state() const {
  return _impl_.robot_erro_state_;
}
inline uint32_t State::robot_erro_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.State.robot_erro_state)
  return _internal_robot_erro_state();
}
inline void State::_internal_set_robot_erro_state(uint32_t value) {
  
  _impl_.robot_erro_state_ = value;
}
inline void State::set_robot_erro_state(uint32_t value) {
  _internal_set_robot_erro_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.State.robot_erro_state)
}

// uint32 robot_abnormal_state = 5;
inline void State::clear_robot_abnormal_state() {
  _impl_.robot_abnormal_state_ = 0u;
}
inline uint32_t State::_internal_robot_abnormal_state() const {
  return _impl_.robot_abnormal_state_;
}
inline uint32_t State::robot_abnormal_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.State.robot_abnormal_state)
  return _internal_robot_abnormal_state();
}
inline void State::_internal_set_robot_abnormal_state(uint32_t value) {
  
  _impl_.robot_abnormal_state_ = value;
}
inline void State::set_robot_abnormal_state(uint32_t value) {
  _internal_set_robot_abnormal_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.State.robot_abnormal_state)
}

// -------------------------------------------------------------------

// RobotState

// uint32 user_number = 1;
inline void RobotState::clear_user_number() {
  _impl_.user_number_ = 0u;
}
inline uint32_t RobotState::_internal_user_number() const {
  return _impl_.user_number_;
}
inline uint32_t RobotState::user_number() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotState.user_number)
  return _internal_user_number();
}
inline void RobotState::_internal_set_user_number(uint32_t value) {
  
  _impl_.user_number_ = value;
}
inline void RobotState::set_user_number(uint32_t value) {
  _internal_set_user_number(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotState.user_number)
}

// uint32 firm_version = 2;
inline void RobotState::clear_firm_version() {
  _impl_.firm_version_ = 0u;
}
inline uint32_t RobotState::_internal_firm_version() const {
  return _impl_.firm_version_;
}
inline uint32_t RobotState::firm_version() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotState.firm_version)
  return _internal_firm_version();
}
inline void RobotState::_internal_set_firm_version(uint32_t value) {
  
  _impl_.firm_version_ = value;
}
inline void RobotState::set_firm_version(uint32_t value) {
  _internal_set_firm_version(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotState.firm_version)
}

// .LSLAM.KeyStateType robot_key_state = 3;
inline void RobotState::clear_robot_key_state() {
  _impl_.robot_key_state_ = 0;
}
inline ::LSLAM::KeyStateType RobotState::_internal_robot_key_state() const {
  return static_cast< ::LSLAM::KeyStateType >(_impl_.robot_key_state_);
}
inline ::LSLAM::KeyStateType RobotState::robot_key_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotState.robot_key_state)
  return _internal_robot_key_state();
}
inline void RobotState::_internal_set_robot_key_state(::LSLAM::KeyStateType value) {
  
  _impl_.robot_key_state_ = value;
}
inline void RobotState::set_robot_key_state(::LSLAM::KeyStateType value) {
  _internal_set_robot_key_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotState.robot_key_state)
}

// .LSLAM.KeyStateType partner_key_state = 4;
inline void RobotState::clear_partner_key_state() {
  _impl_.partner_key_state_ = 0;
}
inline ::LSLAM::KeyStateType RobotState::_internal_partner_key_state() const {
  return static_cast< ::LSLAM::KeyStateType >(_impl_.partner_key_state_);
}
inline ::LSLAM::KeyStateType RobotState::partner_key_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotState.partner_key_state)
  return _internal_partner_key_state();
}
inline void RobotState::_internal_set_partner_key_state(::LSLAM::KeyStateType value) {
  
  _impl_.partner_key_state_ = value;
}
inline void RobotState::set_partner_key_state(::LSLAM::KeyStateType value) {
  _internal_set_partner_key_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotState.partner_key_state)
}

// .LSLAM.State state = 5;
inline bool RobotState::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool RobotState::has_state() const {
  return _internal_has_state();
}
inline void RobotState::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
inline const ::LSLAM::State& RobotState::_internal_state() const {
  const ::LSLAM::State* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::State&>(
      ::LSLAM::_State_default_instance_);
}
inline const ::LSLAM::State& RobotState::state() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotState.state)
  return _internal_state();
}
inline void RobotState::unsafe_arena_set_allocated_state(
    ::LSLAM::State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.RobotState.state)
}
inline ::LSLAM::State* RobotState::release_state() {
  
  ::LSLAM::State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::State* RobotState::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:LSLAM.RobotState.state)
  
  ::LSLAM::State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::LSLAM::State* RobotState::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::State>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::LSLAM::State* RobotState::mutable_state() {
  ::LSLAM::State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:LSLAM.RobotState.state)
  return _msg;
}
inline void RobotState::set_allocated_state(::LSLAM::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.RobotState.state)
}

// int32 edge_distance = 6;
inline void RobotState::clear_edge_distance() {
  _impl_.edge_distance_ = 0;
}
inline int32_t RobotState::_internal_edge_distance() const {
  return _impl_.edge_distance_;
}
inline int32_t RobotState::edge_distance() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotState.edge_distance)
  return _internal_edge_distance();
}
inline void RobotState::_internal_set_edge_distance(int32_t value) {
  
  _impl_.edge_distance_ = value;
}
inline void RobotState::set_edge_distance(int32_t value) {
  _internal_set_edge_distance(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotState.edge_distance)
}

// bool is_robot_pose_trapped = 7;
inline void RobotState::clear_is_robot_pose_trapped() {
  _impl_.is_robot_pose_trapped_ = false;
}
inline bool RobotState::_internal_is_robot_pose_trapped() const {
  return _impl_.is_robot_pose_trapped_;
}
inline bool RobotState::is_robot_pose_trapped() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotState.is_robot_pose_trapped)
  return _internal_is_robot_pose_trapped();
}
inline void RobotState::_internal_set_is_robot_pose_trapped(bool value) {
  
  _impl_.is_robot_pose_trapped_ = value;
}
inline void RobotState::set_is_robot_pose_trapped(bool value) {
  _internal_set_is_robot_pose_trapped(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotState.is_robot_pose_trapped)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LSLAM::KeyStateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::KeyStateType>() {
  return ::LSLAM::KeyStateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RobotState_2eproto
