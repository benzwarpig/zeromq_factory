// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigurationItems.proto

#include "ConfigurationItems.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR ContinueCleanAtBreakPoint::ContinueCleanAtBreakPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.all_clean_tasks_)*/{}
  , /*decltype(_impl_._all_clean_tasks_cached_byte_size_)*/{0}
  , /*decltype(_impl_.cleaned_area_id_)*/{}
  , /*decltype(_impl_._cleaned_area_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.break_point_)*/nullptr
  , /*decltype(_impl_.break_point_area_id_)*/0u
  , /*decltype(_impl_.map_id_)*/0u
  , /*decltype(_impl_.clean_and_mop_state_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContinueCleanAtBreakPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContinueCleanAtBreakPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContinueCleanAtBreakPointDefaultTypeInternal() {}
  union {
    ContinueCleanAtBreakPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContinueCleanAtBreakPointDefaultTypeInternal _ContinueCleanAtBreakPoint_default_instance_;
PROTOBUF_CONSTEXPR MapInfo::MapInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_data_)*/{}
  , /*decltype(_impl_._map_data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.saved_origin_x_)*/0
  , /*decltype(_impl_.saved_origin_y_)*/0
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapInfoDefaultTypeInternal() {}
  union {
    MapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapInfoDefaultTypeInternal _MapInfo_default_instance_;
PROTOBUF_CONSTEXPR DivisionLineInfo::DivisionLineInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.division_lines_length_)*/{}
  , /*decltype(_impl_._division_lines_length_cached_byte_size_)*/{0}
  , /*decltype(_impl_.division_lines_point_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DivisionLineInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DivisionLineInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DivisionLineInfoDefaultTypeInternal() {}
  union {
    DivisionLineInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DivisionLineInfoDefaultTypeInternal _DivisionLineInfo_default_instance_;
PROTOBUF_CONSTEXPR VirtualWallInfo::VirtualWallInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.virtual_walls_length_)*/{}
  , /*decltype(_impl_._virtual_walls_length_cached_byte_size_)*/{0}
  , /*decltype(_impl_.virtual_walls_point_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VirtualWallInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtualWallInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtualWallInfoDefaultTypeInternal() {}
  union {
    VirtualWallInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtualWallInfoDefaultTypeInternal _VirtualWallInfo_default_instance_;
PROTOBUF_CONSTEXPR ConfigurationItems::ConfigurationItems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_layer_info_)*/nullptr
  , /*decltype(_impl_.continue_clean_at_break_point_info_)*/nullptr
  , /*decltype(_impl_.complete_clean_)*/false
  , /*decltype(_impl_.is_adjusted_angle_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigurationItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigurationItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigurationItemsDefaultTypeInternal() {}
  union {
    ConfigurationItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigurationItemsDefaultTypeInternal _ConfigurationItems_default_instance_;
PROTOBUF_CONSTEXPR MapInfoOfPrograms::MapInfoOfPrograms(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rooms_clean_way_)*/{}
  , /*decltype(_impl_._rooms_clean_way_cached_byte_size_)*/{0}
  , /*decltype(_impl_.pbstream_file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.segment_map_)*/nullptr
  , /*decltype(_impl_.division_line_info_)*/nullptr
  , /*decltype(_impl_.virtual_wall_info_)*/nullptr
  , /*decltype(_impl_.map_rotation_angle_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapInfoOfProgramsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapInfoOfProgramsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapInfoOfProgramsDefaultTypeInternal() {}
  union {
    MapInfoOfPrograms _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapInfoOfProgramsDefaultTypeInternal _MapInfoOfPrograms_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_ConfigurationItems_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ConfigurationItems_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ConfigurationItems_2eproto = nullptr;

const uint32_t TableStruct_ConfigurationItems_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::ContinueCleanAtBreakPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::ContinueCleanAtBreakPoint, _impl_.break_point_area_id_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::ContinueCleanAtBreakPoint, _impl_.all_clean_tasks_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::ContinueCleanAtBreakPoint, _impl_.cleaned_area_id_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::ContinueCleanAtBreakPoint, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::ContinueCleanAtBreakPoint, _impl_.clean_and_mop_state_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::ContinueCleanAtBreakPoint, _impl_.break_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfo, _impl_.saved_origin_x_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfo, _impl_.saved_origin_y_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfo, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfo, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfo, _impl_.map_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::DivisionLineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::DivisionLineInfo, _impl_.division_lines_length_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::DivisionLineInfo, _impl_.division_lines_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::VirtualWallInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::VirtualWallInfo, _impl_.virtual_walls_length_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::VirtualWallInfo, _impl_.virtual_walls_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::ConfigurationItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::ConfigurationItems, _impl_.local_layer_info_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::ConfigurationItems, _impl_.continue_clean_at_break_point_info_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::ConfigurationItems, _impl_.complete_clean_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::ConfigurationItems, _impl_.is_adjusted_angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfoOfPrograms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfoOfPrograms, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfoOfPrograms, _impl_.segment_map_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfoOfPrograms, _impl_.pbstream_file_name_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfoOfPrograms, _impl_.map_rotation_angle_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfoOfPrograms, _impl_.division_line_info_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfoOfPrograms, _impl_.virtual_wall_info_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapInfoOfPrograms, _impl_.rooms_clean_way_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::ContinueCleanAtBreakPoint)},
  { 14, -1, -1, sizeof(::LSLAM::MapInfo)},
  { 27, -1, -1, sizeof(::LSLAM::DivisionLineInfo)},
  { 37, -1, -1, sizeof(::LSLAM::VirtualWallInfo)},
  { 47, -1, -1, sizeof(::LSLAM::ConfigurationItems)},
  { 59, -1, -1, sizeof(::LSLAM::MapInfoOfPrograms)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_ContinueCleanAtBreakPoint_default_instance_._instance,
  &::LSLAM::_MapInfo_default_instance_._instance,
  &::LSLAM::_DivisionLineInfo_default_instance_._instance,
  &::LSLAM::_VirtualWallInfo_default_instance_._instance,
  &::LSLAM::_ConfigurationItems_default_instance_._instance,
  &::LSLAM::_MapInfoOfPrograms_default_instance_._instance,
};

const char descriptor_table_protodef_ConfigurationItems_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030ConfigurationItems.proto\022\005LSLAM\032\013Point"
  ".proto\032\025MyOccupancyGrid.proto\"\272\001\n\031Contin"
  "ueCleanAtBreakPoint\022\033\n\023break_point_area_"
  "id\030\001 \001(\r\022\027\n\017all_clean_tasks\030\002 \003(\r\022\027\n\017cle"
  "aned_area_id\030\003 \003(\r\022\016\n\006map_id\030\004 \001(\r\022\033\n\023cl"
  "ean_and_mop_state\030\005 \001(\r\022!\n\013break_point\030\006"
  " \001(\0132\014.LSLAM.Point\"j\n\007MapInfo\022\026\n\016saved_o"
  "rigin_x\030\001 \001(\001\022\026\n\016saved_origin_y\030\002 \001(\001\022\r\n"
  "\005width\030\003 \001(\r\022\016\n\006height\030\004 \001(\r\022\020\n\010map_data"
  "\030\005 \003(\005\"]\n\020DivisionLineInfo\022\035\n\025division_l"
  "ines_length\030\001 \003(\005\022*\n\024division_lines_poin"
  "t\030\002 \003(\0132\014.LSLAM.Point\"Z\n\017VirtualWallInfo"
  "\022\034\n\024virtual_walls_length\030\001 \003(\005\022)\n\023virtua"
  "l_walls_point\030\002 \003(\0132\014.LSLAM.Point\"\277\001\n\022Co"
  "nfigurationItems\022(\n\020local_layer_info\030\001 \001"
  "(\0132\016.LSLAM.MapInfo\022L\n\"continue_clean_at_"
  "break_point_info\030\002 \001(\0132 .LSLAM.ContinueC"
  "leanAtBreakPoint\022\026\n\016complete_clean\030\003 \001(\010"
  "\022\031\n\021is_adjusted_angle\030\004 \001(\010\"\211\002\n\021MapInfoO"
  "fPrograms\022\016\n\006map_id\030\001 \001(\005\022+\n\013segment_map"
  "\030\002 \001(\0132\026.LSLAM.MyOccupancyGrid\022\032\n\022pbStre"
  "am_file_name\030\003 \001(\014\022\032\n\022map_rotation_angle"
  "\030\004 \001(\001\0223\n\022division_line_info\030\005 \001(\0132\027.LSL"
  "AM.DivisionLineInfo\0221\n\021virtual_wall_info"
  "\030\006 \001(\0132\026.LSLAM.VirtualWallInfo\022\027\n\017rooms_"
  "clean_way\030\007 \003(\r*z\n\022SaveAndReadOptions\022\024\n"
  "\020LOCAL_LAYER_INFO\020\000\022&\n\"CONTINUE_CLEAN_AT"
  "_BREAK_POINT_INFO\020\001\022\022\n\016COMPLETE_CLEAN\020\002\022"
  "\022\n\016ADJUSTED_ANGLE\020\003b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ConfigurationItems_2eproto_deps[2] = {
  &::descriptor_table_MyOccupancyGrid_2eproto,
  &::descriptor_table_Point_2eproto,
};
static ::_pbi::once_flag descriptor_table_ConfigurationItems_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ConfigurationItems_2eproto = {
    false, false, 1147, descriptor_table_protodef_ConfigurationItems_2eproto,
    "ConfigurationItems.proto",
    &descriptor_table_ConfigurationItems_2eproto_once, descriptor_table_ConfigurationItems_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_ConfigurationItems_2eproto::offsets,
    file_level_metadata_ConfigurationItems_2eproto, file_level_enum_descriptors_ConfigurationItems_2eproto,
    file_level_service_descriptors_ConfigurationItems_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ConfigurationItems_2eproto_getter() {
  return &descriptor_table_ConfigurationItems_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ConfigurationItems_2eproto(&descriptor_table_ConfigurationItems_2eproto);
namespace LSLAM {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SaveAndReadOptions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ConfigurationItems_2eproto);
  return file_level_enum_descriptors_ConfigurationItems_2eproto[0];
}
bool SaveAndReadOptions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ContinueCleanAtBreakPoint::_Internal {
 public:
  static const ::LSLAM::Point& break_point(const ContinueCleanAtBreakPoint* msg);
};

const ::LSLAM::Point&
ContinueCleanAtBreakPoint::_Internal::break_point(const ContinueCleanAtBreakPoint* msg) {
  return *msg->_impl_.break_point_;
}
void ContinueCleanAtBreakPoint::clear_break_point() {
  if (GetArenaForAllocation() == nullptr && _impl_.break_point_ != nullptr) {
    delete _impl_.break_point_;
  }
  _impl_.break_point_ = nullptr;
}
ContinueCleanAtBreakPoint::ContinueCleanAtBreakPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.ContinueCleanAtBreakPoint)
}
ContinueCleanAtBreakPoint::ContinueCleanAtBreakPoint(const ContinueCleanAtBreakPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContinueCleanAtBreakPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.all_clean_tasks_){from._impl_.all_clean_tasks_}
    , /*decltype(_impl_._all_clean_tasks_cached_byte_size_)*/{0}
    , decltype(_impl_.cleaned_area_id_){from._impl_.cleaned_area_id_}
    , /*decltype(_impl_._cleaned_area_id_cached_byte_size_)*/{0}
    , decltype(_impl_.break_point_){nullptr}
    , decltype(_impl_.break_point_area_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.clean_and_mop_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_break_point()) {
    _this->_impl_.break_point_ = new ::LSLAM::Point(*from._impl_.break_point_);
  }
  ::memcpy(&_impl_.break_point_area_id_, &from._impl_.break_point_area_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clean_and_mop_state_) -
    reinterpret_cast<char*>(&_impl_.break_point_area_id_)) + sizeof(_impl_.clean_and_mop_state_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.ContinueCleanAtBreakPoint)
}

inline void ContinueCleanAtBreakPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.all_clean_tasks_){arena}
    , /*decltype(_impl_._all_clean_tasks_cached_byte_size_)*/{0}
    , decltype(_impl_.cleaned_area_id_){arena}
    , /*decltype(_impl_._cleaned_area_id_cached_byte_size_)*/{0}
    , decltype(_impl_.break_point_){nullptr}
    , decltype(_impl_.break_point_area_id_){0u}
    , decltype(_impl_.map_id_){0u}
    , decltype(_impl_.clean_and_mop_state_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ContinueCleanAtBreakPoint::~ContinueCleanAtBreakPoint() {
  // @@protoc_insertion_point(destructor:LSLAM.ContinueCleanAtBreakPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContinueCleanAtBreakPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.all_clean_tasks_.~RepeatedField();
  _impl_.cleaned_area_id_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.break_point_;
}

void ContinueCleanAtBreakPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContinueCleanAtBreakPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.ContinueCleanAtBreakPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.all_clean_tasks_.Clear();
  _impl_.cleaned_area_id_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.break_point_ != nullptr) {
    delete _impl_.break_point_;
  }
  _impl_.break_point_ = nullptr;
  ::memset(&_impl_.break_point_area_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clean_and_mop_state_) -
      reinterpret_cast<char*>(&_impl_.break_point_area_id_)) + sizeof(_impl_.clean_and_mop_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContinueCleanAtBreakPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 break_point_area_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.break_point_area_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 all_clean_tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_all_clean_tasks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_all_clean_tasks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 cleaned_area_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cleaned_area_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_cleaned_area_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 clean_and_mop_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.clean_and_mop_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.Point break_point = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_break_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContinueCleanAtBreakPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.ContinueCleanAtBreakPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 break_point_area_id = 1;
  if (this->_internal_break_point_area_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_break_point_area_id(), target);
  }

  // repeated uint32 all_clean_tasks = 2;
  {
    int byte_size = _impl_._all_clean_tasks_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_all_clean_tasks(), byte_size, target);
    }
  }

  // repeated uint32 cleaned_area_id = 3;
  {
    int byte_size = _impl_._cleaned_area_id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_cleaned_area_id(), byte_size, target);
    }
  }

  // uint32 map_id = 4;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_map_id(), target);
  }

  // uint32 clean_and_mop_state = 5;
  if (this->_internal_clean_and_mop_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_clean_and_mop_state(), target);
  }

  // .LSLAM.Point break_point = 6;
  if (this->_internal_has_break_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::break_point(this),
        _Internal::break_point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.ContinueCleanAtBreakPoint)
  return target;
}

size_t ContinueCleanAtBreakPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.ContinueCleanAtBreakPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 all_clean_tasks = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.all_clean_tasks_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._all_clean_tasks_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated uint32 cleaned_area_id = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.cleaned_area_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cleaned_area_id_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // .LSLAM.Point break_point = 6;
  if (this->_internal_has_break_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.break_point_);
  }

  // uint32 break_point_area_id = 1;
  if (this->_internal_break_point_area_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_break_point_area_id());
  }

  // uint32 map_id = 4;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_id());
  }

  // uint32 clean_and_mop_state = 5;
  if (this->_internal_clean_and_mop_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clean_and_mop_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContinueCleanAtBreakPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContinueCleanAtBreakPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContinueCleanAtBreakPoint::GetClassData() const { return &_class_data_; }


void ContinueCleanAtBreakPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContinueCleanAtBreakPoint*>(&to_msg);
  auto& from = static_cast<const ContinueCleanAtBreakPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.ContinueCleanAtBreakPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.all_clean_tasks_.MergeFrom(from._impl_.all_clean_tasks_);
  _this->_impl_.cleaned_area_id_.MergeFrom(from._impl_.cleaned_area_id_);
  if (from._internal_has_break_point()) {
    _this->_internal_mutable_break_point()->::LSLAM::Point::MergeFrom(
        from._internal_break_point());
  }
  if (from._internal_break_point_area_id() != 0) {
    _this->_internal_set_break_point_area_id(from._internal_break_point_area_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_clean_and_mop_state() != 0) {
    _this->_internal_set_clean_and_mop_state(from._internal_clean_and_mop_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContinueCleanAtBreakPoint::CopyFrom(const ContinueCleanAtBreakPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.ContinueCleanAtBreakPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueCleanAtBreakPoint::IsInitialized() const {
  return true;
}

void ContinueCleanAtBreakPoint::InternalSwap(ContinueCleanAtBreakPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.all_clean_tasks_.InternalSwap(&other->_impl_.all_clean_tasks_);
  _impl_.cleaned_area_id_.InternalSwap(&other->_impl_.cleaned_area_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContinueCleanAtBreakPoint, _impl_.clean_and_mop_state_)
      + sizeof(ContinueCleanAtBreakPoint::_impl_.clean_and_mop_state_)
      - PROTOBUF_FIELD_OFFSET(ContinueCleanAtBreakPoint, _impl_.break_point_)>(
          reinterpret_cast<char*>(&_impl_.break_point_),
          reinterpret_cast<char*>(&other->_impl_.break_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContinueCleanAtBreakPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ConfigurationItems_2eproto_getter, &descriptor_table_ConfigurationItems_2eproto_once,
      file_level_metadata_ConfigurationItems_2eproto[0]);
}

// ===================================================================

class MapInfo::_Internal {
 public:
};

MapInfo::MapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.MapInfo)
}
MapInfo::MapInfo(const MapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_data_){from._impl_.map_data_}
    , /*decltype(_impl_._map_data_cached_byte_size_)*/{0}
    , decltype(_impl_.saved_origin_x_){}
    , decltype(_impl_.saved_origin_y_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.saved_origin_x_, &from._impl_.saved_origin_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.saved_origin_x_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.MapInfo)
}

inline void MapInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_data_){arena}
    , /*decltype(_impl_._map_data_cached_byte_size_)*/{0}
    , decltype(_impl_.saved_origin_x_){0}
    , decltype(_impl_.saved_origin_y_){0}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapInfo::~MapInfo() {
  // @@protoc_insertion_point(destructor:LSLAM.MapInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_data_.~RepeatedField();
}

void MapInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.MapInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_data_.Clear();
  ::memset(&_impl_.saved_origin_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.saved_origin_x_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double saved_origin_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.saved_origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double saved_origin_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.saved_origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 map_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_map_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_map_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.MapInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double saved_origin_x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_x = this->_internal_saved_origin_x();
  uint64_t raw_saved_origin_x;
  memcpy(&raw_saved_origin_x, &tmp_saved_origin_x, sizeof(tmp_saved_origin_x));
  if (raw_saved_origin_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_saved_origin_x(), target);
  }

  // double saved_origin_y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_y = this->_internal_saved_origin_y();
  uint64_t raw_saved_origin_y;
  memcpy(&raw_saved_origin_y, &tmp_saved_origin_y, sizeof(tmp_saved_origin_y));
  if (raw_saved_origin_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_saved_origin_y(), target);
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  // repeated int32 map_data = 5;
  {
    int byte_size = _impl_._map_data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_map_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.MapInfo)
  return target;
}

size_t MapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.MapInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 map_data = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.map_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._map_data_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // double saved_origin_x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_x = this->_internal_saved_origin_x();
  uint64_t raw_saved_origin_x;
  memcpy(&raw_saved_origin_x, &tmp_saved_origin_x, sizeof(tmp_saved_origin_x));
  if (raw_saved_origin_x != 0) {
    total_size += 1 + 8;
  }

  // double saved_origin_y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_y = this->_internal_saved_origin_y();
  uint64_t raw_saved_origin_y;
  memcpy(&raw_saved_origin_y, &tmp_saved_origin_y, sizeof(tmp_saved_origin_y));
  if (raw_saved_origin_y != 0) {
    total_size += 1 + 8;
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapInfo::GetClassData() const { return &_class_data_; }


void MapInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapInfo*>(&to_msg);
  auto& from = static_cast<const MapInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.MapInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_data_.MergeFrom(from._impl_.map_data_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_x = from._internal_saved_origin_x();
  uint64_t raw_saved_origin_x;
  memcpy(&raw_saved_origin_x, &tmp_saved_origin_x, sizeof(tmp_saved_origin_x));
  if (raw_saved_origin_x != 0) {
    _this->_internal_set_saved_origin_x(from._internal_saved_origin_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_y = from._internal_saved_origin_y();
  uint64_t raw_saved_origin_y;
  memcpy(&raw_saved_origin_y, &tmp_saved_origin_y, sizeof(tmp_saved_origin_y));
  if (raw_saved_origin_y != 0) {
    _this->_internal_set_saved_origin_y(from._internal_saved_origin_y());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapInfo::CopyFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.MapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo::IsInitialized() const {
  return true;
}

void MapInfo::InternalSwap(MapInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_data_.InternalSwap(&other->_impl_.map_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapInfo, _impl_.height_)
      + sizeof(MapInfo::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(MapInfo, _impl_.saved_origin_x_)>(
          reinterpret_cast<char*>(&_impl_.saved_origin_x_),
          reinterpret_cast<char*>(&other->_impl_.saved_origin_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ConfigurationItems_2eproto_getter, &descriptor_table_ConfigurationItems_2eproto_once,
      file_level_metadata_ConfigurationItems_2eproto[1]);
}

// ===================================================================

class DivisionLineInfo::_Internal {
 public:
};

void DivisionLineInfo::clear_division_lines_point() {
  _impl_.division_lines_point_.Clear();
}
DivisionLineInfo::DivisionLineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.DivisionLineInfo)
}
DivisionLineInfo::DivisionLineInfo(const DivisionLineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DivisionLineInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.division_lines_length_){from._impl_.division_lines_length_}
    , /*decltype(_impl_._division_lines_length_cached_byte_size_)*/{0}
    , decltype(_impl_.division_lines_point_){from._impl_.division_lines_point_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LSLAM.DivisionLineInfo)
}

inline void DivisionLineInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.division_lines_length_){arena}
    , /*decltype(_impl_._division_lines_length_cached_byte_size_)*/{0}
    , decltype(_impl_.division_lines_point_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DivisionLineInfo::~DivisionLineInfo() {
  // @@protoc_insertion_point(destructor:LSLAM.DivisionLineInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DivisionLineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.division_lines_length_.~RepeatedField();
  _impl_.division_lines_point_.~RepeatedPtrField();
}

void DivisionLineInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DivisionLineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.DivisionLineInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.division_lines_length_.Clear();
  _impl_.division_lines_point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DivisionLineInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 division_lines_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_division_lines_length(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_division_lines_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.Point division_lines_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_division_lines_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DivisionLineInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.DivisionLineInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 division_lines_length = 1;
  {
    int byte_size = _impl_._division_lines_length_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_division_lines_length(), byte_size, target);
    }
  }

  // repeated .LSLAM.Point division_lines_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_division_lines_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_division_lines_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.DivisionLineInfo)
  return target;
}

size_t DivisionLineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.DivisionLineInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 division_lines_length = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.division_lines_length_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._division_lines_length_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated .LSLAM.Point division_lines_point = 2;
  total_size += 1UL * this->_internal_division_lines_point_size();
  for (const auto& msg : this->_impl_.division_lines_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DivisionLineInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DivisionLineInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DivisionLineInfo::GetClassData() const { return &_class_data_; }


void DivisionLineInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DivisionLineInfo*>(&to_msg);
  auto& from = static_cast<const DivisionLineInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.DivisionLineInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.division_lines_length_.MergeFrom(from._impl_.division_lines_length_);
  _this->_impl_.division_lines_point_.MergeFrom(from._impl_.division_lines_point_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DivisionLineInfo::CopyFrom(const DivisionLineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.DivisionLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivisionLineInfo::IsInitialized() const {
  return true;
}

void DivisionLineInfo::InternalSwap(DivisionLineInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.division_lines_length_.InternalSwap(&other->_impl_.division_lines_length_);
  _impl_.division_lines_point_.InternalSwap(&other->_impl_.division_lines_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DivisionLineInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ConfigurationItems_2eproto_getter, &descriptor_table_ConfigurationItems_2eproto_once,
      file_level_metadata_ConfigurationItems_2eproto[2]);
}

// ===================================================================

class VirtualWallInfo::_Internal {
 public:
};

void VirtualWallInfo::clear_virtual_walls_point() {
  _impl_.virtual_walls_point_.Clear();
}
VirtualWallInfo::VirtualWallInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.VirtualWallInfo)
}
VirtualWallInfo::VirtualWallInfo(const VirtualWallInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VirtualWallInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_walls_length_){from._impl_.virtual_walls_length_}
    , /*decltype(_impl_._virtual_walls_length_cached_byte_size_)*/{0}
    , decltype(_impl_.virtual_walls_point_){from._impl_.virtual_walls_point_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LSLAM.VirtualWallInfo)
}

inline void VirtualWallInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_walls_length_){arena}
    , /*decltype(_impl_._virtual_walls_length_cached_byte_size_)*/{0}
    , decltype(_impl_.virtual_walls_point_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VirtualWallInfo::~VirtualWallInfo() {
  // @@protoc_insertion_point(destructor:LSLAM.VirtualWallInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtualWallInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.virtual_walls_length_.~RepeatedField();
  _impl_.virtual_walls_point_.~RepeatedPtrField();
}

void VirtualWallInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtualWallInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.VirtualWallInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_walls_length_.Clear();
  _impl_.virtual_walls_point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualWallInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 virtual_walls_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_virtual_walls_length(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_virtual_walls_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.Point virtual_walls_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtual_walls_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtualWallInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.VirtualWallInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 virtual_walls_length = 1;
  {
    int byte_size = _impl_._virtual_walls_length_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_virtual_walls_length(), byte_size, target);
    }
  }

  // repeated .LSLAM.Point virtual_walls_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_virtual_walls_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_virtual_walls_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.VirtualWallInfo)
  return target;
}

size_t VirtualWallInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.VirtualWallInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 virtual_walls_length = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.virtual_walls_length_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._virtual_walls_length_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated .LSLAM.Point virtual_walls_point = 2;
  total_size += 1UL * this->_internal_virtual_walls_point_size();
  for (const auto& msg : this->_impl_.virtual_walls_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualWallInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VirtualWallInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualWallInfo::GetClassData() const { return &_class_data_; }


void VirtualWallInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VirtualWallInfo*>(&to_msg);
  auto& from = static_cast<const VirtualWallInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.VirtualWallInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.virtual_walls_length_.MergeFrom(from._impl_.virtual_walls_length_);
  _this->_impl_.virtual_walls_point_.MergeFrom(from._impl_.virtual_walls_point_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualWallInfo::CopyFrom(const VirtualWallInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.VirtualWallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualWallInfo::IsInitialized() const {
  return true;
}

void VirtualWallInfo::InternalSwap(VirtualWallInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.virtual_walls_length_.InternalSwap(&other->_impl_.virtual_walls_length_);
  _impl_.virtual_walls_point_.InternalSwap(&other->_impl_.virtual_walls_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualWallInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ConfigurationItems_2eproto_getter, &descriptor_table_ConfigurationItems_2eproto_once,
      file_level_metadata_ConfigurationItems_2eproto[3]);
}

// ===================================================================

class ConfigurationItems::_Internal {
 public:
  static const ::LSLAM::MapInfo& local_layer_info(const ConfigurationItems* msg);
  static const ::LSLAM::ContinueCleanAtBreakPoint& continue_clean_at_break_point_info(const ConfigurationItems* msg);
};

const ::LSLAM::MapInfo&
ConfigurationItems::_Internal::local_layer_info(const ConfigurationItems* msg) {
  return *msg->_impl_.local_layer_info_;
}
const ::LSLAM::ContinueCleanAtBreakPoint&
ConfigurationItems::_Internal::continue_clean_at_break_point_info(const ConfigurationItems* msg) {
  return *msg->_impl_.continue_clean_at_break_point_info_;
}
ConfigurationItems::ConfigurationItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.ConfigurationItems)
}
ConfigurationItems::ConfigurationItems(const ConfigurationItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfigurationItems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_layer_info_){nullptr}
    , decltype(_impl_.continue_clean_at_break_point_info_){nullptr}
    , decltype(_impl_.complete_clean_){}
    , decltype(_impl_.is_adjusted_angle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_layer_info()) {
    _this->_impl_.local_layer_info_ = new ::LSLAM::MapInfo(*from._impl_.local_layer_info_);
  }
  if (from._internal_has_continue_clean_at_break_point_info()) {
    _this->_impl_.continue_clean_at_break_point_info_ = new ::LSLAM::ContinueCleanAtBreakPoint(*from._impl_.continue_clean_at_break_point_info_);
  }
  ::memcpy(&_impl_.complete_clean_, &from._impl_.complete_clean_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_adjusted_angle_) -
    reinterpret_cast<char*>(&_impl_.complete_clean_)) + sizeof(_impl_.is_adjusted_angle_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.ConfigurationItems)
}

inline void ConfigurationItems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_layer_info_){nullptr}
    , decltype(_impl_.continue_clean_at_break_point_info_){nullptr}
    , decltype(_impl_.complete_clean_){false}
    , decltype(_impl_.is_adjusted_angle_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConfigurationItems::~ConfigurationItems() {
  // @@protoc_insertion_point(destructor:LSLAM.ConfigurationItems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigurationItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.local_layer_info_;
  if (this != internal_default_instance()) delete _impl_.continue_clean_at_break_point_info_;
}

void ConfigurationItems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfigurationItems::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.ConfigurationItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.local_layer_info_ != nullptr) {
    delete _impl_.local_layer_info_;
  }
  _impl_.local_layer_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.continue_clean_at_break_point_info_ != nullptr) {
    delete _impl_.continue_clean_at_break_point_info_;
  }
  _impl_.continue_clean_at_break_point_info_ = nullptr;
  ::memset(&_impl_.complete_clean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_adjusted_angle_) -
      reinterpret_cast<char*>(&_impl_.complete_clean_)) + sizeof(_impl_.is_adjusted_angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationItems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.MapInfo local_layer_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_layer_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.ContinueCleanAtBreakPoint continue_clean_at_break_point_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_continue_clean_at_break_point_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool complete_clean = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.complete_clean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_adjusted_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_adjusted_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigurationItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.ConfigurationItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.MapInfo local_layer_info = 1;
  if (this->_internal_has_local_layer_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::local_layer_info(this),
        _Internal::local_layer_info(this).GetCachedSize(), target, stream);
  }

  // .LSLAM.ContinueCleanAtBreakPoint continue_clean_at_break_point_info = 2;
  if (this->_internal_has_continue_clean_at_break_point_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::continue_clean_at_break_point_info(this),
        _Internal::continue_clean_at_break_point_info(this).GetCachedSize(), target, stream);
  }

  // bool complete_clean = 3;
  if (this->_internal_complete_clean() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_complete_clean(), target);
  }

  // bool is_adjusted_angle = 4;
  if (this->_internal_is_adjusted_angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_adjusted_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.ConfigurationItems)
  return target;
}

size_t ConfigurationItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.ConfigurationItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LSLAM.MapInfo local_layer_info = 1;
  if (this->_internal_has_local_layer_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_layer_info_);
  }

  // .LSLAM.ContinueCleanAtBreakPoint continue_clean_at_break_point_info = 2;
  if (this->_internal_has_continue_clean_at_break_point_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.continue_clean_at_break_point_info_);
  }

  // bool complete_clean = 3;
  if (this->_internal_complete_clean() != 0) {
    total_size += 1 + 1;
  }

  // bool is_adjusted_angle = 4;
  if (this->_internal_is_adjusted_angle() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigurationItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfigurationItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigurationItems::GetClassData() const { return &_class_data_; }


void ConfigurationItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfigurationItems*>(&to_msg);
  auto& from = static_cast<const ConfigurationItems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.ConfigurationItems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_local_layer_info()) {
    _this->_internal_mutable_local_layer_info()->::LSLAM::MapInfo::MergeFrom(
        from._internal_local_layer_info());
  }
  if (from._internal_has_continue_clean_at_break_point_info()) {
    _this->_internal_mutable_continue_clean_at_break_point_info()->::LSLAM::ContinueCleanAtBreakPoint::MergeFrom(
        from._internal_continue_clean_at_break_point_info());
  }
  if (from._internal_complete_clean() != 0) {
    _this->_internal_set_complete_clean(from._internal_complete_clean());
  }
  if (from._internal_is_adjusted_angle() != 0) {
    _this->_internal_set_is_adjusted_angle(from._internal_is_adjusted_angle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigurationItems::CopyFrom(const ConfigurationItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.ConfigurationItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationItems::IsInitialized() const {
  return true;
}

void ConfigurationItems::InternalSwap(ConfigurationItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationItems, _impl_.is_adjusted_angle_)
      + sizeof(ConfigurationItems::_impl_.is_adjusted_angle_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationItems, _impl_.local_layer_info_)>(
          reinterpret_cast<char*>(&_impl_.local_layer_info_),
          reinterpret_cast<char*>(&other->_impl_.local_layer_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationItems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ConfigurationItems_2eproto_getter, &descriptor_table_ConfigurationItems_2eproto_once,
      file_level_metadata_ConfigurationItems_2eproto[4]);
}

// ===================================================================

class MapInfoOfPrograms::_Internal {
 public:
  static const ::LSLAM::MyOccupancyGrid& segment_map(const MapInfoOfPrograms* msg);
  static const ::LSLAM::DivisionLineInfo& division_line_info(const MapInfoOfPrograms* msg);
  static const ::LSLAM::VirtualWallInfo& virtual_wall_info(const MapInfoOfPrograms* msg);
};

const ::LSLAM::MyOccupancyGrid&
MapInfoOfPrograms::_Internal::segment_map(const MapInfoOfPrograms* msg) {
  return *msg->_impl_.segment_map_;
}
const ::LSLAM::DivisionLineInfo&
MapInfoOfPrograms::_Internal::division_line_info(const MapInfoOfPrograms* msg) {
  return *msg->_impl_.division_line_info_;
}
const ::LSLAM::VirtualWallInfo&
MapInfoOfPrograms::_Internal::virtual_wall_info(const MapInfoOfPrograms* msg) {
  return *msg->_impl_.virtual_wall_info_;
}
void MapInfoOfPrograms::clear_segment_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.segment_map_ != nullptr) {
    delete _impl_.segment_map_;
  }
  _impl_.segment_map_ = nullptr;
}
MapInfoOfPrograms::MapInfoOfPrograms(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.MapInfoOfPrograms)
}
MapInfoOfPrograms::MapInfoOfPrograms(const MapInfoOfPrograms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapInfoOfPrograms* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rooms_clean_way_){from._impl_.rooms_clean_way_}
    , /*decltype(_impl_._rooms_clean_way_cached_byte_size_)*/{0}
    , decltype(_impl_.pbstream_file_name_){}
    , decltype(_impl_.segment_map_){nullptr}
    , decltype(_impl_.division_line_info_){nullptr}
    , decltype(_impl_.virtual_wall_info_){nullptr}
    , decltype(_impl_.map_rotation_angle_){}
    , decltype(_impl_.map_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pbstream_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pbstream_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pbstream_file_name().empty()) {
    _this->_impl_.pbstream_file_name_.Set(from._internal_pbstream_file_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_segment_map()) {
    _this->_impl_.segment_map_ = new ::LSLAM::MyOccupancyGrid(*from._impl_.segment_map_);
  }
  if (from._internal_has_division_line_info()) {
    _this->_impl_.division_line_info_ = new ::LSLAM::DivisionLineInfo(*from._impl_.division_line_info_);
  }
  if (from._internal_has_virtual_wall_info()) {
    _this->_impl_.virtual_wall_info_ = new ::LSLAM::VirtualWallInfo(*from._impl_.virtual_wall_info_);
  }
  ::memcpy(&_impl_.map_rotation_angle_, &from._impl_.map_rotation_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_id_) -
    reinterpret_cast<char*>(&_impl_.map_rotation_angle_)) + sizeof(_impl_.map_id_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.MapInfoOfPrograms)
}

inline void MapInfoOfPrograms::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rooms_clean_way_){arena}
    , /*decltype(_impl_._rooms_clean_way_cached_byte_size_)*/{0}
    , decltype(_impl_.pbstream_file_name_){}
    , decltype(_impl_.segment_map_){nullptr}
    , decltype(_impl_.division_line_info_){nullptr}
    , decltype(_impl_.virtual_wall_info_){nullptr}
    , decltype(_impl_.map_rotation_angle_){0}
    , decltype(_impl_.map_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pbstream_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pbstream_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapInfoOfPrograms::~MapInfoOfPrograms() {
  // @@protoc_insertion_point(destructor:LSLAM.MapInfoOfPrograms)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapInfoOfPrograms::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rooms_clean_way_.~RepeatedField();
  _impl_.pbstream_file_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.segment_map_;
  if (this != internal_default_instance()) delete _impl_.division_line_info_;
  if (this != internal_default_instance()) delete _impl_.virtual_wall_info_;
}

void MapInfoOfPrograms::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapInfoOfPrograms::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.MapInfoOfPrograms)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rooms_clean_way_.Clear();
  _impl_.pbstream_file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.segment_map_ != nullptr) {
    delete _impl_.segment_map_;
  }
  _impl_.segment_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.division_line_info_ != nullptr) {
    delete _impl_.division_line_info_;
  }
  _impl_.division_line_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.virtual_wall_info_ != nullptr) {
    delete _impl_.virtual_wall_info_;
  }
  _impl_.virtual_wall_info_ = nullptr;
  ::memset(&_impl_.map_rotation_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.map_id_) -
      reinterpret_cast<char*>(&_impl_.map_rotation_angle_)) + sizeof(_impl_.map_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapInfoOfPrograms::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 map_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.MyOccupancyGrid segment_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pbStream_file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pbstream_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double map_rotation_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.map_rotation_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.DivisionLineInfo division_line_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_division_line_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.VirtualWallInfo virtual_wall_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_wall_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 rooms_clean_way = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rooms_clean_way(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_rooms_clean_way(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapInfoOfPrograms::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.MapInfoOfPrograms)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_id = 1;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_map_id(), target);
  }

  // .LSLAM.MyOccupancyGrid segment_map = 2;
  if (this->_internal_has_segment_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::segment_map(this),
        _Internal::segment_map(this).GetCachedSize(), target, stream);
  }

  // bytes pbStream_file_name = 3;
  if (!this->_internal_pbstream_file_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pbstream_file_name(), target);
  }

  // double map_rotation_angle = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_map_rotation_angle = this->_internal_map_rotation_angle();
  uint64_t raw_map_rotation_angle;
  memcpy(&raw_map_rotation_angle, &tmp_map_rotation_angle, sizeof(tmp_map_rotation_angle));
  if (raw_map_rotation_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_map_rotation_angle(), target);
  }

  // .LSLAM.DivisionLineInfo division_line_info = 5;
  if (this->_internal_has_division_line_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::division_line_info(this),
        _Internal::division_line_info(this).GetCachedSize(), target, stream);
  }

  // .LSLAM.VirtualWallInfo virtual_wall_info = 6;
  if (this->_internal_has_virtual_wall_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::virtual_wall_info(this),
        _Internal::virtual_wall_info(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 rooms_clean_way = 7;
  {
    int byte_size = _impl_._rooms_clean_way_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_rooms_clean_way(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.MapInfoOfPrograms)
  return target;
}

size_t MapInfoOfPrograms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.MapInfoOfPrograms)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 rooms_clean_way = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.rooms_clean_way_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rooms_clean_way_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // bytes pbStream_file_name = 3;
  if (!this->_internal_pbstream_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pbstream_file_name());
  }

  // .LSLAM.MyOccupancyGrid segment_map = 2;
  if (this->_internal_has_segment_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.segment_map_);
  }

  // .LSLAM.DivisionLineInfo division_line_info = 5;
  if (this->_internal_has_division_line_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.division_line_info_);
  }

  // .LSLAM.VirtualWallInfo virtual_wall_info = 6;
  if (this->_internal_has_virtual_wall_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.virtual_wall_info_);
  }

  // double map_rotation_angle = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_map_rotation_angle = this->_internal_map_rotation_angle();
  uint64_t raw_map_rotation_angle;
  memcpy(&raw_map_rotation_angle, &tmp_map_rotation_angle, sizeof(tmp_map_rotation_angle));
  if (raw_map_rotation_angle != 0) {
    total_size += 1 + 8;
  }

  // int32 map_id = 1;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapInfoOfPrograms::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapInfoOfPrograms::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapInfoOfPrograms::GetClassData() const { return &_class_data_; }


void MapInfoOfPrograms::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapInfoOfPrograms*>(&to_msg);
  auto& from = static_cast<const MapInfoOfPrograms&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.MapInfoOfPrograms)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rooms_clean_way_.MergeFrom(from._impl_.rooms_clean_way_);
  if (!from._internal_pbstream_file_name().empty()) {
    _this->_internal_set_pbstream_file_name(from._internal_pbstream_file_name());
  }
  if (from._internal_has_segment_map()) {
    _this->_internal_mutable_segment_map()->::LSLAM::MyOccupancyGrid::MergeFrom(
        from._internal_segment_map());
  }
  if (from._internal_has_division_line_info()) {
    _this->_internal_mutable_division_line_info()->::LSLAM::DivisionLineInfo::MergeFrom(
        from._internal_division_line_info());
  }
  if (from._internal_has_virtual_wall_info()) {
    _this->_internal_mutable_virtual_wall_info()->::LSLAM::VirtualWallInfo::MergeFrom(
        from._internal_virtual_wall_info());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_map_rotation_angle = from._internal_map_rotation_angle();
  uint64_t raw_map_rotation_angle;
  memcpy(&raw_map_rotation_angle, &tmp_map_rotation_angle, sizeof(tmp_map_rotation_angle));
  if (raw_map_rotation_angle != 0) {
    _this->_internal_set_map_rotation_angle(from._internal_map_rotation_angle());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapInfoOfPrograms::CopyFrom(const MapInfoOfPrograms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.MapInfoOfPrograms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfoOfPrograms::IsInitialized() const {
  return true;
}

void MapInfoOfPrograms::InternalSwap(MapInfoOfPrograms* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rooms_clean_way_.InternalSwap(&other->_impl_.rooms_clean_way_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pbstream_file_name_, lhs_arena,
      &other->_impl_.pbstream_file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapInfoOfPrograms, _impl_.map_id_)
      + sizeof(MapInfoOfPrograms::_impl_.map_id_)
      - PROTOBUF_FIELD_OFFSET(MapInfoOfPrograms, _impl_.segment_map_)>(
          reinterpret_cast<char*>(&_impl_.segment_map_),
          reinterpret_cast<char*>(&other->_impl_.segment_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapInfoOfPrograms::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ConfigurationItems_2eproto_getter, &descriptor_table_ConfigurationItems_2eproto_once,
      file_level_metadata_ConfigurationItems_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::ContinueCleanAtBreakPoint*
Arena::CreateMaybeMessage< ::LSLAM::ContinueCleanAtBreakPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::ContinueCleanAtBreakPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::MapInfo*
Arena::CreateMaybeMessage< ::LSLAM::MapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::MapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::DivisionLineInfo*
Arena::CreateMaybeMessage< ::LSLAM::DivisionLineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::DivisionLineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::VirtualWallInfo*
Arena::CreateMaybeMessage< ::LSLAM::VirtualWallInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::VirtualWallInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::ConfigurationItems*
Arena::CreateMaybeMessage< ::LSLAM::ConfigurationItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::ConfigurationItems >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::MapInfoOfPrograms*
Arena::CreateMaybeMessage< ::LSLAM::MapInfoOfPrograms >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::MapInfoOfPrograms >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
