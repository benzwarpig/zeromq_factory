// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapRotatePara.proto

#include "MapRotatePara.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR MapRotate::MapRotate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.theta_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapRotateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapRotateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapRotateDefaultTypeInternal() {}
  union {
    MapRotate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapRotateDefaultTypeInternal _MapRotate_default_instance_;
PROTOBUF_CONSTEXPR MapRotatePara::MapRotatePara(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_rotate_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapRotateParaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapRotateParaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapRotateParaDefaultTypeInternal() {}
  union {
    MapRotatePara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapRotateParaDefaultTypeInternal _MapRotatePara_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_MapRotatePara_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MapRotatePara_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MapRotatePara_2eproto = nullptr;

const uint32_t TableStruct_MapRotatePara_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapRotate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapRotate, _impl_.map_name_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapRotate, _impl_.theta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapRotatePara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapRotatePara, _impl_.map_rotate_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::MapRotate)},
  { 10, -1, -1, sizeof(::LSLAM::MapRotatePara)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_MapRotate_default_instance_._instance,
  &::LSLAM::_MapRotatePara_default_instance_._instance,
};

const char descriptor_table_protodef_MapRotatePara_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023MapRotatePara.proto\022\005LSLAM\",\n\tMapRotat"
  "e\022\020\n\010map_name\030\001 \001(\t\022\r\n\005theta\030\002 \001(\001\"5\n\rMa"
  "pRotatePara\022$\n\nmap_rotate\030\001 \003(\0132\020.LSLAM."
  "MapRotateb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_MapRotatePara_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MapRotatePara_2eproto = {
    false, false, 137, descriptor_table_protodef_MapRotatePara_2eproto,
    "MapRotatePara.proto",
    &descriptor_table_MapRotatePara_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_MapRotatePara_2eproto::offsets,
    file_level_metadata_MapRotatePara_2eproto, file_level_enum_descriptors_MapRotatePara_2eproto,
    file_level_service_descriptors_MapRotatePara_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MapRotatePara_2eproto_getter() {
  return &descriptor_table_MapRotatePara_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MapRotatePara_2eproto(&descriptor_table_MapRotatePara_2eproto);
namespace LSLAM {

// ===================================================================

class MapRotate::_Internal {
 public:
};

MapRotate::MapRotate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.MapRotate)
}
MapRotate::MapRotate(const MapRotate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapRotate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_name_){}
    , decltype(_impl_.theta_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_name().empty()) {
    _this->_impl_.map_name_.Set(from._internal_map_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.theta_ = from._impl_.theta_;
  // @@protoc_insertion_point(copy_constructor:LSLAM.MapRotate)
}

inline void MapRotate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_name_){}
    , decltype(_impl_.theta_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapRotate::~MapRotate() {
  // @@protoc_insertion_point(destructor:LSLAM.MapRotate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapRotate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_name_.Destroy();
}

void MapRotate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapRotate::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.MapRotate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_name_.ClearToEmpty();
  _impl_.theta_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapRotate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "LSLAM.MapRotate.map_name"));
        } else
          goto handle_unusual;
        continue;
      // double theta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapRotate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.MapRotate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_name = 1;
  if (!this->_internal_map_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LSLAM.MapRotate.map_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_name(), target);
  }

  // double theta = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_theta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.MapRotate)
  return target;
}

size_t MapRotate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.MapRotate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_name = 1;
  if (!this->_internal_map_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // double theta = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapRotate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapRotate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapRotate::GetClassData() const { return &_class_data_; }


void MapRotate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapRotate*>(&to_msg);
  auto& from = static_cast<const MapRotate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.MapRotate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map_name().empty()) {
    _this->_internal_set_map_name(from._internal_map_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = from._internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    _this->_internal_set_theta(from._internal_theta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapRotate::CopyFrom(const MapRotate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.MapRotate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRotate::IsInitialized() const {
  return true;
}

void MapRotate::InternalSwap(MapRotate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_name_, lhs_arena,
      &other->_impl_.map_name_, rhs_arena
  );
  swap(_impl_.theta_, other->_impl_.theta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRotate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MapRotatePara_2eproto_getter, &descriptor_table_MapRotatePara_2eproto_once,
      file_level_metadata_MapRotatePara_2eproto[0]);
}

// ===================================================================

class MapRotatePara::_Internal {
 public:
};

MapRotatePara::MapRotatePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.MapRotatePara)
}
MapRotatePara::MapRotatePara(const MapRotatePara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapRotatePara* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_rotate_){from._impl_.map_rotate_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LSLAM.MapRotatePara)
}

inline void MapRotatePara::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_rotate_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapRotatePara::~MapRotatePara() {
  // @@protoc_insertion_point(destructor:LSLAM.MapRotatePara)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapRotatePara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_rotate_.~RepeatedPtrField();
}

void MapRotatePara::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapRotatePara::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.MapRotatePara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_rotate_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapRotatePara::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .LSLAM.MapRotate map_rotate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_rotate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapRotatePara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.MapRotatePara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LSLAM.MapRotate map_rotate = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map_rotate_size()); i < n; i++) {
    const auto& repfield = this->_internal_map_rotate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.MapRotatePara)
  return target;
}

size_t MapRotatePara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.MapRotatePara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.MapRotate map_rotate = 1;
  total_size += 1UL * this->_internal_map_rotate_size();
  for (const auto& msg : this->_impl_.map_rotate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapRotatePara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapRotatePara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapRotatePara::GetClassData() const { return &_class_data_; }


void MapRotatePara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapRotatePara*>(&to_msg);
  auto& from = static_cast<const MapRotatePara&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.MapRotatePara)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_rotate_.MergeFrom(from._impl_.map_rotate_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapRotatePara::CopyFrom(const MapRotatePara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.MapRotatePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRotatePara::IsInitialized() const {
  return true;
}

void MapRotatePara::InternalSwap(MapRotatePara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_rotate_.InternalSwap(&other->_impl_.map_rotate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRotatePara::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MapRotatePara_2eproto_getter, &descriptor_table_MapRotatePara_2eproto_once,
      file_level_metadata_MapRotatePara_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::MapRotate*
Arena::CreateMaybeMessage< ::LSLAM::MapRotate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::MapRotate >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::MapRotatePara*
Arena::CreateMaybeMessage< ::LSLAM::MapRotatePara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::MapRotatePara >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
