// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TheKeyState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TheKeyState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TheKeyState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TheKeyState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TheKeyState_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TheKeyState_2eproto;
namespace LSLAM {
class TheKeyState;
struct TheKeyStateDefaultTypeInternal;
extern TheKeyStateDefaultTypeInternal _TheKeyState_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::TheKeyState* Arena::CreateMaybeMessage<::LSLAM::TheKeyState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

enum TheKeyState_KeyStateType : int {
  TheKeyState_KeyStateType_KeyIdle = 0,
  TheKeyState_KeyStateType_kKey1Up = 1,
  TheKeyState_KeyStateType_kKey2Up = 2,
  TheKeyState_KeyStateType_kKey1double = 3,
  TheKeyState_KeyStateType_kKey2double = 4,
  TheKeyState_KeyStateType_kKey1Long = 5,
  TheKeyState_KeyStateType_kKey2Long = 6,
  TheKeyState_KeyStateType_kKeyGropup = 7,
  TheKeyState_KeyStateType_TheKeyState_KeyStateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TheKeyState_KeyStateType_TheKeyState_KeyStateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TheKeyState_KeyStateType_IsValid(int value);
constexpr TheKeyState_KeyStateType TheKeyState_KeyStateType_KeyStateType_MIN = TheKeyState_KeyStateType_KeyIdle;
constexpr TheKeyState_KeyStateType TheKeyState_KeyStateType_KeyStateType_MAX = TheKeyState_KeyStateType_kKeyGropup;
constexpr int TheKeyState_KeyStateType_KeyStateType_ARRAYSIZE = TheKeyState_KeyStateType_KeyStateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TheKeyState_KeyStateType_descriptor();
template<typename T>
inline const std::string& TheKeyState_KeyStateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TheKeyState_KeyStateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TheKeyState_KeyStateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TheKeyState_KeyStateType_descriptor(), enum_t_value);
}
inline bool TheKeyState_KeyStateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TheKeyState_KeyStateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TheKeyState_KeyStateType>(
    TheKeyState_KeyStateType_descriptor(), name, value);
}
// ===================================================================

class TheKeyState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.TheKeyState) */ {
 public:
  inline TheKeyState() : TheKeyState(nullptr) {}
  ~TheKeyState() override;
  explicit PROTOBUF_CONSTEXPR TheKeyState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TheKeyState(const TheKeyState& from);
  TheKeyState(TheKeyState&& from) noexcept
    : TheKeyState() {
    *this = ::std::move(from);
  }

  inline TheKeyState& operator=(const TheKeyState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TheKeyState& operator=(TheKeyState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TheKeyState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TheKeyState* internal_default_instance() {
    return reinterpret_cast<const TheKeyState*>(
               &_TheKeyState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TheKeyState& a, TheKeyState& b) {
    a.Swap(&b);
  }
  inline void Swap(TheKeyState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TheKeyState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TheKeyState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TheKeyState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TheKeyState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TheKeyState& from) {
    TheKeyState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TheKeyState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.TheKeyState";
  }
  protected:
  explicit TheKeyState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TheKeyState_KeyStateType KeyStateType;
  static constexpr KeyStateType KeyIdle =
    TheKeyState_KeyStateType_KeyIdle;
  static constexpr KeyStateType kKey1Up =
    TheKeyState_KeyStateType_kKey1Up;
  static constexpr KeyStateType kKey2Up =
    TheKeyState_KeyStateType_kKey2Up;
  static constexpr KeyStateType kKey1double =
    TheKeyState_KeyStateType_kKey1double;
  static constexpr KeyStateType kKey2double =
    TheKeyState_KeyStateType_kKey2double;
  static constexpr KeyStateType kKey1Long =
    TheKeyState_KeyStateType_kKey1Long;
  static constexpr KeyStateType kKey2Long =
    TheKeyState_KeyStateType_kKey2Long;
  static constexpr KeyStateType kKeyGropup =
    TheKeyState_KeyStateType_kKeyGropup;
  static inline bool KeyStateType_IsValid(int value) {
    return TheKeyState_KeyStateType_IsValid(value);
  }
  static constexpr KeyStateType KeyStateType_MIN =
    TheKeyState_KeyStateType_KeyStateType_MIN;
  static constexpr KeyStateType KeyStateType_MAX =
    TheKeyState_KeyStateType_KeyStateType_MAX;
  static constexpr int KeyStateType_ARRAYSIZE =
    TheKeyState_KeyStateType_KeyStateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KeyStateType_descriptor() {
    return TheKeyState_KeyStateType_descriptor();
  }
  template<typename T>
  static inline const std::string& KeyStateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KeyStateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KeyStateType_Name.");
    return TheKeyState_KeyStateType_Name(enum_t_value);
  }
  static inline bool KeyStateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KeyStateType* value) {
    return TheKeyState_KeyStateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRobotKeyStateFieldNumber = 1,
    kPartnerKeyStateFieldNumber = 2,
  };
  // .LSLAM.TheKeyState.KeyStateType robot_key_state = 1;
  void clear_robot_key_state();
  ::LSLAM::TheKeyState_KeyStateType robot_key_state() const;
  void set_robot_key_state(::LSLAM::TheKeyState_KeyStateType value);
  private:
  ::LSLAM::TheKeyState_KeyStateType _internal_robot_key_state() const;
  void _internal_set_robot_key_state(::LSLAM::TheKeyState_KeyStateType value);
  public:

  // .LSLAM.TheKeyState.KeyStateType partner_key_state = 2;
  void clear_partner_key_state();
  ::LSLAM::TheKeyState_KeyStateType partner_key_state() const;
  void set_partner_key_state(::LSLAM::TheKeyState_KeyStateType value);
  private:
  ::LSLAM::TheKeyState_KeyStateType _internal_partner_key_state() const;
  void _internal_set_partner_key_state(::LSLAM::TheKeyState_KeyStateType value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.TheKeyState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int robot_key_state_;
    int partner_key_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TheKeyState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TheKeyState

// .LSLAM.TheKeyState.KeyStateType robot_key_state = 1;
inline void TheKeyState::clear_robot_key_state() {
  _impl_.robot_key_state_ = 0;
}
inline ::LSLAM::TheKeyState_KeyStateType TheKeyState::_internal_robot_key_state() const {
  return static_cast< ::LSLAM::TheKeyState_KeyStateType >(_impl_.robot_key_state_);
}
inline ::LSLAM::TheKeyState_KeyStateType TheKeyState::robot_key_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.TheKeyState.robot_key_state)
  return _internal_robot_key_state();
}
inline void TheKeyState::_internal_set_robot_key_state(::LSLAM::TheKeyState_KeyStateType value) {
  
  _impl_.robot_key_state_ = value;
}
inline void TheKeyState::set_robot_key_state(::LSLAM::TheKeyState_KeyStateType value) {
  _internal_set_robot_key_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.TheKeyState.robot_key_state)
}

// .LSLAM.TheKeyState.KeyStateType partner_key_state = 2;
inline void TheKeyState::clear_partner_key_state() {
  _impl_.partner_key_state_ = 0;
}
inline ::LSLAM::TheKeyState_KeyStateType TheKeyState::_internal_partner_key_state() const {
  return static_cast< ::LSLAM::TheKeyState_KeyStateType >(_impl_.partner_key_state_);
}
inline ::LSLAM::TheKeyState_KeyStateType TheKeyState::partner_key_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.TheKeyState.partner_key_state)
  return _internal_partner_key_state();
}
inline void TheKeyState::_internal_set_partner_key_state(::LSLAM::TheKeyState_KeyStateType value) {
  
  _impl_.partner_key_state_ = value;
}
inline void TheKeyState::set_partner_key_state(::LSLAM::TheKeyState_KeyStateType value) {
  _internal_set_partner_key_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.TheKeyState.partner_key_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LSLAM::TheKeyState_KeyStateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::TheKeyState_KeyStateType>() {
  return ::LSLAM::TheKeyState_KeyStateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TheKeyState_2eproto
