// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GraphEdge.proto

#include "GraphEdge.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR Edge::Edge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeDefaultTypeInternal _Edge_default_instance_;
PROTOBUF_CONSTEXPR GraphEdge::GraphEdge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphEdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphEdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphEdgeDefaultTypeInternal() {}
  union {
    GraphEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphEdgeDefaultTypeInternal _GraphEdge_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_GraphEdge_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_GraphEdge_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_GraphEdge_2eproto = nullptr;

const uint32_t TableStruct_GraphEdge_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::Edge, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Edge, _impl_.to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::GraphEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::GraphEdge, _impl_.edges_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::Edge)},
  { 10, -1, -1, sizeof(::LSLAM::GraphEdge)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_Edge_default_instance_._instance,
  &::LSLAM::_GraphEdge_default_instance_._instance,
};

const char descriptor_table_protodef_GraphEdge_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017GraphEdge.proto\022\005LSLAM\032\013Point.proto\"<\n"
  "\004Edge\022\032\n\004from\030\001 \001(\0132\014.LSLAM.Point\022\030\n\002to\030"
  "\002 \001(\0132\014.LSLAM.Point\"\'\n\tGraphEdge\022\032\n\005edge"
  "s\030\001 \003(\0132\013.LSLAM.Edgeb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_GraphEdge_2eproto_deps[1] = {
  &::descriptor_table_Point_2eproto,
};
static ::_pbi::once_flag descriptor_table_GraphEdge_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_GraphEdge_2eproto = {
    false, false, 148, descriptor_table_protodef_GraphEdge_2eproto,
    "GraphEdge.proto",
    &descriptor_table_GraphEdge_2eproto_once, descriptor_table_GraphEdge_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_GraphEdge_2eproto::offsets,
    file_level_metadata_GraphEdge_2eproto, file_level_enum_descriptors_GraphEdge_2eproto,
    file_level_service_descriptors_GraphEdge_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_GraphEdge_2eproto_getter() {
  return &descriptor_table_GraphEdge_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_GraphEdge_2eproto(&descriptor_table_GraphEdge_2eproto);
namespace LSLAM {

// ===================================================================

class Edge::_Internal {
 public:
  static const ::LSLAM::Point& from(const Edge* msg);
  static const ::LSLAM::Point& to(const Edge* msg);
};

const ::LSLAM::Point&
Edge::_Internal::from(const Edge* msg) {
  return *msg->_impl_.from_;
}
const ::LSLAM::Point&
Edge::_Internal::to(const Edge* msg) {
  return *msg->_impl_.to_;
}
void Edge::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
void Edge::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Edge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::LSLAM::Point(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::LSLAM::Point(*from._impl_.to_);
  }
  // @@protoc_insertion_point(copy_constructor:LSLAM.Edge)
}

inline void Edge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:LSLAM.Edge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void Edge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.Edge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.Point from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.Point to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.Edge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.Point from = 1;
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .LSLAM.Point to = 2;
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.Edge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LSLAM.Point from = 1;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // .LSLAM.Point to = 2;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Edge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge::GetClassData() const { return &_class_data_; }


void Edge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Edge*>(&to_msg);
  auto& from = static_cast<const Edge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.Edge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::LSLAM::Point::MergeFrom(
        from._internal_from());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::LSLAM::Point::MergeFrom(
        from._internal_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, _impl_.to_)
      + sizeof(Edge::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(Edge, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GraphEdge_2eproto_getter, &descriptor_table_GraphEdge_2eproto_once,
      file_level_metadata_GraphEdge_2eproto[0]);
}

// ===================================================================

class GraphEdge::_Internal {
 public:
};

GraphEdge::GraphEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.GraphEdge)
}
GraphEdge::GraphEdge(const GraphEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphEdge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_){from._impl_.edges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LSLAM.GraphEdge)
}

inline void GraphEdge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GraphEdge::~GraphEdge() {
  // @@protoc_insertion_point(destructor:LSLAM.GraphEdge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edges_.~RepeatedPtrField();
}

void GraphEdge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.GraphEdge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphEdge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .LSLAM.Edge edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphEdge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.GraphEdge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LSLAM.Edge edges = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.GraphEdge)
  return target;
}

size_t GraphEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.GraphEdge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.Edge edges = 1;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_impl_.edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphEdge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphEdge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphEdge::GetClassData() const { return &_class_data_; }


void GraphEdge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphEdge*>(&to_msg);
  auto& from = static_cast<const GraphEdge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.GraphEdge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edges_.MergeFrom(from._impl_.edges_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphEdge::CopyFrom(const GraphEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.GraphEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphEdge::IsInitialized() const {
  return true;
}

void GraphEdge::InternalSwap(GraphEdge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.edges_.InternalSwap(&other->_impl_.edges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphEdge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GraphEdge_2eproto_getter, &descriptor_table_GraphEdge_2eproto_once,
      file_level_metadata_GraphEdge_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::Edge*
Arena::CreateMaybeMessage< ::LSLAM::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::GraphEdge*
Arena::CreateMaybeMessage< ::LSLAM::GraphEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::GraphEdge >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
