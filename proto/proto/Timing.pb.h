// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Timing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Timing_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Timing_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Timing_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Timing_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Timing_2eproto;
namespace LSLAM {
class Timing;
struct TimingDefaultTypeInternal;
extern TimingDefaultTypeInternal _Timing_default_instance_;
class TimingSettingConfigurationFile;
struct TimingSettingConfigurationFileDefaultTypeInternal;
extern TimingSettingConfigurationFileDefaultTypeInternal _TimingSettingConfigurationFile_default_instance_;
class TuyaDoNotDisturb;
struct TuyaDoNotDisturbDefaultTypeInternal;
extern TuyaDoNotDisturbDefaultTypeInternal _TuyaDoNotDisturb_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::Timing* Arena::CreateMaybeMessage<::LSLAM::Timing>(Arena*);
template<> ::LSLAM::TimingSettingConfigurationFile* Arena::CreateMaybeMessage<::LSLAM::TimingSettingConfigurationFile>(Arena*);
template<> ::LSLAM::TuyaDoNotDisturb* Arena::CreateMaybeMessage<::LSLAM::TuyaDoNotDisturb>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

enum TimingFanMotorLevel : int {
  TIMING_FAN_MOTOR_CLOSE = 0,
  TIMING_FAN_MOTOR_MUTE = 1,
  TIMING_FAN_MOTOR_NORMAL = 2,
  TIMING_FAN_MOTOR_STRONG = 3,
  TIMING_FAN_MOTOR_SUPER_STRONG = 4,
  TIMING_FAN_MOTOR_NOT_SET = 5,
  TimingFanMotorLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TimingFanMotorLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TimingFanMotorLevel_IsValid(int value);
constexpr TimingFanMotorLevel TimingFanMotorLevel_MIN = TIMING_FAN_MOTOR_CLOSE;
constexpr TimingFanMotorLevel TimingFanMotorLevel_MAX = TIMING_FAN_MOTOR_NOT_SET;
constexpr int TimingFanMotorLevel_ARRAYSIZE = TimingFanMotorLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimingFanMotorLevel_descriptor();
template<typename T>
inline const std::string& TimingFanMotorLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimingFanMotorLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimingFanMotorLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimingFanMotorLevel_descriptor(), enum_t_value);
}
inline bool TimingFanMotorLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TimingFanMotorLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimingFanMotorLevel>(
    TimingFanMotorLevel_descriptor(), name, value);
}
enum TimingWaterBoxLevel : int {
  TIMING_WATER_BOX_LEVEL_CLOSE = 0,
  TIMING_WATER_BOX_LEVEL_ONE = 1,
  TIMING_WATER_BOX_LEVEL_TWO = 2,
  TIMING_WATER_BOX_LEVEL_THREE = 3,
  TIMING_WATER_BOX_LEVEL_NOT_SET = 4,
  TimingWaterBoxLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TimingWaterBoxLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TimingWaterBoxLevel_IsValid(int value);
constexpr TimingWaterBoxLevel TimingWaterBoxLevel_MIN = TIMING_WATER_BOX_LEVEL_CLOSE;
constexpr TimingWaterBoxLevel TimingWaterBoxLevel_MAX = TIMING_WATER_BOX_LEVEL_NOT_SET;
constexpr int TimingWaterBoxLevel_ARRAYSIZE = TimingWaterBoxLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimingWaterBoxLevel_descriptor();
template<typename T>
inline const std::string& TimingWaterBoxLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimingWaterBoxLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimingWaterBoxLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimingWaterBoxLevel_descriptor(), enum_t_value);
}
inline bool TimingWaterBoxLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TimingWaterBoxLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimingWaterBoxLevel>(
    TimingWaterBoxLevel_descriptor(), name, value);
}
enum TimingCleanMode : int {
  TIMING_CLEAN_AND_SWEEP = 0,
  TIMING_CLEAN = 1,
  TIMING_SWEEP = 2,
  TimingCleanMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TimingCleanMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TimingCleanMode_IsValid(int value);
constexpr TimingCleanMode TimingCleanMode_MIN = TIMING_CLEAN_AND_SWEEP;
constexpr TimingCleanMode TimingCleanMode_MAX = TIMING_SWEEP;
constexpr int TimingCleanMode_ARRAYSIZE = TimingCleanMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimingCleanMode_descriptor();
template<typename T>
inline const std::string& TimingCleanMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimingCleanMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimingCleanMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimingCleanMode_descriptor(), enum_t_value);
}
inline bool TimingCleanMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TimingCleanMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimingCleanMode>(
    TimingCleanMode_descriptor(), name, value);
}
// ===================================================================

class Timing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.Timing) */ {
 public:
  inline Timing() : Timing(nullptr) {}
  ~Timing() override;
  explicit PROTOBUF_CONSTEXPR Timing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timing(const Timing& from);
  Timing(Timing&& from) noexcept
    : Timing() {
    *this = ::std::move(from);
  }

  inline Timing& operator=(const Timing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timing& operator=(Timing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timing& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timing* internal_default_instance() {
    return reinterpret_cast<const Timing*>(
               &_Timing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Timing& a, Timing& b) {
    a.Swap(&b);
  }
  inline void Swap(Timing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Timing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Timing& from) {
    Timing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.Timing";
  }
  protected:
  explicit Timing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 6,
    kIsEffectiveFieldNumber = 1,
    kTimingWeekFieldNumber = 2,
    kExecutionTimeFieldNumber = 3,
    kExecutionDateFieldNumber = 4,
    kRoomNumberFieldNumber = 5,
    kCleanModeFieldNumber = 7,
    kFanMotorLevelFieldNumber = 8,
    kWaterBoxLevelFieldNumber = 9,
    kCleanNumberFieldNumber = 10,
  };
  // repeated int32 room_id = 6;
  int room_id_size() const;
  private:
  int _internal_room_id_size() const;
  public:
  void clear_room_id();
  private:
  int32_t _internal_room_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_room_id() const;
  void _internal_add_room_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_room_id();
  public:
  int32_t room_id(int index) const;
  void set_room_id(int index, int32_t value);
  void add_room_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      room_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_room_id();

  // bool is_effective = 1;
  void clear_is_effective();
  bool is_effective() const;
  void set_is_effective(bool value);
  private:
  bool _internal_is_effective() const;
  void _internal_set_is_effective(bool value);
  public:

  // int32 timing_week = 2;
  void clear_timing_week();
  int32_t timing_week() const;
  void set_timing_week(int32_t value);
  private:
  int32_t _internal_timing_week() const;
  void _internal_set_timing_week(int32_t value);
  public:

  // int32 execution_time = 3;
  void clear_execution_time();
  int32_t execution_time() const;
  void set_execution_time(int32_t value);
  private:
  int32_t _internal_execution_time() const;
  void _internal_set_execution_time(int32_t value);
  public:

  // int32 execution_date = 4;
  void clear_execution_date();
  int32_t execution_date() const;
  void set_execution_date(int32_t value);
  private:
  int32_t _internal_execution_date() const;
  void _internal_set_execution_date(int32_t value);
  public:

  // int32 room_number = 5;
  void clear_room_number();
  int32_t room_number() const;
  void set_room_number(int32_t value);
  private:
  int32_t _internal_room_number() const;
  void _internal_set_room_number(int32_t value);
  public:

  // .LSLAM.TimingCleanMode clean_mode = 7;
  void clear_clean_mode();
  ::LSLAM::TimingCleanMode clean_mode() const;
  void set_clean_mode(::LSLAM::TimingCleanMode value);
  private:
  ::LSLAM::TimingCleanMode _internal_clean_mode() const;
  void _internal_set_clean_mode(::LSLAM::TimingCleanMode value);
  public:

  // .LSLAM.TimingFanMotorLevel fan_motor_level = 8;
  void clear_fan_motor_level();
  ::LSLAM::TimingFanMotorLevel fan_motor_level() const;
  void set_fan_motor_level(::LSLAM::TimingFanMotorLevel value);
  private:
  ::LSLAM::TimingFanMotorLevel _internal_fan_motor_level() const;
  void _internal_set_fan_motor_level(::LSLAM::TimingFanMotorLevel value);
  public:

  // .LSLAM.TimingWaterBoxLevel water_box_level = 9;
  void clear_water_box_level();
  ::LSLAM::TimingWaterBoxLevel water_box_level() const;
  void set_water_box_level(::LSLAM::TimingWaterBoxLevel value);
  private:
  ::LSLAM::TimingWaterBoxLevel _internal_water_box_level() const;
  void _internal_set_water_box_level(::LSLAM::TimingWaterBoxLevel value);
  public:

  // int32 clean_number = 10;
  void clear_clean_number();
  int32_t clean_number() const;
  void set_clean_number(int32_t value);
  private:
  int32_t _internal_clean_number() const;
  void _internal_set_clean_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.Timing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _room_id_cached_byte_size_;
    bool is_effective_;
    int32_t timing_week_;
    int32_t execution_time_;
    int32_t execution_date_;
    int32_t room_number_;
    int clean_mode_;
    int fan_motor_level_;
    int water_box_level_;
    int32_t clean_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Timing_2eproto;
};
// -------------------------------------------------------------------

class TuyaDoNotDisturb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.TuyaDoNotDisturb) */ {
 public:
  inline TuyaDoNotDisturb() : TuyaDoNotDisturb(nullptr) {}
  ~TuyaDoNotDisturb() override;
  explicit PROTOBUF_CONSTEXPR TuyaDoNotDisturb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuyaDoNotDisturb(const TuyaDoNotDisturb& from);
  TuyaDoNotDisturb(TuyaDoNotDisturb&& from) noexcept
    : TuyaDoNotDisturb() {
    *this = ::std::move(from);
  }

  inline TuyaDoNotDisturb& operator=(const TuyaDoNotDisturb& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuyaDoNotDisturb& operator=(TuyaDoNotDisturb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TuyaDoNotDisturb& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuyaDoNotDisturb* internal_default_instance() {
    return reinterpret_cast<const TuyaDoNotDisturb*>(
               &_TuyaDoNotDisturb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TuyaDoNotDisturb& a, TuyaDoNotDisturb& b) {
    a.Swap(&b);
  }
  inline void Swap(TuyaDoNotDisturb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuyaDoNotDisturb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TuyaDoNotDisturb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TuyaDoNotDisturb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TuyaDoNotDisturb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TuyaDoNotDisturb& from) {
    TuyaDoNotDisturb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuyaDoNotDisturb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.TuyaDoNotDisturb";
  }
  protected:
  explicit TuyaDoNotDisturb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayFieldNumber = 4,
    kTimeZoneFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kDoNotDisturbSwitchFieldNumber = 5,
  };
  // repeated int32 day = 4;
  int day_size() const;
  private:
  int _internal_day_size() const;
  public:
  void clear_day();
  private:
  int32_t _internal_day(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_day() const;
  void _internal_add_day(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_day();
  public:
  int32_t day(int index) const;
  void set_day(int index, int32_t value);
  void add_day(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      day() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_day();

  // int32 time_zone = 1;
  void clear_time_zone();
  int32_t time_zone() const;
  void set_time_zone(int32_t value);
  private:
  int32_t _internal_time_zone() const;
  void _internal_set_time_zone(int32_t value);
  public:

  // int32 start_time = 2;
  void clear_start_time();
  int32_t start_time() const;
  void set_start_time(int32_t value);
  private:
  int32_t _internal_start_time() const;
  void _internal_set_start_time(int32_t value);
  public:

  // int32 end_time = 3;
  void clear_end_time();
  int32_t end_time() const;
  void set_end_time(int32_t value);
  private:
  int32_t _internal_end_time() const;
  void _internal_set_end_time(int32_t value);
  public:

  // int32 do_not_disturb_switch = 5;
  void clear_do_not_disturb_switch();
  int32_t do_not_disturb_switch() const;
  void set_do_not_disturb_switch(int32_t value);
  private:
  int32_t _internal_do_not_disturb_switch() const;
  void _internal_set_do_not_disturb_switch(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.TuyaDoNotDisturb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > day_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _day_cached_byte_size_;
    int32_t time_zone_;
    int32_t start_time_;
    int32_t end_time_;
    int32_t do_not_disturb_switch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Timing_2eproto;
};
// -------------------------------------------------------------------

class TimingSettingConfigurationFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.TimingSettingConfigurationFile) */ {
 public:
  inline TimingSettingConfigurationFile() : TimingSettingConfigurationFile(nullptr) {}
  ~TimingSettingConfigurationFile() override;
  explicit PROTOBUF_CONSTEXPR TimingSettingConfigurationFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimingSettingConfigurationFile(const TimingSettingConfigurationFile& from);
  TimingSettingConfigurationFile(TimingSettingConfigurationFile&& from) noexcept
    : TimingSettingConfigurationFile() {
    *this = ::std::move(from);
  }

  inline TimingSettingConfigurationFile& operator=(const TimingSettingConfigurationFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimingSettingConfigurationFile& operator=(TimingSettingConfigurationFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimingSettingConfigurationFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimingSettingConfigurationFile* internal_default_instance() {
    return reinterpret_cast<const TimingSettingConfigurationFile*>(
               &_TimingSettingConfigurationFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimingSettingConfigurationFile& a, TimingSettingConfigurationFile& b) {
    a.Swap(&b);
  }
  inline void Swap(TimingSettingConfigurationFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimingSettingConfigurationFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimingSettingConfigurationFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimingSettingConfigurationFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimingSettingConfigurationFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimingSettingConfigurationFile& from) {
    TimingSettingConfigurationFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimingSettingConfigurationFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.TimingSettingConfigurationFile";
  }
  protected:
  explicit TimingSettingConfigurationFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetTimingFieldNumber = 1,
    kSetTuyaDoNotDisturbFieldNumber = 4,
    kTimeZoneFieldNumber = 2,
    kTimingNumberFieldNumber = 3,
    kDefaultFanMotorLevelFieldNumber = 6,
    kDefaultWaterBoxLevelFieldNumber = 7,
    kSetBreakPointSwitchFieldNumber = 5,
    kAutoBoostSwitchFieldNumber = 9,
    kCarpetCleanPreferFieldNumber = 8,
  };
  // repeated .LSLAM.Timing set_timing = 1;
  int set_timing_size() const;
  private:
  int _internal_set_timing_size() const;
  public:
  void clear_set_timing();
  ::LSLAM::Timing* mutable_set_timing(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Timing >*
      mutable_set_timing();
  private:
  const ::LSLAM::Timing& _internal_set_timing(int index) const;
  ::LSLAM::Timing* _internal_add_set_timing();
  public:
  const ::LSLAM::Timing& set_timing(int index) const;
  ::LSLAM::Timing* add_set_timing();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Timing >&
      set_timing() const;

  // .LSLAM.TuyaDoNotDisturb set_tuya_do_not_disturb = 4;
  bool has_set_tuya_do_not_disturb() const;
  private:
  bool _internal_has_set_tuya_do_not_disturb() const;
  public:
  void clear_set_tuya_do_not_disturb();
  const ::LSLAM::TuyaDoNotDisturb& set_tuya_do_not_disturb() const;
  PROTOBUF_NODISCARD ::LSLAM::TuyaDoNotDisturb* release_set_tuya_do_not_disturb();
  ::LSLAM::TuyaDoNotDisturb* mutable_set_tuya_do_not_disturb();
  void set_allocated_set_tuya_do_not_disturb(::LSLAM::TuyaDoNotDisturb* set_tuya_do_not_disturb);
  private:
  const ::LSLAM::TuyaDoNotDisturb& _internal_set_tuya_do_not_disturb() const;
  ::LSLAM::TuyaDoNotDisturb* _internal_mutable_set_tuya_do_not_disturb();
  public:
  void unsafe_arena_set_allocated_set_tuya_do_not_disturb(
      ::LSLAM::TuyaDoNotDisturb* set_tuya_do_not_disturb);
  ::LSLAM::TuyaDoNotDisturb* unsafe_arena_release_set_tuya_do_not_disturb();

  // int32 time_zone = 2;
  void clear_time_zone();
  int32_t time_zone() const;
  void set_time_zone(int32_t value);
  private:
  int32_t _internal_time_zone() const;
  void _internal_set_time_zone(int32_t value);
  public:

  // int32 timing_number = 3;
  void clear_timing_number();
  int32_t timing_number() const;
  void set_timing_number(int32_t value);
  private:
  int32_t _internal_timing_number() const;
  void _internal_set_timing_number(int32_t value);
  public:

  // .LSLAM.TimingFanMotorLevel default_fan_motor_level = 6;
  void clear_default_fan_motor_level();
  ::LSLAM::TimingFanMotorLevel default_fan_motor_level() const;
  void set_default_fan_motor_level(::LSLAM::TimingFanMotorLevel value);
  private:
  ::LSLAM::TimingFanMotorLevel _internal_default_fan_motor_level() const;
  void _internal_set_default_fan_motor_level(::LSLAM::TimingFanMotorLevel value);
  public:

  // .LSLAM.TimingWaterBoxLevel default_water_box_level = 7;
  void clear_default_water_box_level();
  ::LSLAM::TimingWaterBoxLevel default_water_box_level() const;
  void set_default_water_box_level(::LSLAM::TimingWaterBoxLevel value);
  private:
  ::LSLAM::TimingWaterBoxLevel _internal_default_water_box_level() const;
  void _internal_set_default_water_box_level(::LSLAM::TimingWaterBoxLevel value);
  public:

  // bool set_break_point_switch = 5;
  void clear_set_break_point_switch();
  bool set_break_point_switch() const;
  void set_set_break_point_switch(bool value);
  private:
  bool _internal_set_break_point_switch() const;
  void _internal_set_set_break_point_switch(bool value);
  public:

  // bool auto_boost_switch = 9;
  void clear_auto_boost_switch();
  bool auto_boost_switch() const;
  void set_auto_boost_switch(bool value);
  private:
  bool _internal_auto_boost_switch() const;
  void _internal_set_auto_boost_switch(bool value);
  public:

  // int32 carpet_clean_prefer = 8;
  void clear_carpet_clean_prefer();
  int32_t carpet_clean_prefer() const;
  void set_carpet_clean_prefer(int32_t value);
  private:
  int32_t _internal_carpet_clean_prefer() const;
  void _internal_set_carpet_clean_prefer(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.TimingSettingConfigurationFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Timing > set_timing_;
    ::LSLAM::TuyaDoNotDisturb* set_tuya_do_not_disturb_;
    int32_t time_zone_;
    int32_t timing_number_;
    int default_fan_motor_level_;
    int default_water_box_level_;
    bool set_break_point_switch_;
    bool auto_boost_switch_;
    int32_t carpet_clean_prefer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Timing_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Timing

// bool is_effective = 1;
inline void Timing::clear_is_effective() {
  _impl_.is_effective_ = false;
}
inline bool Timing::_internal_is_effective() const {
  return _impl_.is_effective_;
}
inline bool Timing::is_effective() const {
  // @@protoc_insertion_point(field_get:LSLAM.Timing.is_effective)
  return _internal_is_effective();
}
inline void Timing::_internal_set_is_effective(bool value) {
  
  _impl_.is_effective_ = value;
}
inline void Timing::set_is_effective(bool value) {
  _internal_set_is_effective(value);
  // @@protoc_insertion_point(field_set:LSLAM.Timing.is_effective)
}

// int32 timing_week = 2;
inline void Timing::clear_timing_week() {
  _impl_.timing_week_ = 0;
}
inline int32_t Timing::_internal_timing_week() const {
  return _impl_.timing_week_;
}
inline int32_t Timing::timing_week() const {
  // @@protoc_insertion_point(field_get:LSLAM.Timing.timing_week)
  return _internal_timing_week();
}
inline void Timing::_internal_set_timing_week(int32_t value) {
  
  _impl_.timing_week_ = value;
}
inline void Timing::set_timing_week(int32_t value) {
  _internal_set_timing_week(value);
  // @@protoc_insertion_point(field_set:LSLAM.Timing.timing_week)
}

// int32 execution_time = 3;
inline void Timing::clear_execution_time() {
  _impl_.execution_time_ = 0;
}
inline int32_t Timing::_internal_execution_time() const {
  return _impl_.execution_time_;
}
inline int32_t Timing::execution_time() const {
  // @@protoc_insertion_point(field_get:LSLAM.Timing.execution_time)
  return _internal_execution_time();
}
inline void Timing::_internal_set_execution_time(int32_t value) {
  
  _impl_.execution_time_ = value;
}
inline void Timing::set_execution_time(int32_t value) {
  _internal_set_execution_time(value);
  // @@protoc_insertion_point(field_set:LSLAM.Timing.execution_time)
}

// int32 execution_date = 4;
inline void Timing::clear_execution_date() {
  _impl_.execution_date_ = 0;
}
inline int32_t Timing::_internal_execution_date() const {
  return _impl_.execution_date_;
}
inline int32_t Timing::execution_date() const {
  // @@protoc_insertion_point(field_get:LSLAM.Timing.execution_date)
  return _internal_execution_date();
}
inline void Timing::_internal_set_execution_date(int32_t value) {
  
  _impl_.execution_date_ = value;
}
inline void Timing::set_execution_date(int32_t value) {
  _internal_set_execution_date(value);
  // @@protoc_insertion_point(field_set:LSLAM.Timing.execution_date)
}

// int32 room_number = 5;
inline void Timing::clear_room_number() {
  _impl_.room_number_ = 0;
}
inline int32_t Timing::_internal_room_number() const {
  return _impl_.room_number_;
}
inline int32_t Timing::room_number() const {
  // @@protoc_insertion_point(field_get:LSLAM.Timing.room_number)
  return _internal_room_number();
}
inline void Timing::_internal_set_room_number(int32_t value) {
  
  _impl_.room_number_ = value;
}
inline void Timing::set_room_number(int32_t value) {
  _internal_set_room_number(value);
  // @@protoc_insertion_point(field_set:LSLAM.Timing.room_number)
}

// repeated int32 room_id = 6;
inline int Timing::_internal_room_id_size() const {
  return _impl_.room_id_.size();
}
inline int Timing::room_id_size() const {
  return _internal_room_id_size();
}
inline void Timing::clear_room_id() {
  _impl_.room_id_.Clear();
}
inline int32_t Timing::_internal_room_id(int index) const {
  return _impl_.room_id_.Get(index);
}
inline int32_t Timing::room_id(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.Timing.room_id)
  return _internal_room_id(index);
}
inline void Timing::set_room_id(int index, int32_t value) {
  _impl_.room_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.Timing.room_id)
}
inline void Timing::_internal_add_room_id(int32_t value) {
  _impl_.room_id_.Add(value);
}
inline void Timing::add_room_id(int32_t value) {
  _internal_add_room_id(value);
  // @@protoc_insertion_point(field_add:LSLAM.Timing.room_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Timing::_internal_room_id() const {
  return _impl_.room_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Timing::room_id() const {
  // @@protoc_insertion_point(field_list:LSLAM.Timing.room_id)
  return _internal_room_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Timing::_internal_mutable_room_id() {
  return &_impl_.room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Timing::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.Timing.room_id)
  return _internal_mutable_room_id();
}

// .LSLAM.TimingCleanMode clean_mode = 7;
inline void Timing::clear_clean_mode() {
  _impl_.clean_mode_ = 0;
}
inline ::LSLAM::TimingCleanMode Timing::_internal_clean_mode() const {
  return static_cast< ::LSLAM::TimingCleanMode >(_impl_.clean_mode_);
}
inline ::LSLAM::TimingCleanMode Timing::clean_mode() const {
  // @@protoc_insertion_point(field_get:LSLAM.Timing.clean_mode)
  return _internal_clean_mode();
}
inline void Timing::_internal_set_clean_mode(::LSLAM::TimingCleanMode value) {
  
  _impl_.clean_mode_ = value;
}
inline void Timing::set_clean_mode(::LSLAM::TimingCleanMode value) {
  _internal_set_clean_mode(value);
  // @@protoc_insertion_point(field_set:LSLAM.Timing.clean_mode)
}

// .LSLAM.TimingFanMotorLevel fan_motor_level = 8;
inline void Timing::clear_fan_motor_level() {
  _impl_.fan_motor_level_ = 0;
}
inline ::LSLAM::TimingFanMotorLevel Timing::_internal_fan_motor_level() const {
  return static_cast< ::LSLAM::TimingFanMotorLevel >(_impl_.fan_motor_level_);
}
inline ::LSLAM::TimingFanMotorLevel Timing::fan_motor_level() const {
  // @@protoc_insertion_point(field_get:LSLAM.Timing.fan_motor_level)
  return _internal_fan_motor_level();
}
inline void Timing::_internal_set_fan_motor_level(::LSLAM::TimingFanMotorLevel value) {
  
  _impl_.fan_motor_level_ = value;
}
inline void Timing::set_fan_motor_level(::LSLAM::TimingFanMotorLevel value) {
  _internal_set_fan_motor_level(value);
  // @@protoc_insertion_point(field_set:LSLAM.Timing.fan_motor_level)
}

// .LSLAM.TimingWaterBoxLevel water_box_level = 9;
inline void Timing::clear_water_box_level() {
  _impl_.water_box_level_ = 0;
}
inline ::LSLAM::TimingWaterBoxLevel Timing::_internal_water_box_level() const {
  return static_cast< ::LSLAM::TimingWaterBoxLevel >(_impl_.water_box_level_);
}
inline ::LSLAM::TimingWaterBoxLevel Timing::water_box_level() const {
  // @@protoc_insertion_point(field_get:LSLAM.Timing.water_box_level)
  return _internal_water_box_level();
}
inline void Timing::_internal_set_water_box_level(::LSLAM::TimingWaterBoxLevel value) {
  
  _impl_.water_box_level_ = value;
}
inline void Timing::set_water_box_level(::LSLAM::TimingWaterBoxLevel value) {
  _internal_set_water_box_level(value);
  // @@protoc_insertion_point(field_set:LSLAM.Timing.water_box_level)
}

// int32 clean_number = 10;
inline void Timing::clear_clean_number() {
  _impl_.clean_number_ = 0;
}
inline int32_t Timing::_internal_clean_number() const {
  return _impl_.clean_number_;
}
inline int32_t Timing::clean_number() const {
  // @@protoc_insertion_point(field_get:LSLAM.Timing.clean_number)
  return _internal_clean_number();
}
inline void Timing::_internal_set_clean_number(int32_t value) {
  
  _impl_.clean_number_ = value;
}
inline void Timing::set_clean_number(int32_t value) {
  _internal_set_clean_number(value);
  // @@protoc_insertion_point(field_set:LSLAM.Timing.clean_number)
}

// -------------------------------------------------------------------

// TuyaDoNotDisturb

// int32 time_zone = 1;
inline void TuyaDoNotDisturb::clear_time_zone() {
  _impl_.time_zone_ = 0;
}
inline int32_t TuyaDoNotDisturb::_internal_time_zone() const {
  return _impl_.time_zone_;
}
inline int32_t TuyaDoNotDisturb::time_zone() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaDoNotDisturb.time_zone)
  return _internal_time_zone();
}
inline void TuyaDoNotDisturb::_internal_set_time_zone(int32_t value) {
  
  _impl_.time_zone_ = value;
}
inline void TuyaDoNotDisturb::set_time_zone(int32_t value) {
  _internal_set_time_zone(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaDoNotDisturb.time_zone)
}

// int32 start_time = 2;
inline void TuyaDoNotDisturb::clear_start_time() {
  _impl_.start_time_ = 0;
}
inline int32_t TuyaDoNotDisturb::_internal_start_time() const {
  return _impl_.start_time_;
}
inline int32_t TuyaDoNotDisturb::start_time() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaDoNotDisturb.start_time)
  return _internal_start_time();
}
inline void TuyaDoNotDisturb::_internal_set_start_time(int32_t value) {
  
  _impl_.start_time_ = value;
}
inline void TuyaDoNotDisturb::set_start_time(int32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaDoNotDisturb.start_time)
}

// int32 end_time = 3;
inline void TuyaDoNotDisturb::clear_end_time() {
  _impl_.end_time_ = 0;
}
inline int32_t TuyaDoNotDisturb::_internal_end_time() const {
  return _impl_.end_time_;
}
inline int32_t TuyaDoNotDisturb::end_time() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaDoNotDisturb.end_time)
  return _internal_end_time();
}
inline void TuyaDoNotDisturb::_internal_set_end_time(int32_t value) {
  
  _impl_.end_time_ = value;
}
inline void TuyaDoNotDisturb::set_end_time(int32_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaDoNotDisturb.end_time)
}

// repeated int32 day = 4;
inline int TuyaDoNotDisturb::_internal_day_size() const {
  return _impl_.day_.size();
}
inline int TuyaDoNotDisturb::day_size() const {
  return _internal_day_size();
}
inline void TuyaDoNotDisturb::clear_day() {
  _impl_.day_.Clear();
}
inline int32_t TuyaDoNotDisturb::_internal_day(int index) const {
  return _impl_.day_.Get(index);
}
inline int32_t TuyaDoNotDisturb::day(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaDoNotDisturb.day)
  return _internal_day(index);
}
inline void TuyaDoNotDisturb::set_day(int index, int32_t value) {
  _impl_.day_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaDoNotDisturb.day)
}
inline void TuyaDoNotDisturb::_internal_add_day(int32_t value) {
  _impl_.day_.Add(value);
}
inline void TuyaDoNotDisturb::add_day(int32_t value) {
  _internal_add_day(value);
  // @@protoc_insertion_point(field_add:LSLAM.TuyaDoNotDisturb.day)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaDoNotDisturb::_internal_day() const {
  return _impl_.day_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TuyaDoNotDisturb::day() const {
  // @@protoc_insertion_point(field_list:LSLAM.TuyaDoNotDisturb.day)
  return _internal_day();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaDoNotDisturb::_internal_mutable_day() {
  return &_impl_.day_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TuyaDoNotDisturb::mutable_day() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TuyaDoNotDisturb.day)
  return _internal_mutable_day();
}

// int32 do_not_disturb_switch = 5;
inline void TuyaDoNotDisturb::clear_do_not_disturb_switch() {
  _impl_.do_not_disturb_switch_ = 0;
}
inline int32_t TuyaDoNotDisturb::_internal_do_not_disturb_switch() const {
  return _impl_.do_not_disturb_switch_;
}
inline int32_t TuyaDoNotDisturb::do_not_disturb_switch() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaDoNotDisturb.do_not_disturb_switch)
  return _internal_do_not_disturb_switch();
}
inline void TuyaDoNotDisturb::_internal_set_do_not_disturb_switch(int32_t value) {
  
  _impl_.do_not_disturb_switch_ = value;
}
inline void TuyaDoNotDisturb::set_do_not_disturb_switch(int32_t value) {
  _internal_set_do_not_disturb_switch(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaDoNotDisturb.do_not_disturb_switch)
}

// -------------------------------------------------------------------

// TimingSettingConfigurationFile

// repeated .LSLAM.Timing set_timing = 1;
inline int TimingSettingConfigurationFile::_internal_set_timing_size() const {
  return _impl_.set_timing_.size();
}
inline int TimingSettingConfigurationFile::set_timing_size() const {
  return _internal_set_timing_size();
}
inline void TimingSettingConfigurationFile::clear_set_timing() {
  _impl_.set_timing_.Clear();
}
inline ::LSLAM::Timing* TimingSettingConfigurationFile::mutable_set_timing(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.TimingSettingConfigurationFile.set_timing)
  return _impl_.set_timing_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Timing >*
TimingSettingConfigurationFile::mutable_set_timing() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.TimingSettingConfigurationFile.set_timing)
  return &_impl_.set_timing_;
}
inline const ::LSLAM::Timing& TimingSettingConfigurationFile::_internal_set_timing(int index) const {
  return _impl_.set_timing_.Get(index);
}
inline const ::LSLAM::Timing& TimingSettingConfigurationFile::set_timing(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.TimingSettingConfigurationFile.set_timing)
  return _internal_set_timing(index);
}
inline ::LSLAM::Timing* TimingSettingConfigurationFile::_internal_add_set_timing() {
  return _impl_.set_timing_.Add();
}
inline ::LSLAM::Timing* TimingSettingConfigurationFile::add_set_timing() {
  ::LSLAM::Timing* _add = _internal_add_set_timing();
  // @@protoc_insertion_point(field_add:LSLAM.TimingSettingConfigurationFile.set_timing)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Timing >&
TimingSettingConfigurationFile::set_timing() const {
  // @@protoc_insertion_point(field_list:LSLAM.TimingSettingConfigurationFile.set_timing)
  return _impl_.set_timing_;
}

// int32 time_zone = 2;
inline void TimingSettingConfigurationFile::clear_time_zone() {
  _impl_.time_zone_ = 0;
}
inline int32_t TimingSettingConfigurationFile::_internal_time_zone() const {
  return _impl_.time_zone_;
}
inline int32_t TimingSettingConfigurationFile::time_zone() const {
  // @@protoc_insertion_point(field_get:LSLAM.TimingSettingConfigurationFile.time_zone)
  return _internal_time_zone();
}
inline void TimingSettingConfigurationFile::_internal_set_time_zone(int32_t value) {
  
  _impl_.time_zone_ = value;
}
inline void TimingSettingConfigurationFile::set_time_zone(int32_t value) {
  _internal_set_time_zone(value);
  // @@protoc_insertion_point(field_set:LSLAM.TimingSettingConfigurationFile.time_zone)
}

// int32 timing_number = 3;
inline void TimingSettingConfigurationFile::clear_timing_number() {
  _impl_.timing_number_ = 0;
}
inline int32_t TimingSettingConfigurationFile::_internal_timing_number() const {
  return _impl_.timing_number_;
}
inline int32_t TimingSettingConfigurationFile::timing_number() const {
  // @@protoc_insertion_point(field_get:LSLAM.TimingSettingConfigurationFile.timing_number)
  return _internal_timing_number();
}
inline void TimingSettingConfigurationFile::_internal_set_timing_number(int32_t value) {
  
  _impl_.timing_number_ = value;
}
inline void TimingSettingConfigurationFile::set_timing_number(int32_t value) {
  _internal_set_timing_number(value);
  // @@protoc_insertion_point(field_set:LSLAM.TimingSettingConfigurationFile.timing_number)
}

// .LSLAM.TuyaDoNotDisturb set_tuya_do_not_disturb = 4;
inline bool TimingSettingConfigurationFile::_internal_has_set_tuya_do_not_disturb() const {
  return this != internal_default_instance() && _impl_.set_tuya_do_not_disturb_ != nullptr;
}
inline bool TimingSettingConfigurationFile::has_set_tuya_do_not_disturb() const {
  return _internal_has_set_tuya_do_not_disturb();
}
inline void TimingSettingConfigurationFile::clear_set_tuya_do_not_disturb() {
  if (GetArenaForAllocation() == nullptr && _impl_.set_tuya_do_not_disturb_ != nullptr) {
    delete _impl_.set_tuya_do_not_disturb_;
  }
  _impl_.set_tuya_do_not_disturb_ = nullptr;
}
inline const ::LSLAM::TuyaDoNotDisturb& TimingSettingConfigurationFile::_internal_set_tuya_do_not_disturb() const {
  const ::LSLAM::TuyaDoNotDisturb* p = _impl_.set_tuya_do_not_disturb_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::TuyaDoNotDisturb&>(
      ::LSLAM::_TuyaDoNotDisturb_default_instance_);
}
inline const ::LSLAM::TuyaDoNotDisturb& TimingSettingConfigurationFile::set_tuya_do_not_disturb() const {
  // @@protoc_insertion_point(field_get:LSLAM.TimingSettingConfigurationFile.set_tuya_do_not_disturb)
  return _internal_set_tuya_do_not_disturb();
}
inline void TimingSettingConfigurationFile::unsafe_arena_set_allocated_set_tuya_do_not_disturb(
    ::LSLAM::TuyaDoNotDisturb* set_tuya_do_not_disturb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.set_tuya_do_not_disturb_);
  }
  _impl_.set_tuya_do_not_disturb_ = set_tuya_do_not_disturb;
  if (set_tuya_do_not_disturb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.TimingSettingConfigurationFile.set_tuya_do_not_disturb)
}
inline ::LSLAM::TuyaDoNotDisturb* TimingSettingConfigurationFile::release_set_tuya_do_not_disturb() {
  
  ::LSLAM::TuyaDoNotDisturb* temp = _impl_.set_tuya_do_not_disturb_;
  _impl_.set_tuya_do_not_disturb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::TuyaDoNotDisturb* TimingSettingConfigurationFile::unsafe_arena_release_set_tuya_do_not_disturb() {
  // @@protoc_insertion_point(field_release:LSLAM.TimingSettingConfigurationFile.set_tuya_do_not_disturb)
  
  ::LSLAM::TuyaDoNotDisturb* temp = _impl_.set_tuya_do_not_disturb_;
  _impl_.set_tuya_do_not_disturb_ = nullptr;
  return temp;
}
inline ::LSLAM::TuyaDoNotDisturb* TimingSettingConfigurationFile::_internal_mutable_set_tuya_do_not_disturb() {
  
  if (_impl_.set_tuya_do_not_disturb_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::TuyaDoNotDisturb>(GetArenaForAllocation());
    _impl_.set_tuya_do_not_disturb_ = p;
  }
  return _impl_.set_tuya_do_not_disturb_;
}
inline ::LSLAM::TuyaDoNotDisturb* TimingSettingConfigurationFile::mutable_set_tuya_do_not_disturb() {
  ::LSLAM::TuyaDoNotDisturb* _msg = _internal_mutable_set_tuya_do_not_disturb();
  // @@protoc_insertion_point(field_mutable:LSLAM.TimingSettingConfigurationFile.set_tuya_do_not_disturb)
  return _msg;
}
inline void TimingSettingConfigurationFile::set_allocated_set_tuya_do_not_disturb(::LSLAM::TuyaDoNotDisturb* set_tuya_do_not_disturb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.set_tuya_do_not_disturb_;
  }
  if (set_tuya_do_not_disturb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_tuya_do_not_disturb);
    if (message_arena != submessage_arena) {
      set_tuya_do_not_disturb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_tuya_do_not_disturb, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.set_tuya_do_not_disturb_ = set_tuya_do_not_disturb;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.TimingSettingConfigurationFile.set_tuya_do_not_disturb)
}

// bool set_break_point_switch = 5;
inline void TimingSettingConfigurationFile::clear_set_break_point_switch() {
  _impl_.set_break_point_switch_ = false;
}
inline bool TimingSettingConfigurationFile::_internal_set_break_point_switch() const {
  return _impl_.set_break_point_switch_;
}
inline bool TimingSettingConfigurationFile::set_break_point_switch() const {
  // @@protoc_insertion_point(field_get:LSLAM.TimingSettingConfigurationFile.set_break_point_switch)
  return _internal_set_break_point_switch();
}
inline void TimingSettingConfigurationFile::_internal_set_set_break_point_switch(bool value) {
  
  _impl_.set_break_point_switch_ = value;
}
inline void TimingSettingConfigurationFile::set_set_break_point_switch(bool value) {
  _internal_set_set_break_point_switch(value);
  // @@protoc_insertion_point(field_set:LSLAM.TimingSettingConfigurationFile.set_break_point_switch)
}

// .LSLAM.TimingFanMotorLevel default_fan_motor_level = 6;
inline void TimingSettingConfigurationFile::clear_default_fan_motor_level() {
  _impl_.default_fan_motor_level_ = 0;
}
inline ::LSLAM::TimingFanMotorLevel TimingSettingConfigurationFile::_internal_default_fan_motor_level() const {
  return static_cast< ::LSLAM::TimingFanMotorLevel >(_impl_.default_fan_motor_level_);
}
inline ::LSLAM::TimingFanMotorLevel TimingSettingConfigurationFile::default_fan_motor_level() const {
  // @@protoc_insertion_point(field_get:LSLAM.TimingSettingConfigurationFile.default_fan_motor_level)
  return _internal_default_fan_motor_level();
}
inline void TimingSettingConfigurationFile::_internal_set_default_fan_motor_level(::LSLAM::TimingFanMotorLevel value) {
  
  _impl_.default_fan_motor_level_ = value;
}
inline void TimingSettingConfigurationFile::set_default_fan_motor_level(::LSLAM::TimingFanMotorLevel value) {
  _internal_set_default_fan_motor_level(value);
  // @@protoc_insertion_point(field_set:LSLAM.TimingSettingConfigurationFile.default_fan_motor_level)
}

// .LSLAM.TimingWaterBoxLevel default_water_box_level = 7;
inline void TimingSettingConfigurationFile::clear_default_water_box_level() {
  _impl_.default_water_box_level_ = 0;
}
inline ::LSLAM::TimingWaterBoxLevel TimingSettingConfigurationFile::_internal_default_water_box_level() const {
  return static_cast< ::LSLAM::TimingWaterBoxLevel >(_impl_.default_water_box_level_);
}
inline ::LSLAM::TimingWaterBoxLevel TimingSettingConfigurationFile::default_water_box_level() const {
  // @@protoc_insertion_point(field_get:LSLAM.TimingSettingConfigurationFile.default_water_box_level)
  return _internal_default_water_box_level();
}
inline void TimingSettingConfigurationFile::_internal_set_default_water_box_level(::LSLAM::TimingWaterBoxLevel value) {
  
  _impl_.default_water_box_level_ = value;
}
inline void TimingSettingConfigurationFile::set_default_water_box_level(::LSLAM::TimingWaterBoxLevel value) {
  _internal_set_default_water_box_level(value);
  // @@protoc_insertion_point(field_set:LSLAM.TimingSettingConfigurationFile.default_water_box_level)
}

// int32 carpet_clean_prefer = 8;
inline void TimingSettingConfigurationFile::clear_carpet_clean_prefer() {
  _impl_.carpet_clean_prefer_ = 0;
}
inline int32_t TimingSettingConfigurationFile::_internal_carpet_clean_prefer() const {
  return _impl_.carpet_clean_prefer_;
}
inline int32_t TimingSettingConfigurationFile::carpet_clean_prefer() const {
  // @@protoc_insertion_point(field_get:LSLAM.TimingSettingConfigurationFile.carpet_clean_prefer)
  return _internal_carpet_clean_prefer();
}
inline void TimingSettingConfigurationFile::_internal_set_carpet_clean_prefer(int32_t value) {
  
  _impl_.carpet_clean_prefer_ = value;
}
inline void TimingSettingConfigurationFile::set_carpet_clean_prefer(int32_t value) {
  _internal_set_carpet_clean_prefer(value);
  // @@protoc_insertion_point(field_set:LSLAM.TimingSettingConfigurationFile.carpet_clean_prefer)
}

// bool auto_boost_switch = 9;
inline void TimingSettingConfigurationFile::clear_auto_boost_switch() {
  _impl_.auto_boost_switch_ = false;
}
inline bool TimingSettingConfigurationFile::_internal_auto_boost_switch() const {
  return _impl_.auto_boost_switch_;
}
inline bool TimingSettingConfigurationFile::auto_boost_switch() const {
  // @@protoc_insertion_point(field_get:LSLAM.TimingSettingConfigurationFile.auto_boost_switch)
  return _internal_auto_boost_switch();
}
inline void TimingSettingConfigurationFile::_internal_set_auto_boost_switch(bool value) {
  
  _impl_.auto_boost_switch_ = value;
}
inline void TimingSettingConfigurationFile::set_auto_boost_switch(bool value) {
  _internal_set_auto_boost_switch(value);
  // @@protoc_insertion_point(field_set:LSLAM.TimingSettingConfigurationFile.auto_boost_switch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LSLAM::TimingFanMotorLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::TimingFanMotorLevel>() {
  return ::LSLAM::TimingFanMotorLevel_descriptor();
}
template <> struct is_proto_enum< ::LSLAM::TimingWaterBoxLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::TimingWaterBoxLevel>() {
  return ::LSLAM::TimingWaterBoxLevel_descriptor();
}
template <> struct is_proto_enum< ::LSLAM::TimingCleanMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::TimingCleanMode>() {
  return ::LSLAM::TimingCleanMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Timing_2eproto
