// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FirmwareUpdateConfigurationFile.proto

#include "FirmwareUpdateConfigurationFile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR ProgramNameLocation::ProgramNameLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.program_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.program_location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProgramNameLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgramNameLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgramNameLocationDefaultTypeInternal() {}
  union {
    ProgramNameLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgramNameLocationDefaultTypeInternal _ProgramNameLocation_default_instance_;
PROTOBUF_CONSTEXPR FirmwareUpdate::FirmwareUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.program_name_location_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FirmwareUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FirmwareUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FirmwareUpdateDefaultTypeInternal() {}
  union {
    FirmwareUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FirmwareUpdateDefaultTypeInternal _FirmwareUpdate_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_FirmwareUpdateConfigurationFile_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_FirmwareUpdateConfigurationFile_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_FirmwareUpdateConfigurationFile_2eproto = nullptr;

const uint32_t TableStruct_FirmwareUpdateConfigurationFile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::ProgramNameLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::ProgramNameLocation, _impl_.program_name_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::ProgramNameLocation, _impl_.program_location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::FirmwareUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::FirmwareUpdate, _impl_.program_name_location_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::ProgramNameLocation)},
  { 10, -1, -1, sizeof(::LSLAM::FirmwareUpdate)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_ProgramNameLocation_default_instance_._instance,
  &::LSLAM::_FirmwareUpdate_default_instance_._instance,
};

const char descriptor_table_protodef_FirmwareUpdateConfigurationFile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%FirmwareUpdateConfigurationFile.proto\022"
  "\005LSLAM\032\014Points.proto\"E\n\023ProgramNameLocat"
  "ion\022\024\n\014program_name\030\001 \001(\t\022\030\n\020program_loc"
  "ation\030\002 \001(\t\"K\n\016FirmwareUpdate\0229\n\025program"
  "_name_location\030\001 \003(\0132\032.LSLAM.ProgramName"
  "Locationb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_FirmwareUpdateConfigurationFile_2eproto_deps[1] = {
  &::descriptor_table_Points_2eproto,
};
static ::_pbi::once_flag descriptor_table_FirmwareUpdateConfigurationFile_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FirmwareUpdateConfigurationFile_2eproto = {
    false, false, 216, descriptor_table_protodef_FirmwareUpdateConfigurationFile_2eproto,
    "FirmwareUpdateConfigurationFile.proto",
    &descriptor_table_FirmwareUpdateConfigurationFile_2eproto_once, descriptor_table_FirmwareUpdateConfigurationFile_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_FirmwareUpdateConfigurationFile_2eproto::offsets,
    file_level_metadata_FirmwareUpdateConfigurationFile_2eproto, file_level_enum_descriptors_FirmwareUpdateConfigurationFile_2eproto,
    file_level_service_descriptors_FirmwareUpdateConfigurationFile_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FirmwareUpdateConfigurationFile_2eproto_getter() {
  return &descriptor_table_FirmwareUpdateConfigurationFile_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FirmwareUpdateConfigurationFile_2eproto(&descriptor_table_FirmwareUpdateConfigurationFile_2eproto);
namespace LSLAM {

// ===================================================================

class ProgramNameLocation::_Internal {
 public:
};

ProgramNameLocation::ProgramNameLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.ProgramNameLocation)
}
ProgramNameLocation::ProgramNameLocation(const ProgramNameLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProgramNameLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.program_name_){}
    , decltype(_impl_.program_location_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.program_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.program_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_program_name().empty()) {
    _this->_impl_.program_name_.Set(from._internal_program_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.program_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.program_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_program_location().empty()) {
    _this->_impl_.program_location_.Set(from._internal_program_location(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:LSLAM.ProgramNameLocation)
}

inline void ProgramNameLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.program_name_){}
    , decltype(_impl_.program_location_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.program_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.program_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.program_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.program_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProgramNameLocation::~ProgramNameLocation() {
  // @@protoc_insertion_point(destructor:LSLAM.ProgramNameLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProgramNameLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.program_name_.Destroy();
  _impl_.program_location_.Destroy();
}

void ProgramNameLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProgramNameLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.ProgramNameLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.program_name_.ClearToEmpty();
  _impl_.program_location_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProgramNameLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string program_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_program_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "LSLAM.ProgramNameLocation.program_name"));
        } else
          goto handle_unusual;
        continue;
      // string program_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_program_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "LSLAM.ProgramNameLocation.program_location"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProgramNameLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.ProgramNameLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string program_name = 1;
  if (!this->_internal_program_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_program_name().data(), static_cast<int>(this->_internal_program_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LSLAM.ProgramNameLocation.program_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_program_name(), target);
  }

  // string program_location = 2;
  if (!this->_internal_program_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_program_location().data(), static_cast<int>(this->_internal_program_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LSLAM.ProgramNameLocation.program_location");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_program_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.ProgramNameLocation)
  return target;
}

size_t ProgramNameLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.ProgramNameLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string program_name = 1;
  if (!this->_internal_program_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_program_name());
  }

  // string program_location = 2;
  if (!this->_internal_program_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_program_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProgramNameLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProgramNameLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProgramNameLocation::GetClassData() const { return &_class_data_; }


void ProgramNameLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProgramNameLocation*>(&to_msg);
  auto& from = static_cast<const ProgramNameLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.ProgramNameLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_program_name().empty()) {
    _this->_internal_set_program_name(from._internal_program_name());
  }
  if (!from._internal_program_location().empty()) {
    _this->_internal_set_program_location(from._internal_program_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProgramNameLocation::CopyFrom(const ProgramNameLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.ProgramNameLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramNameLocation::IsInitialized() const {
  return true;
}

void ProgramNameLocation::InternalSwap(ProgramNameLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.program_name_, lhs_arena,
      &other->_impl_.program_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.program_location_, lhs_arena,
      &other->_impl_.program_location_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgramNameLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FirmwareUpdateConfigurationFile_2eproto_getter, &descriptor_table_FirmwareUpdateConfigurationFile_2eproto_once,
      file_level_metadata_FirmwareUpdateConfigurationFile_2eproto[0]);
}

// ===================================================================

class FirmwareUpdate::_Internal {
 public:
};

FirmwareUpdate::FirmwareUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.FirmwareUpdate)
}
FirmwareUpdate::FirmwareUpdate(const FirmwareUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FirmwareUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.program_name_location_){from._impl_.program_name_location_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LSLAM.FirmwareUpdate)
}

inline void FirmwareUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.program_name_location_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FirmwareUpdate::~FirmwareUpdate() {
  // @@protoc_insertion_point(destructor:LSLAM.FirmwareUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FirmwareUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.program_name_location_.~RepeatedPtrField();
}

void FirmwareUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FirmwareUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.FirmwareUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.program_name_location_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirmwareUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .LSLAM.ProgramNameLocation program_name_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_program_name_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FirmwareUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.FirmwareUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LSLAM.ProgramNameLocation program_name_location = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_program_name_location_size()); i < n; i++) {
    const auto& repfield = this->_internal_program_name_location(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.FirmwareUpdate)
  return target;
}

size_t FirmwareUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.FirmwareUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.ProgramNameLocation program_name_location = 1;
  total_size += 1UL * this->_internal_program_name_location_size();
  for (const auto& msg : this->_impl_.program_name_location_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirmwareUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FirmwareUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirmwareUpdate::GetClassData() const { return &_class_data_; }


void FirmwareUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FirmwareUpdate*>(&to_msg);
  auto& from = static_cast<const FirmwareUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.FirmwareUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.program_name_location_.MergeFrom(from._impl_.program_name_location_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirmwareUpdate::CopyFrom(const FirmwareUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.FirmwareUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareUpdate::IsInitialized() const {
  return true;
}

void FirmwareUpdate::InternalSwap(FirmwareUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.program_name_location_.InternalSwap(&other->_impl_.program_name_location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirmwareUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FirmwareUpdateConfigurationFile_2eproto_getter, &descriptor_table_FirmwareUpdateConfigurationFile_2eproto_once,
      file_level_metadata_FirmwareUpdateConfigurationFile_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::ProgramNameLocation*
Arena::CreateMaybeMessage< ::LSLAM::ProgramNameLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::ProgramNameLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::FirmwareUpdate*
Arena::CreateMaybeMessage< ::LSLAM::FirmwareUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::FirmwareUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
