// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotBehaviorState.proto

#include "RobotBehaviorState.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR RobotBehaviorState::RobotBehaviorState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clean_percent_)*/0u
  , /*decltype(_impl_.front_distance_)*/0u
  , /*decltype(_impl_.clean_mode_)*/0u
  , /*decltype(_impl_.main_clean_motor_mode_)*/0u
  , /*decltype(_impl_.side_clean_motor_mode_)*/0u
  , /*decltype(_impl_.swiffer_motor_mode_)*/0u
  , /*decltype(_impl_.fan_motor_mode_)*/0u
  , /*decltype(_impl_.water_box_level_mode_)*/0u
  , /*decltype(_impl_.partner_clean_mop_switch_)*/0u
  , /*decltype(_impl_.partner_dust_collection_switch_)*/0u
  , /*decltype(_impl_.robot_key_state_)*/0
  , /*decltype(_impl_.partner_key_state_)*/0
  , /*decltype(_impl_.robot_current_abnormal_state_)*/0
  , /*decltype(_impl_.partner_drying_mop_switch_)*/0u
  , /*decltype(_impl_.breathing_light_)*/0
  , /*decltype(_impl_.behind_distance_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RobotBehaviorStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotBehaviorStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotBehaviorStateDefaultTypeInternal() {}
  union {
    RobotBehaviorState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotBehaviorStateDefaultTypeInternal _RobotBehaviorState_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_RobotBehaviorState_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_RobotBehaviorState_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_RobotBehaviorState_2eproto = nullptr;

const uint32_t TableStruct_RobotBehaviorState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.clean_percent_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.front_distance_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.clean_mode_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.main_clean_motor_mode_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.side_clean_motor_mode_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.swiffer_motor_mode_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.fan_motor_mode_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.water_box_level_mode_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.partner_clean_mop_switch_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.partner_dust_collection_switch_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.robot_key_state_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.partner_key_state_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.robot_current_abnormal_state_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.partner_drying_mop_switch_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.breathing_light_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotBehaviorState, _impl_.behind_distance_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::RobotBehaviorState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_RobotBehaviorState_default_instance_._instance,
};

const char descriptor_table_protodef_RobotBehaviorState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030RobotBehaviorState.proto\022\005LSLAM\"\356\005\n\022Ro"
  "botBehaviorState\022\025\n\rclean_percent\030\001 \001(\r\022"
  "\026\n\016front_distance\030\002 \001(\r\022\022\n\nclean_mode\030\005 "
  "\001(\r\022\035\n\025main_clean_motor_mode\030\006 \001(\r\022\035\n\025si"
  "de_clean_motor_mode\030\007 \001(\r\022\032\n\022swiffer_mot"
  "or_mode\030\010 \001(\r\022\026\n\016fan_motor_mode\030\t \001(\r\022\034\n"
  "\024water_box_level_mode\030\n \001(\r\022 \n\030partner_c"
  "lean_mop_switch\030\013 \001(\r\022&\n\036partner_dust_co"
  "llection_switch\030\014 \001(\r\022\?\n\017robot_key_state"
  "\030\r \001(\0162&.LSLAM.RobotBehaviorState.KeySta"
  "teType\022A\n\021partner_key_state\030\016 \001(\0162&.LSLA"
  "M.RobotBehaviorState.KeyStateType\022:\n\034rob"
  "ot_current_abnormal_state\030\017 \001(\0162\024.LSLAM."
  "AbnormalState\022!\n\031partner_drying_mop_swit"
  "ch\030\020 \001(\r\0227\n\017breathing_light\030\021 \001(\0162\036.LSLA"
  "M.RobotTaskBreathingLight\022\027\n\017behind_dist"
  "ance\030\022 \001(\r\"\205\001\n\014KeyStateType\022\013\n\007KeyIdle\020\000"
  "\022\013\n\007kKey1Up\020\001\022\013\n\007kKey2Up\020\002\022\017\n\013kKey1doubl"
  "e\020\003\022\017\n\013kKey2double\020\004\022\r\n\tkKey1Long\020\005\022\r\n\tk"
  "Key2Long\020\006\022\016\n\nkKeyGropup\020\007*\327\001\n\027RobotTask"
  "BreathingLight\022\020\n\014UNUSED_SATTE\020\000\022\021\n\rWORK"
  "ING_STATE\020\001\022\022\n\016CHARGING_STATE\020\002\022\024\n\020CHARE"
  "_DONE_STATE\020\003\022\021\n\rSTANDBY_STATE\020\004\022\023\n\017EXCE"
  "PTION_STATE\020\005\022\017\n\013ERROR_STATE\020\006\022\016\n\nSTOP_S"
  "TATE\020\007\022\021\n\rINITING_STATE\020\010\022\021\n\rSUSPEND_STA"
  "TE\020\t*\221\002\n\rAbnormalState\022\017\n\013NormalState\020\000\022"
  "\026\n\022StayProhibitedZone\020\001\022\024\n\020DustBoxExcept"
  "ion\020\002\022\024\n\020BatteryException\020\003\022\022\n\016LidarExce"
  "ption\020\004\022\025\n\021PickedUpException\020\005\022\016\n\nCrashE"
  "rror\020\006\022\r\n\tDropError\020\007\022\020\n\014BatteryError\020\010\022"
  "\022\n\016LineLaserError\020\t\022\014\n\010FunError\020\n\022\016\n\nWhe"
  "elError\020\013\022\013\n\007Trapped\020\014\022\020\n\014PartnerError\020\r"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_RobotBehaviorState_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RobotBehaviorState_2eproto = {
    false, false, 1288, descriptor_table_protodef_RobotBehaviorState_2eproto,
    "RobotBehaviorState.proto",
    &descriptor_table_RobotBehaviorState_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_RobotBehaviorState_2eproto::offsets,
    file_level_metadata_RobotBehaviorState_2eproto, file_level_enum_descriptors_RobotBehaviorState_2eproto,
    file_level_service_descriptors_RobotBehaviorState_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RobotBehaviorState_2eproto_getter() {
  return &descriptor_table_RobotBehaviorState_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RobotBehaviorState_2eproto(&descriptor_table_RobotBehaviorState_2eproto);
namespace LSLAM {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotBehaviorState_KeyStateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RobotBehaviorState_2eproto);
  return file_level_enum_descriptors_RobotBehaviorState_2eproto[0];
}
bool RobotBehaviorState_KeyStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState::KeyIdle;
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState::kKey1Up;
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState::kKey2Up;
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState::kKey1double;
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState::kKey2double;
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState::kKey1Long;
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState::kKey2Long;
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState::kKeyGropup;
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState::KeyStateType_MIN;
constexpr RobotBehaviorState_KeyStateType RobotBehaviorState::KeyStateType_MAX;
constexpr int RobotBehaviorState::KeyStateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotTaskBreathingLight_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RobotBehaviorState_2eproto);
  return file_level_enum_descriptors_RobotBehaviorState_2eproto[1];
}
bool RobotTaskBreathingLight_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AbnormalState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RobotBehaviorState_2eproto);
  return file_level_enum_descriptors_RobotBehaviorState_2eproto[2];
}
bool AbnormalState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RobotBehaviorState::_Internal {
 public:
};

RobotBehaviorState::RobotBehaviorState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.RobotBehaviorState)
}
RobotBehaviorState::RobotBehaviorState(const RobotBehaviorState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RobotBehaviorState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clean_percent_){}
    , decltype(_impl_.front_distance_){}
    , decltype(_impl_.clean_mode_){}
    , decltype(_impl_.main_clean_motor_mode_){}
    , decltype(_impl_.side_clean_motor_mode_){}
    , decltype(_impl_.swiffer_motor_mode_){}
    , decltype(_impl_.fan_motor_mode_){}
    , decltype(_impl_.water_box_level_mode_){}
    , decltype(_impl_.partner_clean_mop_switch_){}
    , decltype(_impl_.partner_dust_collection_switch_){}
    , decltype(_impl_.robot_key_state_){}
    , decltype(_impl_.partner_key_state_){}
    , decltype(_impl_.robot_current_abnormal_state_){}
    , decltype(_impl_.partner_drying_mop_switch_){}
    , decltype(_impl_.breathing_light_){}
    , decltype(_impl_.behind_distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.clean_percent_, &from._impl_.clean_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.behind_distance_) -
    reinterpret_cast<char*>(&_impl_.clean_percent_)) + sizeof(_impl_.behind_distance_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.RobotBehaviorState)
}

inline void RobotBehaviorState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clean_percent_){0u}
    , decltype(_impl_.front_distance_){0u}
    , decltype(_impl_.clean_mode_){0u}
    , decltype(_impl_.main_clean_motor_mode_){0u}
    , decltype(_impl_.side_clean_motor_mode_){0u}
    , decltype(_impl_.swiffer_motor_mode_){0u}
    , decltype(_impl_.fan_motor_mode_){0u}
    , decltype(_impl_.water_box_level_mode_){0u}
    , decltype(_impl_.partner_clean_mop_switch_){0u}
    , decltype(_impl_.partner_dust_collection_switch_){0u}
    , decltype(_impl_.robot_key_state_){0}
    , decltype(_impl_.partner_key_state_){0}
    , decltype(_impl_.robot_current_abnormal_state_){0}
    , decltype(_impl_.partner_drying_mop_switch_){0u}
    , decltype(_impl_.breathing_light_){0}
    , decltype(_impl_.behind_distance_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RobotBehaviorState::~RobotBehaviorState() {
  // @@protoc_insertion_point(destructor:LSLAM.RobotBehaviorState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotBehaviorState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RobotBehaviorState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotBehaviorState::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.RobotBehaviorState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.clean_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.behind_distance_) -
      reinterpret_cast<char*>(&_impl_.clean_percent_)) + sizeof(_impl_.behind_distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotBehaviorState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 clean_percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.clean_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.front_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 clean_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.clean_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 main_clean_motor_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.main_clean_motor_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 side_clean_motor_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.side_clean_motor_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 swiffer_motor_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.swiffer_motor_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fan_motor_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.fan_motor_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 water_box_level_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.water_box_level_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 partner_clean_mop_switch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.partner_clean_mop_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 partner_dust_collection_switch = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.partner_dust_collection_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.RobotBehaviorState.KeyStateType robot_key_state = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_robot_key_state(static_cast<::LSLAM::RobotBehaviorState_KeyStateType>(val));
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.RobotBehaviorState.KeyStateType partner_key_state = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_partner_key_state(static_cast<::LSLAM::RobotBehaviorState_KeyStateType>(val));
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.AbnormalState robot_current_abnormal_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_robot_current_abnormal_state(static_cast<::LSLAM::AbnormalState>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 partner_drying_mop_switch = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.partner_drying_mop_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.RobotTaskBreathingLight breathing_light = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_breathing_light(static_cast<::LSLAM::RobotTaskBreathingLight>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 behind_distance = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.behind_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotBehaviorState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.RobotBehaviorState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clean_percent = 1;
  if (this->_internal_clean_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_clean_percent(), target);
  }

  // uint32 front_distance = 2;
  if (this->_internal_front_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_front_distance(), target);
  }

  // uint32 clean_mode = 5;
  if (this->_internal_clean_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_clean_mode(), target);
  }

  // uint32 main_clean_motor_mode = 6;
  if (this->_internal_main_clean_motor_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_main_clean_motor_mode(), target);
  }

  // uint32 side_clean_motor_mode = 7;
  if (this->_internal_side_clean_motor_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_side_clean_motor_mode(), target);
  }

  // uint32 swiffer_motor_mode = 8;
  if (this->_internal_swiffer_motor_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_swiffer_motor_mode(), target);
  }

  // uint32 fan_motor_mode = 9;
  if (this->_internal_fan_motor_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fan_motor_mode(), target);
  }

  // uint32 water_box_level_mode = 10;
  if (this->_internal_water_box_level_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_water_box_level_mode(), target);
  }

  // uint32 partner_clean_mop_switch = 11;
  if (this->_internal_partner_clean_mop_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_partner_clean_mop_switch(), target);
  }

  // uint32 partner_dust_collection_switch = 12;
  if (this->_internal_partner_dust_collection_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_partner_dust_collection_switch(), target);
  }

  // .LSLAM.RobotBehaviorState.KeyStateType robot_key_state = 13;
  if (this->_internal_robot_key_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_robot_key_state(), target);
  }

  // .LSLAM.RobotBehaviorState.KeyStateType partner_key_state = 14;
  if (this->_internal_partner_key_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_partner_key_state(), target);
  }

  // .LSLAM.AbnormalState robot_current_abnormal_state = 15;
  if (this->_internal_robot_current_abnormal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_robot_current_abnormal_state(), target);
  }

  // uint32 partner_drying_mop_switch = 16;
  if (this->_internal_partner_drying_mop_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_partner_drying_mop_switch(), target);
  }

  // .LSLAM.RobotTaskBreathingLight breathing_light = 17;
  if (this->_internal_breathing_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_breathing_light(), target);
  }

  // uint32 behind_distance = 18;
  if (this->_internal_behind_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_behind_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.RobotBehaviorState)
  return target;
}

size_t RobotBehaviorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.RobotBehaviorState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 clean_percent = 1;
  if (this->_internal_clean_percent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clean_percent());
  }

  // uint32 front_distance = 2;
  if (this->_internal_front_distance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_front_distance());
  }

  // uint32 clean_mode = 5;
  if (this->_internal_clean_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clean_mode());
  }

  // uint32 main_clean_motor_mode = 6;
  if (this->_internal_main_clean_motor_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_main_clean_motor_mode());
  }

  // uint32 side_clean_motor_mode = 7;
  if (this->_internal_side_clean_motor_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_side_clean_motor_mode());
  }

  // uint32 swiffer_motor_mode = 8;
  if (this->_internal_swiffer_motor_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_swiffer_motor_mode());
  }

  // uint32 fan_motor_mode = 9;
  if (this->_internal_fan_motor_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fan_motor_mode());
  }

  // uint32 water_box_level_mode = 10;
  if (this->_internal_water_box_level_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_water_box_level_mode());
  }

  // uint32 partner_clean_mop_switch = 11;
  if (this->_internal_partner_clean_mop_switch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partner_clean_mop_switch());
  }

  // uint32 partner_dust_collection_switch = 12;
  if (this->_internal_partner_dust_collection_switch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partner_dust_collection_switch());
  }

  // .LSLAM.RobotBehaviorState.KeyStateType robot_key_state = 13;
  if (this->_internal_robot_key_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_robot_key_state());
  }

  // .LSLAM.RobotBehaviorState.KeyStateType partner_key_state = 14;
  if (this->_internal_partner_key_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_partner_key_state());
  }

  // .LSLAM.AbnormalState robot_current_abnormal_state = 15;
  if (this->_internal_robot_current_abnormal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_robot_current_abnormal_state());
  }

  // uint32 partner_drying_mop_switch = 16;
  if (this->_internal_partner_drying_mop_switch() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_partner_drying_mop_switch());
  }

  // .LSLAM.RobotTaskBreathingLight breathing_light = 17;
  if (this->_internal_breathing_light() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_breathing_light());
  }

  // uint32 behind_distance = 18;
  if (this->_internal_behind_distance() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_behind_distance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotBehaviorState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotBehaviorState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotBehaviorState::GetClassData() const { return &_class_data_; }


void RobotBehaviorState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotBehaviorState*>(&to_msg);
  auto& from = static_cast<const RobotBehaviorState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.RobotBehaviorState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_clean_percent() != 0) {
    _this->_internal_set_clean_percent(from._internal_clean_percent());
  }
  if (from._internal_front_distance() != 0) {
    _this->_internal_set_front_distance(from._internal_front_distance());
  }
  if (from._internal_clean_mode() != 0) {
    _this->_internal_set_clean_mode(from._internal_clean_mode());
  }
  if (from._internal_main_clean_motor_mode() != 0) {
    _this->_internal_set_main_clean_motor_mode(from._internal_main_clean_motor_mode());
  }
  if (from._internal_side_clean_motor_mode() != 0) {
    _this->_internal_set_side_clean_motor_mode(from._internal_side_clean_motor_mode());
  }
  if (from._internal_swiffer_motor_mode() != 0) {
    _this->_internal_set_swiffer_motor_mode(from._internal_swiffer_motor_mode());
  }
  if (from._internal_fan_motor_mode() != 0) {
    _this->_internal_set_fan_motor_mode(from._internal_fan_motor_mode());
  }
  if (from._internal_water_box_level_mode() != 0) {
    _this->_internal_set_water_box_level_mode(from._internal_water_box_level_mode());
  }
  if (from._internal_partner_clean_mop_switch() != 0) {
    _this->_internal_set_partner_clean_mop_switch(from._internal_partner_clean_mop_switch());
  }
  if (from._internal_partner_dust_collection_switch() != 0) {
    _this->_internal_set_partner_dust_collection_switch(from._internal_partner_dust_collection_switch());
  }
  if (from._internal_robot_key_state() != 0) {
    _this->_internal_set_robot_key_state(from._internal_robot_key_state());
  }
  if (from._internal_partner_key_state() != 0) {
    _this->_internal_set_partner_key_state(from._internal_partner_key_state());
  }
  if (from._internal_robot_current_abnormal_state() != 0) {
    _this->_internal_set_robot_current_abnormal_state(from._internal_robot_current_abnormal_state());
  }
  if (from._internal_partner_drying_mop_switch() != 0) {
    _this->_internal_set_partner_drying_mop_switch(from._internal_partner_drying_mop_switch());
  }
  if (from._internal_breathing_light() != 0) {
    _this->_internal_set_breathing_light(from._internal_breathing_light());
  }
  if (from._internal_behind_distance() != 0) {
    _this->_internal_set_behind_distance(from._internal_behind_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotBehaviorState::CopyFrom(const RobotBehaviorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.RobotBehaviorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotBehaviorState::IsInitialized() const {
  return true;
}

void RobotBehaviorState::InternalSwap(RobotBehaviorState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotBehaviorState, _impl_.behind_distance_)
      + sizeof(RobotBehaviorState::_impl_.behind_distance_)
      - PROTOBUF_FIELD_OFFSET(RobotBehaviorState, _impl_.clean_percent_)>(
          reinterpret_cast<char*>(&_impl_.clean_percent_),
          reinterpret_cast<char*>(&other->_impl_.clean_percent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotBehaviorState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RobotBehaviorState_2eproto_getter, &descriptor_table_RobotBehaviorState_2eproto_once,
      file_level_metadata_RobotBehaviorState_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::RobotBehaviorState*
Arena::CreateMaybeMessage< ::LSLAM::RobotBehaviorState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::RobotBehaviorState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
