// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TuyaWithBackgroundManagementProcess.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TuyaWithBackgroundManagementProcess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TuyaWithBackgroundManagementProcess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ToDaemonMsg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TuyaWithBackgroundManagementProcess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TuyaWithBackgroundManagementProcess_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TuyaWithBackgroundManagementProcess_2eproto;
namespace LSLAM {
class TuyaWithBackgroundManagementProcess;
struct TuyaWithBackgroundManagementProcessDefaultTypeInternal;
extern TuyaWithBackgroundManagementProcessDefaultTypeInternal _TuyaWithBackgroundManagementProcess_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::TuyaWithBackgroundManagementProcess* Arena::CreateMaybeMessage<::LSLAM::TuyaWithBackgroundManagementProcess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

enum TuyaRobotTaskType : int {
  TUYA_UNUSED_TASK = 0,
  TUYA_EXPLORE_TASK = 1,
  TUYA_SWEEP_TASK = 2,
  TUYA_MOP_TASK = 3,
  TUYA_SWEEP_AND_MOP_TASK = 4,
  TUYA_RECHARGE_TASK = 5,
  TuyaRobotTaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TuyaRobotTaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TuyaRobotTaskType_IsValid(int value);
constexpr TuyaRobotTaskType TuyaRobotTaskType_MIN = TUYA_UNUSED_TASK;
constexpr TuyaRobotTaskType TuyaRobotTaskType_MAX = TUYA_RECHARGE_TASK;
constexpr int TuyaRobotTaskType_ARRAYSIZE = TuyaRobotTaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TuyaRobotTaskType_descriptor();
template<typename T>
inline const std::string& TuyaRobotTaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TuyaRobotTaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TuyaRobotTaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TuyaRobotTaskType_descriptor(), enum_t_value);
}
inline bool TuyaRobotTaskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TuyaRobotTaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TuyaRobotTaskType>(
    TuyaRobotTaskType_descriptor(), name, value);
}
enum RemoteControlDirection : int {
  DEFAIL = 0,
  FORWARD = 1,
  BACKWARD = 2,
  TRUN_LEFT = 3,
  TURN_RIGHT = 4,
  STOP = 5,
  RemoteControlDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RemoteControlDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RemoteControlDirection_IsValid(int value);
constexpr RemoteControlDirection RemoteControlDirection_MIN = DEFAIL;
constexpr RemoteControlDirection RemoteControlDirection_MAX = STOP;
constexpr int RemoteControlDirection_ARRAYSIZE = RemoteControlDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemoteControlDirection_descriptor();
template<typename T>
inline const std::string& RemoteControlDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RemoteControlDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RemoteControlDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RemoteControlDirection_descriptor(), enum_t_value);
}
inline bool RemoteControlDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RemoteControlDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RemoteControlDirection>(
    RemoteControlDirection_descriptor(), name, value);
}
// ===================================================================

class TuyaWithBackgroundManagementProcess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.TuyaWithBackgroundManagementProcess) */ {
 public:
  inline TuyaWithBackgroundManagementProcess() : TuyaWithBackgroundManagementProcess(nullptr) {}
  ~TuyaWithBackgroundManagementProcess() override;
  explicit PROTOBUF_CONSTEXPR TuyaWithBackgroundManagementProcess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TuyaWithBackgroundManagementProcess(const TuyaWithBackgroundManagementProcess& from);
  TuyaWithBackgroundManagementProcess(TuyaWithBackgroundManagementProcess&& from) noexcept
    : TuyaWithBackgroundManagementProcess() {
    *this = ::std::move(from);
  }

  inline TuyaWithBackgroundManagementProcess& operator=(const TuyaWithBackgroundManagementProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuyaWithBackgroundManagementProcess& operator=(TuyaWithBackgroundManagementProcess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TuyaWithBackgroundManagementProcess& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuyaWithBackgroundManagementProcess* internal_default_instance() {
    return reinterpret_cast<const TuyaWithBackgroundManagementProcess*>(
               &_TuyaWithBackgroundManagementProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TuyaWithBackgroundManagementProcess& a, TuyaWithBackgroundManagementProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(TuyaWithBackgroundManagementProcess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuyaWithBackgroundManagementProcess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TuyaWithBackgroundManagementProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TuyaWithBackgroundManagementProcess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TuyaWithBackgroundManagementProcess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TuyaWithBackgroundManagementProcess& from) {
    TuyaWithBackgroundManagementProcess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuyaWithBackgroundManagementProcess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.TuyaWithBackgroundManagementProcess";
  }
  protected:
  explicit TuyaWithBackgroundManagementProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuyaRobotTaskFieldNumber = 1,
    kTuyaMapIdFieldNumber = 2,
    kStartOrPauseFieldNumber = 3,
    kSwitchMapFieldNumber = 4,
    kSelectAreaCleanFieldNumber = 5,
    kAimPointCleanFieldNumber = 6,
    kPlanAreaCleanFieldNumber = 7,
    kTuyaRobotSuTaskFieldNumber = 8,
    kDoNotDisturbSwitchFieldNumber = 9,
    kDirectionFieldNumber = 10,
  };
  // .LSLAM.TuyaRobotTaskType tuya_robot_task = 1;
  void clear_tuya_robot_task();
  ::LSLAM::TuyaRobotTaskType tuya_robot_task() const;
  void set_tuya_robot_task(::LSLAM::TuyaRobotTaskType value);
  private:
  ::LSLAM::TuyaRobotTaskType _internal_tuya_robot_task() const;
  void _internal_set_tuya_robot_task(::LSLAM::TuyaRobotTaskType value);
  public:

  // int32 tuya_map_id = 2;
  void clear_tuya_map_id();
  int32_t tuya_map_id() const;
  void set_tuya_map_id(int32_t value);
  private:
  int32_t _internal_tuya_map_id() const;
  void _internal_set_tuya_map_id(int32_t value);
  public:

  // int32 start_or_pause = 3;
  void clear_start_or_pause();
  int32_t start_or_pause() const;
  void set_start_or_pause(int32_t value);
  private:
  int32_t _internal_start_or_pause() const;
  void _internal_set_start_or_pause(int32_t value);
  public:

  // int32 switch_map = 4;
  void clear_switch_map();
  int32_t switch_map() const;
  void set_switch_map(int32_t value);
  private:
  int32_t _internal_switch_map() const;
  void _internal_set_switch_map(int32_t value);
  public:

  // int32 select_area_clean = 5;
  void clear_select_area_clean();
  int32_t select_area_clean() const;
  void set_select_area_clean(int32_t value);
  private:
  int32_t _internal_select_area_clean() const;
  void _internal_set_select_area_clean(int32_t value);
  public:

  // int32 aim_point_clean = 6;
  void clear_aim_point_clean();
  int32_t aim_point_clean() const;
  void set_aim_point_clean(int32_t value);
  private:
  int32_t _internal_aim_point_clean() const;
  void _internal_set_aim_point_clean(int32_t value);
  public:

  // int32 plan_area_clean = 7;
  void clear_plan_area_clean();
  int32_t plan_area_clean() const;
  void set_plan_area_clean(int32_t value);
  private:
  int32_t _internal_plan_area_clean() const;
  void _internal_set_plan_area_clean(int32_t value);
  public:

  // .LSLAM.RobotStartUpTaskType tuya_robot_su_task = 8;
  void clear_tuya_robot_su_task();
  ::LSLAM::RobotStartUpTaskType tuya_robot_su_task() const;
  void set_tuya_robot_su_task(::LSLAM::RobotStartUpTaskType value);
  private:
  ::LSLAM::RobotStartUpTaskType _internal_tuya_robot_su_task() const;
  void _internal_set_tuya_robot_su_task(::LSLAM::RobotStartUpTaskType value);
  public:

  // int32 do_not_disturb_switch = 9;
  void clear_do_not_disturb_switch();
  int32_t do_not_disturb_switch() const;
  void set_do_not_disturb_switch(int32_t value);
  private:
  int32_t _internal_do_not_disturb_switch() const;
  void _internal_set_do_not_disturb_switch(int32_t value);
  public:

  // .LSLAM.RemoteControlDirection direction = 10;
  void clear_direction();
  ::LSLAM::RemoteControlDirection direction() const;
  void set_direction(::LSLAM::RemoteControlDirection value);
  private:
  ::LSLAM::RemoteControlDirection _internal_direction() const;
  void _internal_set_direction(::LSLAM::RemoteControlDirection value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.TuyaWithBackgroundManagementProcess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int tuya_robot_task_;
    int32_t tuya_map_id_;
    int32_t start_or_pause_;
    int32_t switch_map_;
    int32_t select_area_clean_;
    int32_t aim_point_clean_;
    int32_t plan_area_clean_;
    int tuya_robot_su_task_;
    int32_t do_not_disturb_switch_;
    int direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TuyaWithBackgroundManagementProcess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TuyaWithBackgroundManagementProcess

// .LSLAM.TuyaRobotTaskType tuya_robot_task = 1;
inline void TuyaWithBackgroundManagementProcess::clear_tuya_robot_task() {
  _impl_.tuya_robot_task_ = 0;
}
inline ::LSLAM::TuyaRobotTaskType TuyaWithBackgroundManagementProcess::_internal_tuya_robot_task() const {
  return static_cast< ::LSLAM::TuyaRobotTaskType >(_impl_.tuya_robot_task_);
}
inline ::LSLAM::TuyaRobotTaskType TuyaWithBackgroundManagementProcess::tuya_robot_task() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaWithBackgroundManagementProcess.tuya_robot_task)
  return _internal_tuya_robot_task();
}
inline void TuyaWithBackgroundManagementProcess::_internal_set_tuya_robot_task(::LSLAM::TuyaRobotTaskType value) {
  
  _impl_.tuya_robot_task_ = value;
}
inline void TuyaWithBackgroundManagementProcess::set_tuya_robot_task(::LSLAM::TuyaRobotTaskType value) {
  _internal_set_tuya_robot_task(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaWithBackgroundManagementProcess.tuya_robot_task)
}

// int32 tuya_map_id = 2;
inline void TuyaWithBackgroundManagementProcess::clear_tuya_map_id() {
  _impl_.tuya_map_id_ = 0;
}
inline int32_t TuyaWithBackgroundManagementProcess::_internal_tuya_map_id() const {
  return _impl_.tuya_map_id_;
}
inline int32_t TuyaWithBackgroundManagementProcess::tuya_map_id() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaWithBackgroundManagementProcess.tuya_map_id)
  return _internal_tuya_map_id();
}
inline void TuyaWithBackgroundManagementProcess::_internal_set_tuya_map_id(int32_t value) {
  
  _impl_.tuya_map_id_ = value;
}
inline void TuyaWithBackgroundManagementProcess::set_tuya_map_id(int32_t value) {
  _internal_set_tuya_map_id(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaWithBackgroundManagementProcess.tuya_map_id)
}

// int32 start_or_pause = 3;
inline void TuyaWithBackgroundManagementProcess::clear_start_or_pause() {
  _impl_.start_or_pause_ = 0;
}
inline int32_t TuyaWithBackgroundManagementProcess::_internal_start_or_pause() const {
  return _impl_.start_or_pause_;
}
inline int32_t TuyaWithBackgroundManagementProcess::start_or_pause() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaWithBackgroundManagementProcess.start_or_pause)
  return _internal_start_or_pause();
}
inline void TuyaWithBackgroundManagementProcess::_internal_set_start_or_pause(int32_t value) {
  
  _impl_.start_or_pause_ = value;
}
inline void TuyaWithBackgroundManagementProcess::set_start_or_pause(int32_t value) {
  _internal_set_start_or_pause(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaWithBackgroundManagementProcess.start_or_pause)
}

// int32 switch_map = 4;
inline void TuyaWithBackgroundManagementProcess::clear_switch_map() {
  _impl_.switch_map_ = 0;
}
inline int32_t TuyaWithBackgroundManagementProcess::_internal_switch_map() const {
  return _impl_.switch_map_;
}
inline int32_t TuyaWithBackgroundManagementProcess::switch_map() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaWithBackgroundManagementProcess.switch_map)
  return _internal_switch_map();
}
inline void TuyaWithBackgroundManagementProcess::_internal_set_switch_map(int32_t value) {
  
  _impl_.switch_map_ = value;
}
inline void TuyaWithBackgroundManagementProcess::set_switch_map(int32_t value) {
  _internal_set_switch_map(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaWithBackgroundManagementProcess.switch_map)
}

// int32 select_area_clean = 5;
inline void TuyaWithBackgroundManagementProcess::clear_select_area_clean() {
  _impl_.select_area_clean_ = 0;
}
inline int32_t TuyaWithBackgroundManagementProcess::_internal_select_area_clean() const {
  return _impl_.select_area_clean_;
}
inline int32_t TuyaWithBackgroundManagementProcess::select_area_clean() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaWithBackgroundManagementProcess.select_area_clean)
  return _internal_select_area_clean();
}
inline void TuyaWithBackgroundManagementProcess::_internal_set_select_area_clean(int32_t value) {
  
  _impl_.select_area_clean_ = value;
}
inline void TuyaWithBackgroundManagementProcess::set_select_area_clean(int32_t value) {
  _internal_set_select_area_clean(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaWithBackgroundManagementProcess.select_area_clean)
}

// int32 aim_point_clean = 6;
inline void TuyaWithBackgroundManagementProcess::clear_aim_point_clean() {
  _impl_.aim_point_clean_ = 0;
}
inline int32_t TuyaWithBackgroundManagementProcess::_internal_aim_point_clean() const {
  return _impl_.aim_point_clean_;
}
inline int32_t TuyaWithBackgroundManagementProcess::aim_point_clean() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaWithBackgroundManagementProcess.aim_point_clean)
  return _internal_aim_point_clean();
}
inline void TuyaWithBackgroundManagementProcess::_internal_set_aim_point_clean(int32_t value) {
  
  _impl_.aim_point_clean_ = value;
}
inline void TuyaWithBackgroundManagementProcess::set_aim_point_clean(int32_t value) {
  _internal_set_aim_point_clean(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaWithBackgroundManagementProcess.aim_point_clean)
}

// int32 plan_area_clean = 7;
inline void TuyaWithBackgroundManagementProcess::clear_plan_area_clean() {
  _impl_.plan_area_clean_ = 0;
}
inline int32_t TuyaWithBackgroundManagementProcess::_internal_plan_area_clean() const {
  return _impl_.plan_area_clean_;
}
inline int32_t TuyaWithBackgroundManagementProcess::plan_area_clean() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaWithBackgroundManagementProcess.plan_area_clean)
  return _internal_plan_area_clean();
}
inline void TuyaWithBackgroundManagementProcess::_internal_set_plan_area_clean(int32_t value) {
  
  _impl_.plan_area_clean_ = value;
}
inline void TuyaWithBackgroundManagementProcess::set_plan_area_clean(int32_t value) {
  _internal_set_plan_area_clean(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaWithBackgroundManagementProcess.plan_area_clean)
}

// .LSLAM.RobotStartUpTaskType tuya_robot_su_task = 8;
inline void TuyaWithBackgroundManagementProcess::clear_tuya_robot_su_task() {
  _impl_.tuya_robot_su_task_ = 0;
}
inline ::LSLAM::RobotStartUpTaskType TuyaWithBackgroundManagementProcess::_internal_tuya_robot_su_task() const {
  return static_cast< ::LSLAM::RobotStartUpTaskType >(_impl_.tuya_robot_su_task_);
}
inline ::LSLAM::RobotStartUpTaskType TuyaWithBackgroundManagementProcess::tuya_robot_su_task() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaWithBackgroundManagementProcess.tuya_robot_su_task)
  return _internal_tuya_robot_su_task();
}
inline void TuyaWithBackgroundManagementProcess::_internal_set_tuya_robot_su_task(::LSLAM::RobotStartUpTaskType value) {
  
  _impl_.tuya_robot_su_task_ = value;
}
inline void TuyaWithBackgroundManagementProcess::set_tuya_robot_su_task(::LSLAM::RobotStartUpTaskType value) {
  _internal_set_tuya_robot_su_task(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaWithBackgroundManagementProcess.tuya_robot_su_task)
}

// int32 do_not_disturb_switch = 9;
inline void TuyaWithBackgroundManagementProcess::clear_do_not_disturb_switch() {
  _impl_.do_not_disturb_switch_ = 0;
}
inline int32_t TuyaWithBackgroundManagementProcess::_internal_do_not_disturb_switch() const {
  return _impl_.do_not_disturb_switch_;
}
inline int32_t TuyaWithBackgroundManagementProcess::do_not_disturb_switch() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaWithBackgroundManagementProcess.do_not_disturb_switch)
  return _internal_do_not_disturb_switch();
}
inline void TuyaWithBackgroundManagementProcess::_internal_set_do_not_disturb_switch(int32_t value) {
  
  _impl_.do_not_disturb_switch_ = value;
}
inline void TuyaWithBackgroundManagementProcess::set_do_not_disturb_switch(int32_t value) {
  _internal_set_do_not_disturb_switch(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaWithBackgroundManagementProcess.do_not_disturb_switch)
}

// .LSLAM.RemoteControlDirection direction = 10;
inline void TuyaWithBackgroundManagementProcess::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::LSLAM::RemoteControlDirection TuyaWithBackgroundManagementProcess::_internal_direction() const {
  return static_cast< ::LSLAM::RemoteControlDirection >(_impl_.direction_);
}
inline ::LSLAM::RemoteControlDirection TuyaWithBackgroundManagementProcess::direction() const {
  // @@protoc_insertion_point(field_get:LSLAM.TuyaWithBackgroundManagementProcess.direction)
  return _internal_direction();
}
inline void TuyaWithBackgroundManagementProcess::_internal_set_direction(::LSLAM::RemoteControlDirection value) {
  
  _impl_.direction_ = value;
}
inline void TuyaWithBackgroundManagementProcess::set_direction(::LSLAM::RemoteControlDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:LSLAM.TuyaWithBackgroundManagementProcess.direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LSLAM::TuyaRobotTaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::TuyaRobotTaskType>() {
  return ::LSLAM::TuyaRobotTaskType_descriptor();
}
template <> struct is_proto_enum< ::LSLAM::RemoteControlDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::RemoteControlDirection>() {
  return ::LSLAM::RemoteControlDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TuyaWithBackgroundManagementProcess_2eproto
