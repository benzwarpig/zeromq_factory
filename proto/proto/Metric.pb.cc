// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Metric.proto

#include "Metric.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR Metric::Metric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.labels_)*/{}
  , /*decltype(_impl_.counts_by_bucket_)*/{}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDefaultTypeInternal() {}
  union {
    Metric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDefaultTypeInternal _Metric_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_Metric_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Metric_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Metric_2eproto = nullptr;

const uint32_t TableStruct_Metric_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::Metric, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Metric, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Metric, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::Metric, _impl_.counts_by_bucket_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::Metric)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_Metric_default_instance_._instance,
};

const char descriptor_table_protodef_Metric_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Metric.proto\022\005LSLAM\032\021MetricLabel.proto"
  "\032\025HistogramBucket.proto\"\271\001\n\006Metric\022\014\n\004ty"
  "pe\030\001 \001(\005\022\"\n\006labels\030\002 \003(\0132\022.LSLAM.MetricL"
  "abel\022\r\n\005value\030\003 \001(\001\0220\n\020counts_by_bucket\030"
  "\004 \003(\0132\026.LSLAM.HistogramBucket\"<\n\004Type\022\020\n"
  "\014TYPE_COUNTER\020\000\022\016\n\nTYPE_GAUGE\020\001\022\022\n\016TYPE_"
  "HISTOGRAM\020\002b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Metric_2eproto_deps[2] = {
  &::descriptor_table_HistogramBucket_2eproto,
  &::descriptor_table_MetricLabel_2eproto,
};
static ::_pbi::once_flag descriptor_table_Metric_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Metric_2eproto = {
    false, false, 259, descriptor_table_protodef_Metric_2eproto,
    "Metric.proto",
    &descriptor_table_Metric_2eproto_once, descriptor_table_Metric_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_Metric_2eproto::offsets,
    file_level_metadata_Metric_2eproto, file_level_enum_descriptors_Metric_2eproto,
    file_level_service_descriptors_Metric_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Metric_2eproto_getter() {
  return &descriptor_table_Metric_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Metric_2eproto(&descriptor_table_Metric_2eproto);
namespace LSLAM {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Metric_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Metric_2eproto);
  return file_level_enum_descriptors_Metric_2eproto[0];
}
bool Metric_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Metric_Type Metric::TYPE_COUNTER;
constexpr Metric_Type Metric::TYPE_GAUGE;
constexpr Metric_Type Metric::TYPE_HISTOGRAM;
constexpr Metric_Type Metric::Type_MIN;
constexpr Metric_Type Metric::Type_MAX;
constexpr int Metric::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Metric::_Internal {
 public:
};

void Metric::clear_labels() {
  _impl_.labels_.Clear();
}
void Metric::clear_counts_by_bucket() {
  _impl_.counts_by_bucket_.Clear();
}
Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.labels_){from._impl_.labels_}
    , decltype(_impl_.counts_by_bucket_){from._impl_.counts_by_bucket_}
    , decltype(_impl_.value_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.Metric)
}

inline void Metric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.labels_){arena}
    , decltype(_impl_.counts_by_bucket_){arena}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:LSLAM.Metric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labels_.~RepeatedPtrField();
  _impl_.counts_by_bucket_.~RepeatedPtrField();
}

void Metric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.Metric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labels_.Clear();
  _impl_.counts_by_bucket_.Clear();
  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.MetricLabel labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.HistogramBucket counts_by_bucket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counts_by_bucket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.Metric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .LSLAM.MetricLabel labels = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_labels_size()); i < n; i++) {
    const auto& repfield = this->_internal_labels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double value = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
  }

  // repeated .LSLAM.HistogramBucket counts_by_bucket = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_counts_by_bucket_size()); i < n; i++) {
    const auto& repfield = this->_internal_counts_by_bucket(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.Metric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.MetricLabel labels = 2;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->_impl_.labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LSLAM.HistogramBucket counts_by_bucket = 4;
  total_size += 1UL * this->_internal_counts_by_bucket_size();
  for (const auto& msg : this->_impl_.counts_by_bucket_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double value = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metric::GetClassData() const { return &_class_data_; }


void Metric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metric*>(&to_msg);
  auto& from = static_cast<const Metric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.Metric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.counts_by_bucket_.MergeFrom(from._impl_.counts_by_bucket_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  _impl_.counts_by_bucket_.InternalSwap(&other->_impl_.counts_by_bucket_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metric, _impl_.type_)
      + sizeof(Metric::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Metric, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Metric_2eproto_getter, &descriptor_table_Metric_2eproto_once,
      file_level_metadata_Metric_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::Metric*
Arena::CreateMaybeMessage< ::LSLAM::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::Metric >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
