// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Header_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Header_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Header_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Header_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Header_2eproto;
namespace LSLAM {
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Header_CustomInfo;
struct Header_CustomInfoDefaultTypeInternal;
extern Header_CustomInfoDefaultTypeInternal _Header_CustomInfo_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::Header* Arena::CreateMaybeMessage<::LSLAM::Header>(Arena*);
template<> ::LSLAM::Header_CustomInfo* Arena::CreateMaybeMessage<::LSLAM::Header_CustomInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class Header_CustomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.Header.CustomInfo) */ {
 public:
  inline Header_CustomInfo() : Header_CustomInfo(nullptr) {}
  ~Header_CustomInfo() override;
  explicit PROTOBUF_CONSTEXPR Header_CustomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header_CustomInfo(const Header_CustomInfo& from);
  Header_CustomInfo(Header_CustomInfo&& from) noexcept
    : Header_CustomInfo() {
    *this = ::std::move(from);
  }

  inline Header_CustomInfo& operator=(const Header_CustomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header_CustomInfo& operator=(Header_CustomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header_CustomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header_CustomInfo* internal_default_instance() {
    return reinterpret_cast<const Header_CustomInfo*>(
               &_Header_CustomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header_CustomInfo& a, Header_CustomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Header_CustomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header_CustomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header_CustomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header_CustomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header_CustomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header_CustomInfo& from) {
    Header_CustomInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header_CustomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.Header.CustomInfo";
  }
  protected:
  explicit Header_CustomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 4,
    kMicrosecondsFieldNumber = 5,
    kCountFieldNumber = 6,
  };
  // int64 seconds = 4;
  void clear_seconds();
  int64_t seconds() const;
  void set_seconds(int64_t value);
  private:
  int64_t _internal_seconds() const;
  void _internal_set_seconds(int64_t value);
  public:

  // int64 microseconds = 5;
  void clear_microseconds();
  int64_t microseconds() const;
  void set_microseconds(int64_t value);
  private:
  int64_t _internal_microseconds() const;
  void _internal_set_microseconds(int64_t value);
  public:

  // uint64 count = 6;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.Header.CustomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t seconds_;
    int64_t microseconds_;
    uint64_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Header_CustomInfo CustomInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 3,
    kStampFieldNumber = 2,
    kCustomFieldNumber = 4,
    kSeqFieldNumber = 1,
  };
  // string frame_id = 3;
  void clear_frame_id();
  const std::string& frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .google.protobuf.Timestamp stamp = 2;
  bool has_stamp() const;
  private:
  bool _internal_has_stamp() const;
  public:
  void clear_stamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& stamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_stamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_stamp();
  void set_allocated_stamp(::PROTOBUF_NAMESPACE_ID::Timestamp* stamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_stamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_stamp();
  public:
  void unsafe_arena_set_allocated_stamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* stamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_stamp();

  // .LSLAM.Header.CustomInfo custom = 4;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::LSLAM::Header_CustomInfo& custom() const;
  PROTOBUF_NODISCARD ::LSLAM::Header_CustomInfo* release_custom();
  ::LSLAM::Header_CustomInfo* mutable_custom();
  void set_allocated_custom(::LSLAM::Header_CustomInfo* custom);
  private:
  const ::LSLAM::Header_CustomInfo& _internal_custom() const;
  ::LSLAM::Header_CustomInfo* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::LSLAM::Header_CustomInfo* custom);
  ::LSLAM::Header_CustomInfo* unsafe_arena_release_custom();

  // uint32 seq = 1;
  void clear_seq();
  uint32_t seq() const;
  void set_seq(uint32_t value);
  private:
  uint32_t _internal_seq() const;
  void _internal_set_seq(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* stamp_;
    ::LSLAM::Header_CustomInfo* custom_;
    uint32_t seq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Header_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header_CustomInfo

// int64 seconds = 4;
inline void Header_CustomInfo::clear_seconds() {
  _impl_.seconds_ = int64_t{0};
}
inline int64_t Header_CustomInfo::_internal_seconds() const {
  return _impl_.seconds_;
}
inline int64_t Header_CustomInfo::seconds() const {
  // @@protoc_insertion_point(field_get:LSLAM.Header.CustomInfo.seconds)
  return _internal_seconds();
}
inline void Header_CustomInfo::_internal_set_seconds(int64_t value) {
  
  _impl_.seconds_ = value;
}
inline void Header_CustomInfo::set_seconds(int64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:LSLAM.Header.CustomInfo.seconds)
}

// int64 microseconds = 5;
inline void Header_CustomInfo::clear_microseconds() {
  _impl_.microseconds_ = int64_t{0};
}
inline int64_t Header_CustomInfo::_internal_microseconds() const {
  return _impl_.microseconds_;
}
inline int64_t Header_CustomInfo::microseconds() const {
  // @@protoc_insertion_point(field_get:LSLAM.Header.CustomInfo.microseconds)
  return _internal_microseconds();
}
inline void Header_CustomInfo::_internal_set_microseconds(int64_t value) {
  
  _impl_.microseconds_ = value;
}
inline void Header_CustomInfo::set_microseconds(int64_t value) {
  _internal_set_microseconds(value);
  // @@protoc_insertion_point(field_set:LSLAM.Header.CustomInfo.microseconds)
}

// uint64 count = 6;
inline void Header_CustomInfo::clear_count() {
  _impl_.count_ = uint64_t{0u};
}
inline uint64_t Header_CustomInfo::_internal_count() const {
  return _impl_.count_;
}
inline uint64_t Header_CustomInfo::count() const {
  // @@protoc_insertion_point(field_get:LSLAM.Header.CustomInfo.count)
  return _internal_count();
}
inline void Header_CustomInfo::_internal_set_count(uint64_t value) {
  
  _impl_.count_ = value;
}
inline void Header_CustomInfo::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:LSLAM.Header.CustomInfo.count)
}

// -------------------------------------------------------------------

// Header

// uint32 seq = 1;
inline void Header::clear_seq() {
  _impl_.seq_ = 0u;
}
inline uint32_t Header::_internal_seq() const {
  return _impl_.seq_;
}
inline uint32_t Header::seq() const {
  // @@protoc_insertion_point(field_get:LSLAM.Header.seq)
  return _internal_seq();
}
inline void Header::_internal_set_seq(uint32_t value) {
  
  _impl_.seq_ = value;
}
inline void Header::set_seq(uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:LSLAM.Header.seq)
}

// .google.protobuf.Timestamp stamp = 2;
inline bool Header::_internal_has_stamp() const {
  return this != internal_default_instance() && _impl_.stamp_ != nullptr;
}
inline bool Header::has_stamp() const {
  return _internal_has_stamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Header::_internal_stamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.stamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Header::stamp() const {
  // @@protoc_insertion_point(field_get:LSLAM.Header.stamp)
  return _internal_stamp();
}
inline void Header::unsafe_arena_set_allocated_stamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* stamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stamp_);
  }
  _impl_.stamp_ = stamp;
  if (stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.Header.stamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::release_stamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.stamp_;
  _impl_.stamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::unsafe_arena_release_stamp() {
  // @@protoc_insertion_point(field_release:LSLAM.Header.stamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.stamp_;
  _impl_.stamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::_internal_mutable_stamp() {
  
  if (_impl_.stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.stamp_ = p;
  }
  return _impl_.stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::mutable_stamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_stamp();
  // @@protoc_insertion_point(field_mutable:LSLAM.Header.stamp)
  return _msg;
}
inline void Header::set_allocated_stamp(::PROTOBUF_NAMESPACE_ID::Timestamp* stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stamp_);
  }
  if (stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp));
    if (message_arena != submessage_arena) {
      stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stamp_ = stamp;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.Header.stamp)
}

// string frame_id = 3;
inline void Header::clear_frame_id() {
  _impl_.frame_id_.ClearToEmpty();
}
inline const std::string& Header::frame_id() const {
  // @@protoc_insertion_point(field_get:LSLAM.Header.frame_id)
  return _internal_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_frame_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LSLAM.Header.frame_id)
}
inline std::string* Header::mutable_frame_id() {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:LSLAM.Header.frame_id)
  return _s;
}
inline const std::string& Header::_internal_frame_id() const {
  return _impl_.frame_id_.Get();
}
inline void Header::_internal_set_frame_id(const std::string& value) {
  
  _impl_.frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_frame_id() {
  
  return _impl_.frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_frame_id() {
  // @@protoc_insertion_point(field_release:LSLAM.Header.frame_id)
  return _impl_.frame_id_.Release();
}
inline void Header::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  _impl_.frame_id_.SetAllocated(frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frame_id_.IsDefault()) {
    _impl_.frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LSLAM.Header.frame_id)
}

// .LSLAM.Header.CustomInfo custom = 4;
inline bool Header::_internal_has_custom() const {
  return this != internal_default_instance() && _impl_.custom_ != nullptr;
}
inline bool Header::has_custom() const {
  return _internal_has_custom();
}
inline void Header::clear_custom() {
  if (GetArenaForAllocation() == nullptr && _impl_.custom_ != nullptr) {
    delete _impl_.custom_;
  }
  _impl_.custom_ = nullptr;
}
inline const ::LSLAM::Header_CustomInfo& Header::_internal_custom() const {
  const ::LSLAM::Header_CustomInfo* p = _impl_.custom_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::Header_CustomInfo&>(
      ::LSLAM::_Header_CustomInfo_default_instance_);
}
inline const ::LSLAM::Header_CustomInfo& Header::custom() const {
  // @@protoc_insertion_point(field_get:LSLAM.Header.custom)
  return _internal_custom();
}
inline void Header::unsafe_arena_set_allocated_custom(
    ::LSLAM::Header_CustomInfo* custom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_);
  }
  _impl_.custom_ = custom;
  if (custom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.Header.custom)
}
inline ::LSLAM::Header_CustomInfo* Header::release_custom() {
  
  ::LSLAM::Header_CustomInfo* temp = _impl_.custom_;
  _impl_.custom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::Header_CustomInfo* Header::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_release:LSLAM.Header.custom)
  
  ::LSLAM::Header_CustomInfo* temp = _impl_.custom_;
  _impl_.custom_ = nullptr;
  return temp;
}
inline ::LSLAM::Header_CustomInfo* Header::_internal_mutable_custom() {
  
  if (_impl_.custom_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::Header_CustomInfo>(GetArenaForAllocation());
    _impl_.custom_ = p;
  }
  return _impl_.custom_;
}
inline ::LSLAM::Header_CustomInfo* Header::mutable_custom() {
  ::LSLAM::Header_CustomInfo* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:LSLAM.Header.custom)
  return _msg;
}
inline void Header::set_allocated_custom(::LSLAM::Header_CustomInfo* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.custom_;
  }
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.custom_ = custom;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.Header.custom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Header_2eproto
