// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PointCloudWithIntensities.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PointCloudWithIntensities_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PointCloudWithIntensities_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PointCloudWithIntensities_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PointCloudWithIntensities_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PointCloudWithIntensities_2eproto;
namespace LSLAM {
class Point3dWithTime;
struct Point3dWithTimeDefaultTypeInternal;
extern Point3dWithTimeDefaultTypeInternal _Point3dWithTime_default_instance_;
class PointCloudWithIntensities;
struct PointCloudWithIntensitiesDefaultTypeInternal;
extern PointCloudWithIntensitiesDefaultTypeInternal _PointCloudWithIntensities_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::Point3dWithTime* Arena::CreateMaybeMessage<::LSLAM::Point3dWithTime>(Arena*);
template<> ::LSLAM::PointCloudWithIntensities* Arena::CreateMaybeMessage<::LSLAM::PointCloudWithIntensities>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

enum LidarErrorType : int {
  NO_ERROR = 0,
  LIDAR_COMMUNICATION_ERROR = 1,
  LIDAR_HARDWARE_ERROR = 2,
  LidarErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LidarErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LidarErrorType_IsValid(int value);
constexpr LidarErrorType LidarErrorType_MIN = NO_ERROR;
constexpr LidarErrorType LidarErrorType_MAX = LIDAR_HARDWARE_ERROR;
constexpr int LidarErrorType_ARRAYSIZE = LidarErrorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LidarErrorType_descriptor();
template<typename T>
inline const std::string& LidarErrorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LidarErrorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LidarErrorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LidarErrorType_descriptor(), enum_t_value);
}
inline bool LidarErrorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LidarErrorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LidarErrorType>(
    LidarErrorType_descriptor(), name, value);
}
// ===================================================================

class Point3dWithTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.Point3dWithTime) */ {
 public:
  inline Point3dWithTime() : Point3dWithTime(nullptr) {}
  ~Point3dWithTime() override;
  explicit PROTOBUF_CONSTEXPR Point3dWithTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point3dWithTime(const Point3dWithTime& from);
  Point3dWithTime(Point3dWithTime&& from) noexcept
    : Point3dWithTime() {
    *this = ::std::move(from);
  }

  inline Point3dWithTime& operator=(const Point3dWithTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3dWithTime& operator=(Point3dWithTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point3dWithTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point3dWithTime* internal_default_instance() {
    return reinterpret_cast<const Point3dWithTime*>(
               &_Point3dWithTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point3dWithTime& a, Point3dWithTime& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3dWithTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3dWithTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point3dWithTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point3dWithTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point3dWithTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point3dWithTime& from) {
    Point3dWithTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3dWithTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.Point3dWithTime";
  }
  protected:
  explicit Point3dWithTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double time = 4;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.Point3dWithTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    double time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PointCloudWithIntensities_2eproto;
};
// -------------------------------------------------------------------

class PointCloudWithIntensities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.PointCloudWithIntensities) */ {
 public:
  inline PointCloudWithIntensities() : PointCloudWithIntensities(nullptr) {}
  ~PointCloudWithIntensities() override;
  explicit PROTOBUF_CONSTEXPR PointCloudWithIntensities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloudWithIntensities(const PointCloudWithIntensities& from);
  PointCloudWithIntensities(PointCloudWithIntensities&& from) noexcept
    : PointCloudWithIntensities() {
    *this = ::std::move(from);
  }

  inline PointCloudWithIntensities& operator=(const PointCloudWithIntensities& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloudWithIntensities& operator=(PointCloudWithIntensities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloudWithIntensities& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloudWithIntensities* internal_default_instance() {
    return reinterpret_cast<const PointCloudWithIntensities*>(
               &_PointCloudWithIntensities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointCloudWithIntensities& a, PointCloudWithIntensities& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloudWithIntensities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloudWithIntensities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointCloudWithIntensities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointCloudWithIntensities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointCloudWithIntensities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PointCloudWithIntensities& from) {
    PointCloudWithIntensities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloudWithIntensities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.PointCloudWithIntensities";
  }
  protected:
  explicit PointCloudWithIntensities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kIntensitiesFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kLidarErrorTypeFieldNumber = 4,
    kLidarErrorCodeFieldNumber = 5,
  };
  // repeated .LSLAM.Point3dWithTime points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::LSLAM::Point3dWithTime* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point3dWithTime >*
      mutable_points();
  private:
  const ::LSLAM::Point3dWithTime& _internal_points(int index) const;
  ::LSLAM::Point3dWithTime* _internal_add_points();
  public:
  const ::LSLAM::Point3dWithTime& points(int index) const;
  ::LSLAM::Point3dWithTime* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point3dWithTime >&
      points() const;

  // repeated double intensities = 3;
  int intensities_size() const;
  private:
  int _internal_intensities_size() const;
  public:
  void clear_intensities();
  private:
  double _internal_intensities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_intensities() const;
  void _internal_add_intensities(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_intensities();
  public:
  double intensities(int index) const;
  void set_intensities(int index, double value);
  void add_intensities(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      intensities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_intensities();

  // .LSLAM.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::LSLAM::Header& header() const;
  PROTOBUF_NODISCARD ::LSLAM::Header* release_header();
  ::LSLAM::Header* mutable_header();
  void set_allocated_header(::LSLAM::Header* header);
  private:
  const ::LSLAM::Header& _internal_header() const;
  ::LSLAM::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::LSLAM::Header* header);
  ::LSLAM::Header* unsafe_arena_release_header();

  // .LSLAM.LidarErrorType lidar_error_type = 4;
  void clear_lidar_error_type();
  ::LSLAM::LidarErrorType lidar_error_type() const;
  void set_lidar_error_type(::LSLAM::LidarErrorType value);
  private:
  ::LSLAM::LidarErrorType _internal_lidar_error_type() const;
  void _internal_set_lidar_error_type(::LSLAM::LidarErrorType value);
  public:

  // int32 lidar_error_code = 5;
  void clear_lidar_error_code();
  int32_t lidar_error_code() const;
  void set_lidar_error_code(int32_t value);
  private:
  int32_t _internal_lidar_error_code() const;
  void _internal_set_lidar_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.PointCloudWithIntensities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point3dWithTime > points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > intensities_;
    ::LSLAM::Header* header_;
    int lidar_error_type_;
    int32_t lidar_error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PointCloudWithIntensities_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point3dWithTime

// double x = 1;
inline void Point3dWithTime::clear_x() {
  _impl_.x_ = 0;
}
inline double Point3dWithTime::_internal_x() const {
  return _impl_.x_;
}
inline double Point3dWithTime::x() const {
  // @@protoc_insertion_point(field_get:LSLAM.Point3dWithTime.x)
  return _internal_x();
}
inline void Point3dWithTime::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Point3dWithTime::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:LSLAM.Point3dWithTime.x)
}

// double y = 2;
inline void Point3dWithTime::clear_y() {
  _impl_.y_ = 0;
}
inline double Point3dWithTime::_internal_y() const {
  return _impl_.y_;
}
inline double Point3dWithTime::y() const {
  // @@protoc_insertion_point(field_get:LSLAM.Point3dWithTime.y)
  return _internal_y();
}
inline void Point3dWithTime::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Point3dWithTime::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:LSLAM.Point3dWithTime.y)
}

// double z = 3;
inline void Point3dWithTime::clear_z() {
  _impl_.z_ = 0;
}
inline double Point3dWithTime::_internal_z() const {
  return _impl_.z_;
}
inline double Point3dWithTime::z() const {
  // @@protoc_insertion_point(field_get:LSLAM.Point3dWithTime.z)
  return _internal_z();
}
inline void Point3dWithTime::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void Point3dWithTime::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:LSLAM.Point3dWithTime.z)
}

// double time = 4;
inline void Point3dWithTime::clear_time() {
  _impl_.time_ = 0;
}
inline double Point3dWithTime::_internal_time() const {
  return _impl_.time_;
}
inline double Point3dWithTime::time() const {
  // @@protoc_insertion_point(field_get:LSLAM.Point3dWithTime.time)
  return _internal_time();
}
inline void Point3dWithTime::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void Point3dWithTime::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:LSLAM.Point3dWithTime.time)
}

// -------------------------------------------------------------------

// PointCloudWithIntensities

// .LSLAM.Header header = 1;
inline bool PointCloudWithIntensities::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool PointCloudWithIntensities::has_header() const {
  return _internal_has_header();
}
inline const ::LSLAM::Header& PointCloudWithIntensities::_internal_header() const {
  const ::LSLAM::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::Header&>(
      ::LSLAM::_Header_default_instance_);
}
inline const ::LSLAM::Header& PointCloudWithIntensities::header() const {
  // @@protoc_insertion_point(field_get:LSLAM.PointCloudWithIntensities.header)
  return _internal_header();
}
inline void PointCloudWithIntensities::unsafe_arena_set_allocated_header(
    ::LSLAM::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.PointCloudWithIntensities.header)
}
inline ::LSLAM::Header* PointCloudWithIntensities::release_header() {
  
  ::LSLAM::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::Header* PointCloudWithIntensities::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:LSLAM.PointCloudWithIntensities.header)
  
  ::LSLAM::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::LSLAM::Header* PointCloudWithIntensities::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::LSLAM::Header* PointCloudWithIntensities::mutable_header() {
  ::LSLAM::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:LSLAM.PointCloudWithIntensities.header)
  return _msg;
}
inline void PointCloudWithIntensities::set_allocated_header(::LSLAM::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.PointCloudWithIntensities.header)
}

// repeated .LSLAM.Point3dWithTime points = 2;
inline int PointCloudWithIntensities::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int PointCloudWithIntensities::points_size() const {
  return _internal_points_size();
}
inline void PointCloudWithIntensities::clear_points() {
  _impl_.points_.Clear();
}
inline ::LSLAM::Point3dWithTime* PointCloudWithIntensities::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.PointCloudWithIntensities.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point3dWithTime >*
PointCloudWithIntensities::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.PointCloudWithIntensities.points)
  return &_impl_.points_;
}
inline const ::LSLAM::Point3dWithTime& PointCloudWithIntensities::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::LSLAM::Point3dWithTime& PointCloudWithIntensities::points(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.PointCloudWithIntensities.points)
  return _internal_points(index);
}
inline ::LSLAM::Point3dWithTime* PointCloudWithIntensities::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::LSLAM::Point3dWithTime* PointCloudWithIntensities::add_points() {
  ::LSLAM::Point3dWithTime* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:LSLAM.PointCloudWithIntensities.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point3dWithTime >&
PointCloudWithIntensities::points() const {
  // @@protoc_insertion_point(field_list:LSLAM.PointCloudWithIntensities.points)
  return _impl_.points_;
}

// repeated double intensities = 3;
inline int PointCloudWithIntensities::_internal_intensities_size() const {
  return _impl_.intensities_.size();
}
inline int PointCloudWithIntensities::intensities_size() const {
  return _internal_intensities_size();
}
inline void PointCloudWithIntensities::clear_intensities() {
  _impl_.intensities_.Clear();
}
inline double PointCloudWithIntensities::_internal_intensities(int index) const {
  return _impl_.intensities_.Get(index);
}
inline double PointCloudWithIntensities::intensities(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.PointCloudWithIntensities.intensities)
  return _internal_intensities(index);
}
inline void PointCloudWithIntensities::set_intensities(int index, double value) {
  _impl_.intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.PointCloudWithIntensities.intensities)
}
inline void PointCloudWithIntensities::_internal_add_intensities(double value) {
  _impl_.intensities_.Add(value);
}
inline void PointCloudWithIntensities::add_intensities(double value) {
  _internal_add_intensities(value);
  // @@protoc_insertion_point(field_add:LSLAM.PointCloudWithIntensities.intensities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PointCloudWithIntensities::_internal_intensities() const {
  return _impl_.intensities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PointCloudWithIntensities::intensities() const {
  // @@protoc_insertion_point(field_list:LSLAM.PointCloudWithIntensities.intensities)
  return _internal_intensities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PointCloudWithIntensities::_internal_mutable_intensities() {
  return &_impl_.intensities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PointCloudWithIntensities::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.PointCloudWithIntensities.intensities)
  return _internal_mutable_intensities();
}

// .LSLAM.LidarErrorType lidar_error_type = 4;
inline void PointCloudWithIntensities::clear_lidar_error_type() {
  _impl_.lidar_error_type_ = 0;
}
inline ::LSLAM::LidarErrorType PointCloudWithIntensities::_internal_lidar_error_type() const {
  return static_cast< ::LSLAM::LidarErrorType >(_impl_.lidar_error_type_);
}
inline ::LSLAM::LidarErrorType PointCloudWithIntensities::lidar_error_type() const {
  // @@protoc_insertion_point(field_get:LSLAM.PointCloudWithIntensities.lidar_error_type)
  return _internal_lidar_error_type();
}
inline void PointCloudWithIntensities::_internal_set_lidar_error_type(::LSLAM::LidarErrorType value) {
  
  _impl_.lidar_error_type_ = value;
}
inline void PointCloudWithIntensities::set_lidar_error_type(::LSLAM::LidarErrorType value) {
  _internal_set_lidar_error_type(value);
  // @@protoc_insertion_point(field_set:LSLAM.PointCloudWithIntensities.lidar_error_type)
}

// int32 lidar_error_code = 5;
inline void PointCloudWithIntensities::clear_lidar_error_code() {
  _impl_.lidar_error_code_ = 0;
}
inline int32_t PointCloudWithIntensities::_internal_lidar_error_code() const {
  return _impl_.lidar_error_code_;
}
inline int32_t PointCloudWithIntensities::lidar_error_code() const {
  // @@protoc_insertion_point(field_get:LSLAM.PointCloudWithIntensities.lidar_error_code)
  return _internal_lidar_error_code();
}
inline void PointCloudWithIntensities::_internal_set_lidar_error_code(int32_t value) {
  
  _impl_.lidar_error_code_ = value;
}
inline void PointCloudWithIntensities::set_lidar_error_code(int32_t value) {
  _internal_set_lidar_error_code(value);
  // @@protoc_insertion_point(field_set:LSLAM.PointCloudWithIntensities.lidar_error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LSLAM::LidarErrorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::LidarErrorType>() {
  return ::LSLAM::LidarErrorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PointCloudWithIntensities_2eproto
