// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LineLaserMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LineLaserMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LineLaserMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LineLaserMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LineLaserMsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LineLaserMsg_2eproto;
namespace LSLAM {
class LaserDate;
struct LaserDateDefaultTypeInternal;
extern LaserDateDefaultTypeInternal _LaserDate_default_instance_;
class LineLaserMsg;
struct LineLaserMsgDefaultTypeInternal;
extern LineLaserMsgDefaultTypeInternal _LineLaserMsg_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::LaserDate* Arena::CreateMaybeMessage<::LSLAM::LaserDate>(Arena*);
template<> ::LSLAM::LineLaserMsg* Arena::CreateMaybeMessage<::LSLAM::LineLaserMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class LaserDate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.LaserDate) */ {
 public:
  inline LaserDate() : LaserDate(nullptr) {}
  ~LaserDate() override;
  explicit PROTOBUF_CONSTEXPR LaserDate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaserDate(const LaserDate& from);
  LaserDate(LaserDate&& from) noexcept
    : LaserDate() {
    *this = ::std::move(from);
  }

  inline LaserDate& operator=(const LaserDate& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserDate& operator=(LaserDate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaserDate& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaserDate* internal_default_instance() {
    return reinterpret_cast<const LaserDate*>(
               &_LaserDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaserDate& a, LaserDate& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserDate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaserDate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaserDate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaserDate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaserDate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LaserDate& from) {
    LaserDate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserDate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.LaserDate";
  }
  protected:
  explicit LaserDate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 1,
    kAngleFieldNumber = 2,
    kIntensityFieldNumber = 3,
  };
  // double distance = 1;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // double angle = 2;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // double intensity = 3;
  void clear_intensity();
  double intensity() const;
  void set_intensity(double value);
  private:
  double _internal_intensity() const;
  void _internal_set_intensity(double value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.LaserDate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double distance_;
    double angle_;
    double intensity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LineLaserMsg_2eproto;
};
// -------------------------------------------------------------------

class LineLaserMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.LineLaserMsg) */ {
 public:
  inline LineLaserMsg() : LineLaserMsg(nullptr) {}
  ~LineLaserMsg() override;
  explicit PROTOBUF_CONSTEXPR LineLaserMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineLaserMsg(const LineLaserMsg& from);
  LineLaserMsg(LineLaserMsg&& from) noexcept
    : LineLaserMsg() {
    *this = ::std::move(from);
  }

  inline LineLaserMsg& operator=(const LineLaserMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineLaserMsg& operator=(LineLaserMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LineLaserMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineLaserMsg* internal_default_instance() {
    return reinterpret_cast<const LineLaserMsg*>(
               &_LineLaserMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LineLaserMsg& a, LineLaserMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(LineLaserMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineLaserMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LineLaserMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LineLaserMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LineLaserMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LineLaserMsg& from) {
    LineLaserMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineLaserMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.LineLaserMsg";
  }
  protected:
  explicit LineLaserMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontLineLaserFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kTheAimPointFieldNumber = 3,
    kEffectivePointsFieldNumber = 4,
  };
  // repeated .LSLAM.LaserDate front_line_laser = 2;
  int front_line_laser_size() const;
  private:
  int _internal_front_line_laser_size() const;
  public:
  void clear_front_line_laser();
  ::LSLAM::LaserDate* mutable_front_line_laser(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::LaserDate >*
      mutable_front_line_laser();
  private:
  const ::LSLAM::LaserDate& _internal_front_line_laser(int index) const;
  ::LSLAM::LaserDate* _internal_add_front_line_laser();
  public:
  const ::LSLAM::LaserDate& front_line_laser(int index) const;
  ::LSLAM::LaserDate* add_front_line_laser();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::LaserDate >&
      front_line_laser() const;

  // .LSLAM.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::LSLAM::Header& header() const;
  PROTOBUF_NODISCARD ::LSLAM::Header* release_header();
  ::LSLAM::Header* mutable_header();
  void set_allocated_header(::LSLAM::Header* header);
  private:
  const ::LSLAM::Header& _internal_header() const;
  ::LSLAM::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::LSLAM::Header* header);
  ::LSLAM::Header* unsafe_arena_release_header();

  // .LSLAM.LaserDate the_aim_point = 3;
  bool has_the_aim_point() const;
  private:
  bool _internal_has_the_aim_point() const;
  public:
  void clear_the_aim_point();
  const ::LSLAM::LaserDate& the_aim_point() const;
  PROTOBUF_NODISCARD ::LSLAM::LaserDate* release_the_aim_point();
  ::LSLAM::LaserDate* mutable_the_aim_point();
  void set_allocated_the_aim_point(::LSLAM::LaserDate* the_aim_point);
  private:
  const ::LSLAM::LaserDate& _internal_the_aim_point() const;
  ::LSLAM::LaserDate* _internal_mutable_the_aim_point();
  public:
  void unsafe_arena_set_allocated_the_aim_point(
      ::LSLAM::LaserDate* the_aim_point);
  ::LSLAM::LaserDate* unsafe_arena_release_the_aim_point();

  // double effective_points = 4;
  void clear_effective_points();
  double effective_points() const;
  void set_effective_points(double value);
  private:
  double _internal_effective_points() const;
  void _internal_set_effective_points(double value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.LineLaserMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::LaserDate > front_line_laser_;
    ::LSLAM::Header* header_;
    ::LSLAM::LaserDate* the_aim_point_;
    double effective_points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LineLaserMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaserDate

// double distance = 1;
inline void LaserDate::clear_distance() {
  _impl_.distance_ = 0;
}
inline double LaserDate::_internal_distance() const {
  return _impl_.distance_;
}
inline double LaserDate::distance() const {
  // @@protoc_insertion_point(field_get:LSLAM.LaserDate.distance)
  return _internal_distance();
}
inline void LaserDate::_internal_set_distance(double value) {
  
  _impl_.distance_ = value;
}
inline void LaserDate::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:LSLAM.LaserDate.distance)
}

// double angle = 2;
inline void LaserDate::clear_angle() {
  _impl_.angle_ = 0;
}
inline double LaserDate::_internal_angle() const {
  return _impl_.angle_;
}
inline double LaserDate::angle() const {
  // @@protoc_insertion_point(field_get:LSLAM.LaserDate.angle)
  return _internal_angle();
}
inline void LaserDate::_internal_set_angle(double value) {
  
  _impl_.angle_ = value;
}
inline void LaserDate::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:LSLAM.LaserDate.angle)
}

// double intensity = 3;
inline void LaserDate::clear_intensity() {
  _impl_.intensity_ = 0;
}
inline double LaserDate::_internal_intensity() const {
  return _impl_.intensity_;
}
inline double LaserDate::intensity() const {
  // @@protoc_insertion_point(field_get:LSLAM.LaserDate.intensity)
  return _internal_intensity();
}
inline void LaserDate::_internal_set_intensity(double value) {
  
  _impl_.intensity_ = value;
}
inline void LaserDate::set_intensity(double value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:LSLAM.LaserDate.intensity)
}

// -------------------------------------------------------------------

// LineLaserMsg

// .LSLAM.Header header = 1;
inline bool LineLaserMsg::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool LineLaserMsg::has_header() const {
  return _internal_has_header();
}
inline const ::LSLAM::Header& LineLaserMsg::_internal_header() const {
  const ::LSLAM::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::Header&>(
      ::LSLAM::_Header_default_instance_);
}
inline const ::LSLAM::Header& LineLaserMsg::header() const {
  // @@protoc_insertion_point(field_get:LSLAM.LineLaserMsg.header)
  return _internal_header();
}
inline void LineLaserMsg::unsafe_arena_set_allocated_header(
    ::LSLAM::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.LineLaserMsg.header)
}
inline ::LSLAM::Header* LineLaserMsg::release_header() {
  
  ::LSLAM::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::Header* LineLaserMsg::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:LSLAM.LineLaserMsg.header)
  
  ::LSLAM::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::LSLAM::Header* LineLaserMsg::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::LSLAM::Header* LineLaserMsg::mutable_header() {
  ::LSLAM::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:LSLAM.LineLaserMsg.header)
  return _msg;
}
inline void LineLaserMsg::set_allocated_header(::LSLAM::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.LineLaserMsg.header)
}

// repeated .LSLAM.LaserDate front_line_laser = 2;
inline int LineLaserMsg::_internal_front_line_laser_size() const {
  return _impl_.front_line_laser_.size();
}
inline int LineLaserMsg::front_line_laser_size() const {
  return _internal_front_line_laser_size();
}
inline void LineLaserMsg::clear_front_line_laser() {
  _impl_.front_line_laser_.Clear();
}
inline ::LSLAM::LaserDate* LineLaserMsg::mutable_front_line_laser(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.LineLaserMsg.front_line_laser)
  return _impl_.front_line_laser_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::LaserDate >*
LineLaserMsg::mutable_front_line_laser() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.LineLaserMsg.front_line_laser)
  return &_impl_.front_line_laser_;
}
inline const ::LSLAM::LaserDate& LineLaserMsg::_internal_front_line_laser(int index) const {
  return _impl_.front_line_laser_.Get(index);
}
inline const ::LSLAM::LaserDate& LineLaserMsg::front_line_laser(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.LineLaserMsg.front_line_laser)
  return _internal_front_line_laser(index);
}
inline ::LSLAM::LaserDate* LineLaserMsg::_internal_add_front_line_laser() {
  return _impl_.front_line_laser_.Add();
}
inline ::LSLAM::LaserDate* LineLaserMsg::add_front_line_laser() {
  ::LSLAM::LaserDate* _add = _internal_add_front_line_laser();
  // @@protoc_insertion_point(field_add:LSLAM.LineLaserMsg.front_line_laser)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::LaserDate >&
LineLaserMsg::front_line_laser() const {
  // @@protoc_insertion_point(field_list:LSLAM.LineLaserMsg.front_line_laser)
  return _impl_.front_line_laser_;
}

// .LSLAM.LaserDate the_aim_point = 3;
inline bool LineLaserMsg::_internal_has_the_aim_point() const {
  return this != internal_default_instance() && _impl_.the_aim_point_ != nullptr;
}
inline bool LineLaserMsg::has_the_aim_point() const {
  return _internal_has_the_aim_point();
}
inline void LineLaserMsg::clear_the_aim_point() {
  if (GetArenaForAllocation() == nullptr && _impl_.the_aim_point_ != nullptr) {
    delete _impl_.the_aim_point_;
  }
  _impl_.the_aim_point_ = nullptr;
}
inline const ::LSLAM::LaserDate& LineLaserMsg::_internal_the_aim_point() const {
  const ::LSLAM::LaserDate* p = _impl_.the_aim_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::LaserDate&>(
      ::LSLAM::_LaserDate_default_instance_);
}
inline const ::LSLAM::LaserDate& LineLaserMsg::the_aim_point() const {
  // @@protoc_insertion_point(field_get:LSLAM.LineLaserMsg.the_aim_point)
  return _internal_the_aim_point();
}
inline void LineLaserMsg::unsafe_arena_set_allocated_the_aim_point(
    ::LSLAM::LaserDate* the_aim_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.the_aim_point_);
  }
  _impl_.the_aim_point_ = the_aim_point;
  if (the_aim_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.LineLaserMsg.the_aim_point)
}
inline ::LSLAM::LaserDate* LineLaserMsg::release_the_aim_point() {
  
  ::LSLAM::LaserDate* temp = _impl_.the_aim_point_;
  _impl_.the_aim_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::LaserDate* LineLaserMsg::unsafe_arena_release_the_aim_point() {
  // @@protoc_insertion_point(field_release:LSLAM.LineLaserMsg.the_aim_point)
  
  ::LSLAM::LaserDate* temp = _impl_.the_aim_point_;
  _impl_.the_aim_point_ = nullptr;
  return temp;
}
inline ::LSLAM::LaserDate* LineLaserMsg::_internal_mutable_the_aim_point() {
  
  if (_impl_.the_aim_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::LaserDate>(GetArenaForAllocation());
    _impl_.the_aim_point_ = p;
  }
  return _impl_.the_aim_point_;
}
inline ::LSLAM::LaserDate* LineLaserMsg::mutable_the_aim_point() {
  ::LSLAM::LaserDate* _msg = _internal_mutable_the_aim_point();
  // @@protoc_insertion_point(field_mutable:LSLAM.LineLaserMsg.the_aim_point)
  return _msg;
}
inline void LineLaserMsg::set_allocated_the_aim_point(::LSLAM::LaserDate* the_aim_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.the_aim_point_;
  }
  if (the_aim_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(the_aim_point);
    if (message_arena != submessage_arena) {
      the_aim_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, the_aim_point, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.the_aim_point_ = the_aim_point;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.LineLaserMsg.the_aim_point)
}

// double effective_points = 4;
inline void LineLaserMsg::clear_effective_points() {
  _impl_.effective_points_ = 0;
}
inline double LineLaserMsg::_internal_effective_points() const {
  return _impl_.effective_points_;
}
inline double LineLaserMsg::effective_points() const {
  // @@protoc_insertion_point(field_get:LSLAM.LineLaserMsg.effective_points)
  return _internal_effective_points();
}
inline void LineLaserMsg::_internal_set_effective_points(double value) {
  
  _impl_.effective_points_ = value;
}
inline void LineLaserMsg::set_effective_points(double value) {
  _internal_set_effective_points(value);
  // @@protoc_insertion_point(field_set:LSLAM.LineLaserMsg.effective_points)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LineLaserMsg_2eproto
