// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MultiEchoLaserScan.proto

#include "MultiEchoLaserScan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR MultiEchoLaserScan::MultiEchoLaserScan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ranges_)*/{}
  , /*decltype(_impl_.intensities_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.angle_min_)*/0
  , /*decltype(_impl_.angle_max_)*/0
  , /*decltype(_impl_.angle_increment_)*/0
  , /*decltype(_impl_.time_increment_)*/0
  , /*decltype(_impl_.scan_time_)*/0
  , /*decltype(_impl_.range_min_)*/0
  , /*decltype(_impl_.range_max_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiEchoLaserScanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiEchoLaserScanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiEchoLaserScanDefaultTypeInternal() {}
  union {
    MultiEchoLaserScan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiEchoLaserScanDefaultTypeInternal _MultiEchoLaserScan_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_MultiEchoLaserScan_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MultiEchoLaserScan_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MultiEchoLaserScan_2eproto = nullptr;

const uint32_t TableStruct_MultiEchoLaserScan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::MultiEchoLaserScan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::MultiEchoLaserScan, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MultiEchoLaserScan, _impl_.angle_min_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MultiEchoLaserScan, _impl_.angle_max_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MultiEchoLaserScan, _impl_.angle_increment_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MultiEchoLaserScan, _impl_.time_increment_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MultiEchoLaserScan, _impl_.scan_time_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MultiEchoLaserScan, _impl_.range_min_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MultiEchoLaserScan, _impl_.range_max_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MultiEchoLaserScan, _impl_.ranges_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MultiEchoLaserScan, _impl_.intensities_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::MultiEchoLaserScan)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_MultiEchoLaserScan_default_instance_._instance,
};

const char descriptor_table_protodef_MultiEchoLaserScan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030MultiEchoLaserScan.proto\022\005LSLAM\032\014Heade"
  "r.proto\032\017LaserEcho.proto\"\214\002\n\022MultiEchoLa"
  "serScan\022\035\n\006header\030\001 \001(\0132\r.LSLAM.Header\022\021"
  "\n\tangle_min\030\002 \001(\001\022\021\n\tangle_max\030\003 \001(\001\022\027\n\017"
  "angle_increment\030\004 \001(\001\022\026\n\016time_increment\030"
  "\005 \001(\001\022\021\n\tscan_time\030\006 \001(\001\022\021\n\trange_min\030\007 "
  "\001(\001\022\021\n\trange_max\030\010 \001(\001\022 \n\006ranges\030\t \003(\0132\020"
  ".LSLAM.LaserEcho\022%\n\013intensities\030\n \003(\0132\020."
  "LSLAM.LaserEchob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MultiEchoLaserScan_2eproto_deps[2] = {
  &::descriptor_table_Header_2eproto,
  &::descriptor_table_LaserEcho_2eproto,
};
static ::_pbi::once_flag descriptor_table_MultiEchoLaserScan_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MultiEchoLaserScan_2eproto = {
    false, false, 343, descriptor_table_protodef_MultiEchoLaserScan_2eproto,
    "MultiEchoLaserScan.proto",
    &descriptor_table_MultiEchoLaserScan_2eproto_once, descriptor_table_MultiEchoLaserScan_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_MultiEchoLaserScan_2eproto::offsets,
    file_level_metadata_MultiEchoLaserScan_2eproto, file_level_enum_descriptors_MultiEchoLaserScan_2eproto,
    file_level_service_descriptors_MultiEchoLaserScan_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MultiEchoLaserScan_2eproto_getter() {
  return &descriptor_table_MultiEchoLaserScan_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MultiEchoLaserScan_2eproto(&descriptor_table_MultiEchoLaserScan_2eproto);
namespace LSLAM {

// ===================================================================

class MultiEchoLaserScan::_Internal {
 public:
  static const ::LSLAM::Header& header(const MultiEchoLaserScan* msg);
};

const ::LSLAM::Header&
MultiEchoLaserScan::_Internal::header(const MultiEchoLaserScan* msg) {
  return *msg->_impl_.header_;
}
void MultiEchoLaserScan::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void MultiEchoLaserScan::clear_ranges() {
  _impl_.ranges_.Clear();
}
void MultiEchoLaserScan::clear_intensities() {
  _impl_.intensities_.Clear();
}
MultiEchoLaserScan::MultiEchoLaserScan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.MultiEchoLaserScan)
}
MultiEchoLaserScan::MultiEchoLaserScan(const MultiEchoLaserScan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiEchoLaserScan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ranges_){from._impl_.ranges_}
    , decltype(_impl_.intensities_){from._impl_.intensities_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.angle_min_){}
    , decltype(_impl_.angle_max_){}
    , decltype(_impl_.angle_increment_){}
    , decltype(_impl_.time_increment_){}
    , decltype(_impl_.scan_time_){}
    , decltype(_impl_.range_min_){}
    , decltype(_impl_.range_max_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::LSLAM::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.angle_min_, &from._impl_.angle_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_max_) -
    reinterpret_cast<char*>(&_impl_.angle_min_)) + sizeof(_impl_.range_max_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.MultiEchoLaserScan)
}

inline void MultiEchoLaserScan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ranges_){arena}
    , decltype(_impl_.intensities_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.angle_min_){0}
    , decltype(_impl_.angle_max_){0}
    , decltype(_impl_.angle_increment_){0}
    , decltype(_impl_.time_increment_){0}
    , decltype(_impl_.scan_time_){0}
    , decltype(_impl_.range_min_){0}
    , decltype(_impl_.range_max_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiEchoLaserScan::~MultiEchoLaserScan() {
  // @@protoc_insertion_point(destructor:LSLAM.MultiEchoLaserScan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiEchoLaserScan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ranges_.~RepeatedPtrField();
  _impl_.intensities_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void MultiEchoLaserScan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiEchoLaserScan::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.MultiEchoLaserScan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ranges_.Clear();
  _impl_.intensities_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  ::memset(&_impl_.angle_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.range_max_) -
      reinterpret_cast<char*>(&_impl_.angle_min_)) + sizeof(_impl_.range_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiEchoLaserScan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double angle_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.angle_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double angle_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.angle_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double angle_increment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.angle_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double time_increment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.time_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double scan_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.scan_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double range_min = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.range_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double range_max = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.range_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.LaserEcho ranges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.LaserEcho intensities = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intensities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiEchoLaserScan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.MultiEchoLaserScan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // double angle_min = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_min = this->_internal_angle_min();
  uint64_t raw_angle_min;
  memcpy(&raw_angle_min, &tmp_angle_min, sizeof(tmp_angle_min));
  if (raw_angle_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_angle_min(), target);
  }

  // double angle_max = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_max = this->_internal_angle_max();
  uint64_t raw_angle_max;
  memcpy(&raw_angle_max, &tmp_angle_max, sizeof(tmp_angle_max));
  if (raw_angle_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_angle_max(), target);
  }

  // double angle_increment = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_increment = this->_internal_angle_increment();
  uint64_t raw_angle_increment;
  memcpy(&raw_angle_increment, &tmp_angle_increment, sizeof(tmp_angle_increment));
  if (raw_angle_increment != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_angle_increment(), target);
  }

  // double time_increment = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_increment = this->_internal_time_increment();
  uint64_t raw_time_increment;
  memcpy(&raw_time_increment, &tmp_time_increment, sizeof(tmp_time_increment));
  if (raw_time_increment != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_time_increment(), target);
  }

  // double scan_time = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scan_time = this->_internal_scan_time();
  uint64_t raw_scan_time;
  memcpy(&raw_scan_time, &tmp_scan_time, sizeof(tmp_scan_time));
  if (raw_scan_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_scan_time(), target);
  }

  // double range_min = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_range_min = this->_internal_range_min();
  uint64_t raw_range_min;
  memcpy(&raw_range_min, &tmp_range_min, sizeof(tmp_range_min));
  if (raw_range_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_range_min(), target);
  }

  // double range_max = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_range_max = this->_internal_range_max();
  uint64_t raw_range_max;
  memcpy(&raw_range_max, &tmp_range_max, sizeof(tmp_range_max));
  if (raw_range_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_range_max(), target);
  }

  // repeated .LSLAM.LaserEcho ranges = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .LSLAM.LaserEcho intensities = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_intensities_size()); i < n; i++) {
    const auto& repfield = this->_internal_intensities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.MultiEchoLaserScan)
  return target;
}

size_t MultiEchoLaserScan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.MultiEchoLaserScan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.LaserEcho ranges = 9;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->_impl_.ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LSLAM.LaserEcho intensities = 10;
  total_size += 1UL * this->_internal_intensities_size();
  for (const auto& msg : this->_impl_.intensities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .LSLAM.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // double angle_min = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_min = this->_internal_angle_min();
  uint64_t raw_angle_min;
  memcpy(&raw_angle_min, &tmp_angle_min, sizeof(tmp_angle_min));
  if (raw_angle_min != 0) {
    total_size += 1 + 8;
  }

  // double angle_max = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_max = this->_internal_angle_max();
  uint64_t raw_angle_max;
  memcpy(&raw_angle_max, &tmp_angle_max, sizeof(tmp_angle_max));
  if (raw_angle_max != 0) {
    total_size += 1 + 8;
  }

  // double angle_increment = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_increment = this->_internal_angle_increment();
  uint64_t raw_angle_increment;
  memcpy(&raw_angle_increment, &tmp_angle_increment, sizeof(tmp_angle_increment));
  if (raw_angle_increment != 0) {
    total_size += 1 + 8;
  }

  // double time_increment = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_increment = this->_internal_time_increment();
  uint64_t raw_time_increment;
  memcpy(&raw_time_increment, &tmp_time_increment, sizeof(tmp_time_increment));
  if (raw_time_increment != 0) {
    total_size += 1 + 8;
  }

  // double scan_time = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scan_time = this->_internal_scan_time();
  uint64_t raw_scan_time;
  memcpy(&raw_scan_time, &tmp_scan_time, sizeof(tmp_scan_time));
  if (raw_scan_time != 0) {
    total_size += 1 + 8;
  }

  // double range_min = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_range_min = this->_internal_range_min();
  uint64_t raw_range_min;
  memcpy(&raw_range_min, &tmp_range_min, sizeof(tmp_range_min));
  if (raw_range_min != 0) {
    total_size += 1 + 8;
  }

  // double range_max = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_range_max = this->_internal_range_max();
  uint64_t raw_range_max;
  memcpy(&raw_range_max, &tmp_range_max, sizeof(tmp_range_max));
  if (raw_range_max != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiEchoLaserScan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiEchoLaserScan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiEchoLaserScan::GetClassData() const { return &_class_data_; }


void MultiEchoLaserScan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiEchoLaserScan*>(&to_msg);
  auto& from = static_cast<const MultiEchoLaserScan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.MultiEchoLaserScan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ranges_.MergeFrom(from._impl_.ranges_);
  _this->_impl_.intensities_.MergeFrom(from._impl_.intensities_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::LSLAM::Header::MergeFrom(
        from._internal_header());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_min = from._internal_angle_min();
  uint64_t raw_angle_min;
  memcpy(&raw_angle_min, &tmp_angle_min, sizeof(tmp_angle_min));
  if (raw_angle_min != 0) {
    _this->_internal_set_angle_min(from._internal_angle_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_max = from._internal_angle_max();
  uint64_t raw_angle_max;
  memcpy(&raw_angle_max, &tmp_angle_max, sizeof(tmp_angle_max));
  if (raw_angle_max != 0) {
    _this->_internal_set_angle_max(from._internal_angle_max());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_increment = from._internal_angle_increment();
  uint64_t raw_angle_increment;
  memcpy(&raw_angle_increment, &tmp_angle_increment, sizeof(tmp_angle_increment));
  if (raw_angle_increment != 0) {
    _this->_internal_set_angle_increment(from._internal_angle_increment());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_increment = from._internal_time_increment();
  uint64_t raw_time_increment;
  memcpy(&raw_time_increment, &tmp_time_increment, sizeof(tmp_time_increment));
  if (raw_time_increment != 0) {
    _this->_internal_set_time_increment(from._internal_time_increment());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scan_time = from._internal_scan_time();
  uint64_t raw_scan_time;
  memcpy(&raw_scan_time, &tmp_scan_time, sizeof(tmp_scan_time));
  if (raw_scan_time != 0) {
    _this->_internal_set_scan_time(from._internal_scan_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_range_min = from._internal_range_min();
  uint64_t raw_range_min;
  memcpy(&raw_range_min, &tmp_range_min, sizeof(tmp_range_min));
  if (raw_range_min != 0) {
    _this->_internal_set_range_min(from._internal_range_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_range_max = from._internal_range_max();
  uint64_t raw_range_max;
  memcpy(&raw_range_max, &tmp_range_max, sizeof(tmp_range_max));
  if (raw_range_max != 0) {
    _this->_internal_set_range_max(from._internal_range_max());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiEchoLaserScan::CopyFrom(const MultiEchoLaserScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.MultiEchoLaserScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiEchoLaserScan::IsInitialized() const {
  return true;
}

void MultiEchoLaserScan::InternalSwap(MultiEchoLaserScan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ranges_.InternalSwap(&other->_impl_.ranges_);
  _impl_.intensities_.InternalSwap(&other->_impl_.intensities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiEchoLaserScan, _impl_.range_max_)
      + sizeof(MultiEchoLaserScan::_impl_.range_max_)
      - PROTOBUF_FIELD_OFFSET(MultiEchoLaserScan, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiEchoLaserScan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MultiEchoLaserScan_2eproto_getter, &descriptor_table_MultiEchoLaserScan_2eproto_once,
      file_level_metadata_MultiEchoLaserScan_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::MultiEchoLaserScan*
Arena::CreateMaybeMessage< ::LSLAM::MultiEchoLaserScan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::MultiEchoLaserScan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
