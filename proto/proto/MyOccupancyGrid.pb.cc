// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyOccupancyGrid.proto

#include "MyOccupancyGrid.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR MapMetaData::MapMetaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_load_time_)*/nullptr
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.resolution_)*/0
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapMetaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapMetaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapMetaDataDefaultTypeInternal() {}
  union {
    MapMetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapMetaDataDefaultTypeInternal _MapMetaData_default_instance_;
PROTOBUF_CONSTEXPR MyOccupancyGrid::MyOccupancyGrid(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.saved_origin_x__)*/0
  , /*decltype(_impl_.saved_origin_y__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MyOccupancyGridDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyOccupancyGridDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyOccupancyGridDefaultTypeInternal() {}
  union {
    MyOccupancyGrid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyOccupancyGridDefaultTypeInternal _MyOccupancyGrid_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_MyOccupancyGrid_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MyOccupancyGrid_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MyOccupancyGrid_2eproto = nullptr;

const uint32_t TableStruct_MyOccupancyGrid_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapMetaData, _impl_.map_load_time_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapMetaData, _impl_.resolution_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapMetaData, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapMetaData, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MapMetaData, _impl_.origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyOccupancyGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyOccupancyGrid, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyOccupancyGrid, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyOccupancyGrid, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyOccupancyGrid, _impl_.saved_origin_x__),
  PROTOBUF_FIELD_OFFSET(::LSLAM::MyOccupancyGrid, _impl_.saved_origin_y__),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::MapMetaData)},
  { 13, -1, -1, sizeof(::LSLAM::MyOccupancyGrid)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_MapMetaData_default_instance_._instance,
  &::LSLAM::_MyOccupancyGrid_default_instance_._instance,
};

const char descriptor_table_protodef_MyOccupancyGrid_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025MyOccupancyGrid.proto\022\005LSLAM\032\037google/p"
  "rotobuf/timestamp.proto\032\014Header.proto\032\nP"
  "ose.proto\"\220\001\n\013MapMetaData\0221\n\rmap_load_ti"
  "me\030\001 \001(\0132\032.google.protobuf.Timestamp\022\022\n\n"
  "resolution\030\002 \001(\002\022\r\n\005width\030\003 \001(\r\022\016\n\006heigh"
  "t\030\004 \001(\r\022\033\n\006origin\030\005 \001(\0132\013.LSLAM.Pose\"\222\001\n"
  "\017MyOccupancyGrid\022\035\n\006header\030\001 \001(\0132\r.LSLAM"
  ".Header\022 \n\004info\030\002 \001(\0132\022.LSLAM.MapMetaDat"
  "a\022\014\n\004data\030\003 \003(\005\022\027\n\017saved_origin_x_\030\004 \001(\001"
  "\022\027\n\017saved_origin_y_\030\005 \001(\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_MyOccupancyGrid_2eproto_deps[3] = {
  &::descriptor_table_Header_2eproto,
  &::descriptor_table_Pose_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_MyOccupancyGrid_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MyOccupancyGrid_2eproto = {
    false, false, 393, descriptor_table_protodef_MyOccupancyGrid_2eproto,
    "MyOccupancyGrid.proto",
    &descriptor_table_MyOccupancyGrid_2eproto_once, descriptor_table_MyOccupancyGrid_2eproto_deps, 3, 2,
    schemas, file_default_instances, TableStruct_MyOccupancyGrid_2eproto::offsets,
    file_level_metadata_MyOccupancyGrid_2eproto, file_level_enum_descriptors_MyOccupancyGrid_2eproto,
    file_level_service_descriptors_MyOccupancyGrid_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MyOccupancyGrid_2eproto_getter() {
  return &descriptor_table_MyOccupancyGrid_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MyOccupancyGrid_2eproto(&descriptor_table_MyOccupancyGrid_2eproto);
namespace LSLAM {

// ===================================================================

class MapMetaData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& map_load_time(const MapMetaData* msg);
  static const ::LSLAM::Pose& origin(const MapMetaData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MapMetaData::_Internal::map_load_time(const MapMetaData* msg) {
  return *msg->_impl_.map_load_time_;
}
const ::LSLAM::Pose&
MapMetaData::_Internal::origin(const MapMetaData* msg) {
  return *msg->_impl_.origin_;
}
void MapMetaData::clear_map_load_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.map_load_time_ != nullptr) {
    delete _impl_.map_load_time_;
  }
  _impl_.map_load_time_ = nullptr;
}
void MapMetaData::clear_origin() {
  if (GetArenaForAllocation() == nullptr && _impl_.origin_ != nullptr) {
    delete _impl_.origin_;
  }
  _impl_.origin_ = nullptr;
}
MapMetaData::MapMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.MapMetaData)
}
MapMetaData::MapMetaData(const MapMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapMetaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_load_time_){nullptr}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.resolution_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_map_load_time()) {
    _this->_impl_.map_load_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.map_load_time_);
  }
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::LSLAM::Pose(*from._impl_.origin_);
  }
  ::memcpy(&_impl_.resolution_, &from._impl_.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.resolution_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.MapMetaData)
}

inline void MapMetaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_load_time_){nullptr}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.resolution_){0}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapMetaData::~MapMetaData() {
  // @@protoc_insertion_point(destructor:LSLAM.MapMetaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.map_load_time_;
  if (this != internal_default_instance()) delete _impl_.origin_;
}

void MapMetaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.MapMetaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.map_load_time_ != nullptr) {
    delete _impl_.map_load_time_;
  }
  _impl_.map_load_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.origin_ != nullptr) {
    delete _impl_.origin_;
  }
  _impl_.origin_ = nullptr;
  ::memset(&_impl_.resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.resolution_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapMetaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp map_load_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_load_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.Pose origin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapMetaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.MapMetaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp map_load_time = 1;
  if (this->_internal_has_map_load_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::map_load_time(this),
        _Internal::map_load_time(this).GetCachedSize(), target, stream);
  }

  // float resolution = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_resolution = this->_internal_resolution();
  uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_resolution(), target);
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  // .LSLAM.Pose origin = 5;
  if (this->_internal_has_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.MapMetaData)
  return target;
}

size_t MapMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.MapMetaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp map_load_time = 1;
  if (this->_internal_has_map_load_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_load_time_);
  }

  // .LSLAM.Pose origin = 5;
  if (this->_internal_has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_);
  }

  // float resolution = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_resolution = this->_internal_resolution();
  uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    total_size += 1 + 4;
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapMetaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapMetaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapMetaData::GetClassData() const { return &_class_data_; }


void MapMetaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapMetaData*>(&to_msg);
  auto& from = static_cast<const MapMetaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.MapMetaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_map_load_time()) {
    _this->_internal_mutable_map_load_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_map_load_time());
  }
  if (from._internal_has_origin()) {
    _this->_internal_mutable_origin()->::LSLAM::Pose::MergeFrom(
        from._internal_origin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_resolution = from._internal_resolution();
  uint32_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    _this->_internal_set_resolution(from._internal_resolution());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapMetaData::CopyFrom(const MapMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.MapMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMetaData::IsInitialized() const {
  return true;
}

void MapMetaData::InternalSwap(MapMetaData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapMetaData, _impl_.height_)
      + sizeof(MapMetaData::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(MapMetaData, _impl_.map_load_time_)>(
          reinterpret_cast<char*>(&_impl_.map_load_time_),
          reinterpret_cast<char*>(&other->_impl_.map_load_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapMetaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MyOccupancyGrid_2eproto_getter, &descriptor_table_MyOccupancyGrid_2eproto_once,
      file_level_metadata_MyOccupancyGrid_2eproto[0]);
}

// ===================================================================

class MyOccupancyGrid::_Internal {
 public:
  static const ::LSLAM::Header& header(const MyOccupancyGrid* msg);
  static const ::LSLAM::MapMetaData& info(const MyOccupancyGrid* msg);
};

const ::LSLAM::Header&
MyOccupancyGrid::_Internal::header(const MyOccupancyGrid* msg) {
  return *msg->_impl_.header_;
}
const ::LSLAM::MapMetaData&
MyOccupancyGrid::_Internal::info(const MyOccupancyGrid* msg) {
  return *msg->_impl_.info_;
}
void MyOccupancyGrid::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
MyOccupancyGrid::MyOccupancyGrid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.MyOccupancyGrid)
}
MyOccupancyGrid::MyOccupancyGrid(const MyOccupancyGrid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MyOccupancyGrid* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.saved_origin_x__){}
    , decltype(_impl_.saved_origin_y__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::LSLAM::Header(*from._impl_.header_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::LSLAM::MapMetaData(*from._impl_.info_);
  }
  ::memcpy(&_impl_.saved_origin_x__, &from._impl_.saved_origin_x__,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.saved_origin_y__) -
    reinterpret_cast<char*>(&_impl_.saved_origin_x__)) + sizeof(_impl_.saved_origin_y__));
  // @@protoc_insertion_point(copy_constructor:LSLAM.MyOccupancyGrid)
}

inline void MyOccupancyGrid::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.saved_origin_x__){0}
    , decltype(_impl_.saved_origin_y__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MyOccupancyGrid::~MyOccupancyGrid() {
  // @@protoc_insertion_point(destructor:LSLAM.MyOccupancyGrid)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MyOccupancyGrid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void MyOccupancyGrid::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MyOccupancyGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.MyOccupancyGrid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  ::memset(&_impl_.saved_origin_x__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.saved_origin_y__) -
      reinterpret_cast<char*>(&_impl_.saved_origin_x__)) + sizeof(_impl_.saved_origin_y__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyOccupancyGrid::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.MapMetaData info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double saved_origin_x_ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.saved_origin_x__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double saved_origin_y_ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.saved_origin_y__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyOccupancyGrid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.MyOccupancyGrid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .LSLAM.MapMetaData info = 2;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // repeated int32 data = 3;
  {
    int byte_size = _impl_._data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_data(), byte_size, target);
    }
  }

  // double saved_origin_x_ = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_x_ = this->_internal_saved_origin_x_();
  uint64_t raw_saved_origin_x_;
  memcpy(&raw_saved_origin_x_, &tmp_saved_origin_x_, sizeof(tmp_saved_origin_x_));
  if (raw_saved_origin_x_ != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_saved_origin_x_(), target);
  }

  // double saved_origin_y_ = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_y_ = this->_internal_saved_origin_y_();
  uint64_t raw_saved_origin_y_;
  memcpy(&raw_saved_origin_y_, &tmp_saved_origin_y_, sizeof(tmp_saved_origin_y_));
  if (raw_saved_origin_y_ != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_saved_origin_y_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.MyOccupancyGrid)
  return target;
}

size_t MyOccupancyGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.MyOccupancyGrid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // .LSLAM.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .LSLAM.MapMetaData info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  // double saved_origin_x_ = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_x_ = this->_internal_saved_origin_x_();
  uint64_t raw_saved_origin_x_;
  memcpy(&raw_saved_origin_x_, &tmp_saved_origin_x_, sizeof(tmp_saved_origin_x_));
  if (raw_saved_origin_x_ != 0) {
    total_size += 1 + 8;
  }

  // double saved_origin_y_ = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_y_ = this->_internal_saved_origin_y_();
  uint64_t raw_saved_origin_y_;
  memcpy(&raw_saved_origin_y_, &tmp_saved_origin_y_, sizeof(tmp_saved_origin_y_));
  if (raw_saved_origin_y_ != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyOccupancyGrid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MyOccupancyGrid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyOccupancyGrid::GetClassData() const { return &_class_data_; }


void MyOccupancyGrid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MyOccupancyGrid*>(&to_msg);
  auto& from = static_cast<const MyOccupancyGrid&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.MyOccupancyGrid)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::LSLAM::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::LSLAM::MapMetaData::MergeFrom(
        from._internal_info());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_x_ = from._internal_saved_origin_x_();
  uint64_t raw_saved_origin_x_;
  memcpy(&raw_saved_origin_x_, &tmp_saved_origin_x_, sizeof(tmp_saved_origin_x_));
  if (raw_saved_origin_x_ != 0) {
    _this->_internal_set_saved_origin_x_(from._internal_saved_origin_x_());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_saved_origin_y_ = from._internal_saved_origin_y_();
  uint64_t raw_saved_origin_y_;
  memcpy(&raw_saved_origin_y_, &tmp_saved_origin_y_, sizeof(tmp_saved_origin_y_));
  if (raw_saved_origin_y_ != 0) {
    _this->_internal_set_saved_origin_y_(from._internal_saved_origin_y_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyOccupancyGrid::CopyFrom(const MyOccupancyGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.MyOccupancyGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyOccupancyGrid::IsInitialized() const {
  return true;
}

void MyOccupancyGrid::InternalSwap(MyOccupancyGrid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyOccupancyGrid, _impl_.saved_origin_y__)
      + sizeof(MyOccupancyGrid::_impl_.saved_origin_y__)
      - PROTOBUF_FIELD_OFFSET(MyOccupancyGrid, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyOccupancyGrid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MyOccupancyGrid_2eproto_getter, &descriptor_table_MyOccupancyGrid_2eproto_once,
      file_level_metadata_MyOccupancyGrid_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::MapMetaData*
Arena::CreateMaybeMessage< ::LSLAM::MapMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::MapMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::MyOccupancyGrid*
Arena::CreateMaybeMessage< ::LSLAM::MyOccupancyGrid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::MyOccupancyGrid >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
