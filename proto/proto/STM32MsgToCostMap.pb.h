// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: STM32MsgToCostMap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_STM32MsgToCostMap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_STM32MsgToCostMap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "RangeSensorMsg.pb.h"
#include "CliffSensorMsg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_STM32MsgToCostMap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_STM32MsgToCostMap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_STM32MsgToCostMap_2eproto;
namespace LSLAM {
class STM32MsgToCostMap;
struct STM32MsgToCostMapDefaultTypeInternal;
extern STM32MsgToCostMapDefaultTypeInternal _STM32MsgToCostMap_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::STM32MsgToCostMap* Arena::CreateMaybeMessage<::LSLAM::STM32MsgToCostMap>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class STM32MsgToCostMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.STM32MsgToCostMap) */ {
 public:
  inline STM32MsgToCostMap() : STM32MsgToCostMap(nullptr) {}
  ~STM32MsgToCostMap() override;
  explicit PROTOBUF_CONSTEXPR STM32MsgToCostMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STM32MsgToCostMap(const STM32MsgToCostMap& from);
  STM32MsgToCostMap(STM32MsgToCostMap&& from) noexcept
    : STM32MsgToCostMap() {
    *this = ::std::move(from);
  }

  inline STM32MsgToCostMap& operator=(const STM32MsgToCostMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline STM32MsgToCostMap& operator=(STM32MsgToCostMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STM32MsgToCostMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const STM32MsgToCostMap* internal_default_instance() {
    return reinterpret_cast<const STM32MsgToCostMap*>(
               &_STM32MsgToCostMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(STM32MsgToCostMap& a, STM32MsgToCostMap& b) {
    a.Swap(&b);
  }
  inline void Swap(STM32MsgToCostMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STM32MsgToCostMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STM32MsgToCostMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STM32MsgToCostMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STM32MsgToCostMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const STM32MsgToCostMap& from) {
    STM32MsgToCostMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STM32MsgToCostMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.STM32MsgToCostMap";
  }
  protected:
  explicit STM32MsgToCostMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeSensorMsgFieldNumber = 1,
    kCliffSensorMsgFieldNumber = 2,
    kIsAlongEdgeModeFieldNumber = 3,
    kIsCleaningFieldNumber = 4,
  };
  // .LSLAM.RangeSensorMsg range_sensor_msg = 1;
  bool has_range_sensor_msg() const;
  private:
  bool _internal_has_range_sensor_msg() const;
  public:
  void clear_range_sensor_msg();
  const ::LSLAM::RangeSensorMsg& range_sensor_msg() const;
  PROTOBUF_NODISCARD ::LSLAM::RangeSensorMsg* release_range_sensor_msg();
  ::LSLAM::RangeSensorMsg* mutable_range_sensor_msg();
  void set_allocated_range_sensor_msg(::LSLAM::RangeSensorMsg* range_sensor_msg);
  private:
  const ::LSLAM::RangeSensorMsg& _internal_range_sensor_msg() const;
  ::LSLAM::RangeSensorMsg* _internal_mutable_range_sensor_msg();
  public:
  void unsafe_arena_set_allocated_range_sensor_msg(
      ::LSLAM::RangeSensorMsg* range_sensor_msg);
  ::LSLAM::RangeSensorMsg* unsafe_arena_release_range_sensor_msg();

  // .LSLAM.CliffSensorMsg cliff_sensor_msg = 2;
  bool has_cliff_sensor_msg() const;
  private:
  bool _internal_has_cliff_sensor_msg() const;
  public:
  void clear_cliff_sensor_msg();
  const ::LSLAM::CliffSensorMsg& cliff_sensor_msg() const;
  PROTOBUF_NODISCARD ::LSLAM::CliffSensorMsg* release_cliff_sensor_msg();
  ::LSLAM::CliffSensorMsg* mutable_cliff_sensor_msg();
  void set_allocated_cliff_sensor_msg(::LSLAM::CliffSensorMsg* cliff_sensor_msg);
  private:
  const ::LSLAM::CliffSensorMsg& _internal_cliff_sensor_msg() const;
  ::LSLAM::CliffSensorMsg* _internal_mutable_cliff_sensor_msg();
  public:
  void unsafe_arena_set_allocated_cliff_sensor_msg(
      ::LSLAM::CliffSensorMsg* cliff_sensor_msg);
  ::LSLAM::CliffSensorMsg* unsafe_arena_release_cliff_sensor_msg();

  // bool is_along_edge_mode = 3;
  void clear_is_along_edge_mode();
  bool is_along_edge_mode() const;
  void set_is_along_edge_mode(bool value);
  private:
  bool _internal_is_along_edge_mode() const;
  void _internal_set_is_along_edge_mode(bool value);
  public:

  // bool is_cleaning = 4;
  void clear_is_cleaning();
  bool is_cleaning() const;
  void set_is_cleaning(bool value);
  private:
  bool _internal_is_cleaning() const;
  void _internal_set_is_cleaning(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.STM32MsgToCostMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::LSLAM::RangeSensorMsg* range_sensor_msg_;
    ::LSLAM::CliffSensorMsg* cliff_sensor_msg_;
    bool is_along_edge_mode_;
    bool is_cleaning_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_STM32MsgToCostMap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// STM32MsgToCostMap

// .LSLAM.RangeSensorMsg range_sensor_msg = 1;
inline bool STM32MsgToCostMap::_internal_has_range_sensor_msg() const {
  return this != internal_default_instance() && _impl_.range_sensor_msg_ != nullptr;
}
inline bool STM32MsgToCostMap::has_range_sensor_msg() const {
  return _internal_has_range_sensor_msg();
}
inline const ::LSLAM::RangeSensorMsg& STM32MsgToCostMap::_internal_range_sensor_msg() const {
  const ::LSLAM::RangeSensorMsg* p = _impl_.range_sensor_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::RangeSensorMsg&>(
      ::LSLAM::_RangeSensorMsg_default_instance_);
}
inline const ::LSLAM::RangeSensorMsg& STM32MsgToCostMap::range_sensor_msg() const {
  // @@protoc_insertion_point(field_get:LSLAM.STM32MsgToCostMap.range_sensor_msg)
  return _internal_range_sensor_msg();
}
inline void STM32MsgToCostMap::unsafe_arena_set_allocated_range_sensor_msg(
    ::LSLAM::RangeSensorMsg* range_sensor_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_sensor_msg_);
  }
  _impl_.range_sensor_msg_ = range_sensor_msg;
  if (range_sensor_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.STM32MsgToCostMap.range_sensor_msg)
}
inline ::LSLAM::RangeSensorMsg* STM32MsgToCostMap::release_range_sensor_msg() {
  
  ::LSLAM::RangeSensorMsg* temp = _impl_.range_sensor_msg_;
  _impl_.range_sensor_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::RangeSensorMsg* STM32MsgToCostMap::unsafe_arena_release_range_sensor_msg() {
  // @@protoc_insertion_point(field_release:LSLAM.STM32MsgToCostMap.range_sensor_msg)
  
  ::LSLAM::RangeSensorMsg* temp = _impl_.range_sensor_msg_;
  _impl_.range_sensor_msg_ = nullptr;
  return temp;
}
inline ::LSLAM::RangeSensorMsg* STM32MsgToCostMap::_internal_mutable_range_sensor_msg() {
  
  if (_impl_.range_sensor_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::RangeSensorMsg>(GetArenaForAllocation());
    _impl_.range_sensor_msg_ = p;
  }
  return _impl_.range_sensor_msg_;
}
inline ::LSLAM::RangeSensorMsg* STM32MsgToCostMap::mutable_range_sensor_msg() {
  ::LSLAM::RangeSensorMsg* _msg = _internal_mutable_range_sensor_msg();
  // @@protoc_insertion_point(field_mutable:LSLAM.STM32MsgToCostMap.range_sensor_msg)
  return _msg;
}
inline void STM32MsgToCostMap::set_allocated_range_sensor_msg(::LSLAM::RangeSensorMsg* range_sensor_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_sensor_msg_);
  }
  if (range_sensor_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_sensor_msg));
    if (message_arena != submessage_arena) {
      range_sensor_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_sensor_msg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.range_sensor_msg_ = range_sensor_msg;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.STM32MsgToCostMap.range_sensor_msg)
}

// .LSLAM.CliffSensorMsg cliff_sensor_msg = 2;
inline bool STM32MsgToCostMap::_internal_has_cliff_sensor_msg() const {
  return this != internal_default_instance() && _impl_.cliff_sensor_msg_ != nullptr;
}
inline bool STM32MsgToCostMap::has_cliff_sensor_msg() const {
  return _internal_has_cliff_sensor_msg();
}
inline const ::LSLAM::CliffSensorMsg& STM32MsgToCostMap::_internal_cliff_sensor_msg() const {
  const ::LSLAM::CliffSensorMsg* p = _impl_.cliff_sensor_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::CliffSensorMsg&>(
      ::LSLAM::_CliffSensorMsg_default_instance_);
}
inline const ::LSLAM::CliffSensorMsg& STM32MsgToCostMap::cliff_sensor_msg() const {
  // @@protoc_insertion_point(field_get:LSLAM.STM32MsgToCostMap.cliff_sensor_msg)
  return _internal_cliff_sensor_msg();
}
inline void STM32MsgToCostMap::unsafe_arena_set_allocated_cliff_sensor_msg(
    ::LSLAM::CliffSensorMsg* cliff_sensor_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cliff_sensor_msg_);
  }
  _impl_.cliff_sensor_msg_ = cliff_sensor_msg;
  if (cliff_sensor_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.STM32MsgToCostMap.cliff_sensor_msg)
}
inline ::LSLAM::CliffSensorMsg* STM32MsgToCostMap::release_cliff_sensor_msg() {
  
  ::LSLAM::CliffSensorMsg* temp = _impl_.cliff_sensor_msg_;
  _impl_.cliff_sensor_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::CliffSensorMsg* STM32MsgToCostMap::unsafe_arena_release_cliff_sensor_msg() {
  // @@protoc_insertion_point(field_release:LSLAM.STM32MsgToCostMap.cliff_sensor_msg)
  
  ::LSLAM::CliffSensorMsg* temp = _impl_.cliff_sensor_msg_;
  _impl_.cliff_sensor_msg_ = nullptr;
  return temp;
}
inline ::LSLAM::CliffSensorMsg* STM32MsgToCostMap::_internal_mutable_cliff_sensor_msg() {
  
  if (_impl_.cliff_sensor_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::CliffSensorMsg>(GetArenaForAllocation());
    _impl_.cliff_sensor_msg_ = p;
  }
  return _impl_.cliff_sensor_msg_;
}
inline ::LSLAM::CliffSensorMsg* STM32MsgToCostMap::mutable_cliff_sensor_msg() {
  ::LSLAM::CliffSensorMsg* _msg = _internal_mutable_cliff_sensor_msg();
  // @@protoc_insertion_point(field_mutable:LSLAM.STM32MsgToCostMap.cliff_sensor_msg)
  return _msg;
}
inline void STM32MsgToCostMap::set_allocated_cliff_sensor_msg(::LSLAM::CliffSensorMsg* cliff_sensor_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cliff_sensor_msg_);
  }
  if (cliff_sensor_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cliff_sensor_msg));
    if (message_arena != submessage_arena) {
      cliff_sensor_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cliff_sensor_msg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cliff_sensor_msg_ = cliff_sensor_msg;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.STM32MsgToCostMap.cliff_sensor_msg)
}

// bool is_along_edge_mode = 3;
inline void STM32MsgToCostMap::clear_is_along_edge_mode() {
  _impl_.is_along_edge_mode_ = false;
}
inline bool STM32MsgToCostMap::_internal_is_along_edge_mode() const {
  return _impl_.is_along_edge_mode_;
}
inline bool STM32MsgToCostMap::is_along_edge_mode() const {
  // @@protoc_insertion_point(field_get:LSLAM.STM32MsgToCostMap.is_along_edge_mode)
  return _internal_is_along_edge_mode();
}
inline void STM32MsgToCostMap::_internal_set_is_along_edge_mode(bool value) {
  
  _impl_.is_along_edge_mode_ = value;
}
inline void STM32MsgToCostMap::set_is_along_edge_mode(bool value) {
  _internal_set_is_along_edge_mode(value);
  // @@protoc_insertion_point(field_set:LSLAM.STM32MsgToCostMap.is_along_edge_mode)
}

// bool is_cleaning = 4;
inline void STM32MsgToCostMap::clear_is_cleaning() {
  _impl_.is_cleaning_ = false;
}
inline bool STM32MsgToCostMap::_internal_is_cleaning() const {
  return _impl_.is_cleaning_;
}
inline bool STM32MsgToCostMap::is_cleaning() const {
  // @@protoc_insertion_point(field_get:LSLAM.STM32MsgToCostMap.is_cleaning)
  return _internal_is_cleaning();
}
inline void STM32MsgToCostMap::_internal_set_is_cleaning(bool value) {
  
  _impl_.is_cleaning_ = value;
}
inline void STM32MsgToCostMap::set_is_cleaning(bool value) {
  _internal_set_is_cleaning(value);
  // @@protoc_insertion_point(field_set:LSLAM.STM32MsgToCostMap.is_cleaning)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_STM32MsgToCostMap_2eproto
