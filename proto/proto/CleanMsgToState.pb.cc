// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CleanMsgToState.proto

#include "CleanMsgToState.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR VehicleSpeed::VehicleSpeed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.line_speed_)*/0
  , /*decltype(_impl_.angular_velocity_)*/0
  , /*decltype(_impl_.robot_expection_action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleSpeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleSpeedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleSpeedDefaultTypeInternal() {}
  union {
    VehicleSpeed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleSpeedDefaultTypeInternal _VehicleSpeed_default_instance_;
PROTOBUF_CONSTEXPR CleanMsgToState::CleanMsgToState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v_speed_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CleanMsgToStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CleanMsgToStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CleanMsgToStateDefaultTypeInternal() {}
  union {
    CleanMsgToState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CleanMsgToStateDefaultTypeInternal _CleanMsgToState_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_CleanMsgToState_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_CleanMsgToState_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_CleanMsgToState_2eproto = nullptr;

const uint32_t TableStruct_CleanMsgToState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::VehicleSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::VehicleSpeed, _impl_.line_speed_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::VehicleSpeed, _impl_.angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::VehicleSpeed, _impl_.robot_expection_action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::CleanMsgToState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::CleanMsgToState, _impl_.v_speed_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::VehicleSpeed)},
  { 11, -1, -1, sizeof(::LSLAM::CleanMsgToState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_VehicleSpeed_default_instance_._instance,
  &::LSLAM::_CleanMsgToState_default_instance_._instance,
};

const char descriptor_table_protodef_CleanMsgToState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025CleanMsgToState.proto\022\005LSLAM\"\347\002\n\014Vehic"
  "leSpeed\022\022\n\nline_speed\030\001 \001(\005\022\030\n\020angular_v"
  "elocity\030\002 \001(\005\022B\n\026robot_expection_action\030"
  "\003 \001(\0162\".LSLAM.VehicleSpeed.RobotExpectio"
  "n\"\344\001\n\016RobotExpection\022\031\n\025kNormalMovementA"
  "ction\020\000\022\025\n\021kChargeBackAction\020\001\022\025\n\021kTurnA"
  "roundAction\020\002\022\025\n\021kGoStraightAction\020\003\022\025\n\021"
  "kTurnRadiusAction\020\004\022\026\n\022kCollideEdgeActio"
  "n\020\005\022\024\n\020kLidarEdgeAction\020\006\022\031\n\025kInfraredCh"
  "argeAction\020\007\022\022\n\016kHelpOutAction\020\010\"7\n\017Clea"
  "nMsgToState\022$\n\007v_speed\030\001 \001(\0132\023.LSLAM.Veh"
  "icleSpeedb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_CleanMsgToState_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CleanMsgToState_2eproto = {
    false, false, 457, descriptor_table_protodef_CleanMsgToState_2eproto,
    "CleanMsgToState.proto",
    &descriptor_table_CleanMsgToState_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_CleanMsgToState_2eproto::offsets,
    file_level_metadata_CleanMsgToState_2eproto, file_level_enum_descriptors_CleanMsgToState_2eproto,
    file_level_service_descriptors_CleanMsgToState_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CleanMsgToState_2eproto_getter() {
  return &descriptor_table_CleanMsgToState_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_CleanMsgToState_2eproto(&descriptor_table_CleanMsgToState_2eproto);
namespace LSLAM {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleSpeed_RobotExpection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CleanMsgToState_2eproto);
  return file_level_enum_descriptors_CleanMsgToState_2eproto[0];
}
bool VehicleSpeed_RobotExpection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehicleSpeed_RobotExpection VehicleSpeed::kNormalMovementAction;
constexpr VehicleSpeed_RobotExpection VehicleSpeed::kChargeBackAction;
constexpr VehicleSpeed_RobotExpection VehicleSpeed::kTurnAroundAction;
constexpr VehicleSpeed_RobotExpection VehicleSpeed::kGoStraightAction;
constexpr VehicleSpeed_RobotExpection VehicleSpeed::kTurnRadiusAction;
constexpr VehicleSpeed_RobotExpection VehicleSpeed::kCollideEdgeAction;
constexpr VehicleSpeed_RobotExpection VehicleSpeed::kLidarEdgeAction;
constexpr VehicleSpeed_RobotExpection VehicleSpeed::kInfraredChargeAction;
constexpr VehicleSpeed_RobotExpection VehicleSpeed::kHelpOutAction;
constexpr VehicleSpeed_RobotExpection VehicleSpeed::RobotExpection_MIN;
constexpr VehicleSpeed_RobotExpection VehicleSpeed::RobotExpection_MAX;
constexpr int VehicleSpeed::RobotExpection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class VehicleSpeed::_Internal {
 public:
};

VehicleSpeed::VehicleSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.VehicleSpeed)
}
VehicleSpeed::VehicleSpeed(const VehicleSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleSpeed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.line_speed_){}
    , decltype(_impl_.angular_velocity_){}
    , decltype(_impl_.robot_expection_action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.line_speed_, &from._impl_.line_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.robot_expection_action_) -
    reinterpret_cast<char*>(&_impl_.line_speed_)) + sizeof(_impl_.robot_expection_action_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.VehicleSpeed)
}

inline void VehicleSpeed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.line_speed_){0}
    , decltype(_impl_.angular_velocity_){0}
    , decltype(_impl_.robot_expection_action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleSpeed::~VehicleSpeed() {
  // @@protoc_insertion_point(destructor:LSLAM.VehicleSpeed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VehicleSpeed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.VehicleSpeed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.line_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.robot_expection_action_) -
      reinterpret_cast<char*>(&_impl_.line_speed_)) + sizeof(_impl_.robot_expection_action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleSpeed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 line_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.line_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 angular_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.angular_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.VehicleSpeed.RobotExpection robot_expection_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_robot_expection_action(static_cast<::LSLAM::VehicleSpeed_RobotExpection>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleSpeed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.VehicleSpeed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line_speed = 1;
  if (this->_internal_line_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_line_speed(), target);
  }

  // int32 angular_velocity = 2;
  if (this->_internal_angular_velocity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_angular_velocity(), target);
  }

  // .LSLAM.VehicleSpeed.RobotExpection robot_expection_action = 3;
  if (this->_internal_robot_expection_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_robot_expection_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.VehicleSpeed)
  return target;
}

size_t VehicleSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.VehicleSpeed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 line_speed = 1;
  if (this->_internal_line_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line_speed());
  }

  // int32 angular_velocity = 2;
  if (this->_internal_angular_velocity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_angular_velocity());
  }

  // .LSLAM.VehicleSpeed.RobotExpection robot_expection_action = 3;
  if (this->_internal_robot_expection_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_robot_expection_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleSpeed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleSpeed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleSpeed::GetClassData() const { return &_class_data_; }


void VehicleSpeed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleSpeed*>(&to_msg);
  auto& from = static_cast<const VehicleSpeed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.VehicleSpeed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_line_speed() != 0) {
    _this->_internal_set_line_speed(from._internal_line_speed());
  }
  if (from._internal_angular_velocity() != 0) {
    _this->_internal_set_angular_velocity(from._internal_angular_velocity());
  }
  if (from._internal_robot_expection_action() != 0) {
    _this->_internal_set_robot_expection_action(from._internal_robot_expection_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleSpeed::CopyFrom(const VehicleSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.VehicleSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSpeed::IsInitialized() const {
  return true;
}

void VehicleSpeed::InternalSwap(VehicleSpeed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleSpeed, _impl_.robot_expection_action_)
      + sizeof(VehicleSpeed::_impl_.robot_expection_action_)
      - PROTOBUF_FIELD_OFFSET(VehicleSpeed, _impl_.line_speed_)>(
          reinterpret_cast<char*>(&_impl_.line_speed_),
          reinterpret_cast<char*>(&other->_impl_.line_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleSpeed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CleanMsgToState_2eproto_getter, &descriptor_table_CleanMsgToState_2eproto_once,
      file_level_metadata_CleanMsgToState_2eproto[0]);
}

// ===================================================================

class CleanMsgToState::_Internal {
 public:
  static const ::LSLAM::VehicleSpeed& v_speed(const CleanMsgToState* msg);
};

const ::LSLAM::VehicleSpeed&
CleanMsgToState::_Internal::v_speed(const CleanMsgToState* msg) {
  return *msg->_impl_.v_speed_;
}
CleanMsgToState::CleanMsgToState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.CleanMsgToState)
}
CleanMsgToState::CleanMsgToState(const CleanMsgToState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CleanMsgToState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v_speed_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_v_speed()) {
    _this->_impl_.v_speed_ = new ::LSLAM::VehicleSpeed(*from._impl_.v_speed_);
  }
  // @@protoc_insertion_point(copy_constructor:LSLAM.CleanMsgToState)
}

inline void CleanMsgToState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v_speed_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CleanMsgToState::~CleanMsgToState() {
  // @@protoc_insertion_point(destructor:LSLAM.CleanMsgToState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CleanMsgToState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.v_speed_;
}

void CleanMsgToState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CleanMsgToState::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.CleanMsgToState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.v_speed_ != nullptr) {
    delete _impl_.v_speed_;
  }
  _impl_.v_speed_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CleanMsgToState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.VehicleSpeed v_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v_speed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CleanMsgToState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.CleanMsgToState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.VehicleSpeed v_speed = 1;
  if (this->_internal_has_v_speed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v_speed(this),
        _Internal::v_speed(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.CleanMsgToState)
  return target;
}

size_t CleanMsgToState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.CleanMsgToState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LSLAM.VehicleSpeed v_speed = 1;
  if (this->_internal_has_v_speed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.v_speed_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CleanMsgToState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CleanMsgToState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CleanMsgToState::GetClassData() const { return &_class_data_; }


void CleanMsgToState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CleanMsgToState*>(&to_msg);
  auto& from = static_cast<const CleanMsgToState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.CleanMsgToState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_v_speed()) {
    _this->_internal_mutable_v_speed()->::LSLAM::VehicleSpeed::MergeFrom(
        from._internal_v_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CleanMsgToState::CopyFrom(const CleanMsgToState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.CleanMsgToState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanMsgToState::IsInitialized() const {
  return true;
}

void CleanMsgToState::InternalSwap(CleanMsgToState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.v_speed_, other->_impl_.v_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanMsgToState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CleanMsgToState_2eproto_getter, &descriptor_table_CleanMsgToState_2eproto_once,
      file_level_metadata_CleanMsgToState_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::VehicleSpeed*
Arena::CreateMaybeMessage< ::LSLAM::VehicleSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::VehicleSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::CleanMsgToState*
Arena::CreateMaybeMessage< ::LSLAM::CleanMsgToState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::CleanMsgToState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
