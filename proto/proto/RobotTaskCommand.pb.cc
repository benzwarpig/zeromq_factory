// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotTaskCommand.proto

#include "RobotTaskCommand.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR RobotExpectTaskAndState::RobotExpectTaskAndState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.robot_expect_task_state_)*/0
  , /*decltype(_impl_.robot_expect_task_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RobotExpectTaskAndStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotExpectTaskAndStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotExpectTaskAndStateDefaultTypeInternal() {}
  union {
    RobotExpectTaskAndState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotExpectTaskAndStateDefaultTypeInternal _RobotExpectTaskAndState_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_RobotTaskCommand_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_RobotTaskCommand_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_RobotTaskCommand_2eproto = nullptr;

const uint32_t TableStruct_RobotTaskCommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotExpectTaskAndState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotExpectTaskAndState, _impl_.robot_expect_task_state_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotExpectTaskAndState, _impl_.robot_expect_task_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::RobotExpectTaskAndState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_RobotExpectTaskAndState_default_instance_._instance,
};

const char descriptor_table_protodef_RobotTaskCommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026RobotTaskCommand.proto\022\005LSLAM\"\222\001\n\027Robo"
  "tExpectTaskAndState\022@\n\027robot_expect_task"
  "_state\030\001 \001(\0162\037.LSLAM.RobotExpectTaskStat"
  "eType\0225\n\021robot_expect_task\030\002 \001(\0162\032.LSLAM"
  ".RobotExpectTaskType*~\n\030RobotExpectTaskS"
  "tateType\022\027\n\023EXPLECT_TASK_UNUSED\020\000\022\026\n\022EXP"
  "LECT_TASK_START\020\006\022\026\n\022EXPLECT_TASK_PAUSE\020"
  "\003\022\031\n\025EXPLECT_TASK_CONTINUE\020\007*\264\001\n\023RobotEx"
  "pectTaskType\022\032\n\026EXPLECT_EXPLORE_UNUSED\020\000"
  "\022\030\n\024EXPLECT_EXPLORE_TASK\020\001\022\026\n\022EXPLECT_SW"
  "EEP_TASK\020\002\022\024\n\020EXPLECT_MOP_TASK\020\003\022\036\n\032EXPL"
  "ECT_SWEEP_AND_MOP_TASK\020\004\022\031\n\025EXPLECT_RECH"
  "ARGE_TASK\020\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_RobotTaskCommand_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RobotTaskCommand_2eproto = {
    false, false, 499, descriptor_table_protodef_RobotTaskCommand_2eproto,
    "RobotTaskCommand.proto",
    &descriptor_table_RobotTaskCommand_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_RobotTaskCommand_2eproto::offsets,
    file_level_metadata_RobotTaskCommand_2eproto, file_level_enum_descriptors_RobotTaskCommand_2eproto,
    file_level_service_descriptors_RobotTaskCommand_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RobotTaskCommand_2eproto_getter() {
  return &descriptor_table_RobotTaskCommand_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RobotTaskCommand_2eproto(&descriptor_table_RobotTaskCommand_2eproto);
namespace LSLAM {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotExpectTaskStateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RobotTaskCommand_2eproto);
  return file_level_enum_descriptors_RobotTaskCommand_2eproto[0];
}
bool RobotExpectTaskStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotExpectTaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RobotTaskCommand_2eproto);
  return file_level_enum_descriptors_RobotTaskCommand_2eproto[1];
}
bool RobotExpectTaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RobotExpectTaskAndState::_Internal {
 public:
};

RobotExpectTaskAndState::RobotExpectTaskAndState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.RobotExpectTaskAndState)
}
RobotExpectTaskAndState::RobotExpectTaskAndState(const RobotExpectTaskAndState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RobotExpectTaskAndState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.robot_expect_task_state_){}
    , decltype(_impl_.robot_expect_task_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.robot_expect_task_state_, &from._impl_.robot_expect_task_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.robot_expect_task_) -
    reinterpret_cast<char*>(&_impl_.robot_expect_task_state_)) + sizeof(_impl_.robot_expect_task_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.RobotExpectTaskAndState)
}

inline void RobotExpectTaskAndState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.robot_expect_task_state_){0}
    , decltype(_impl_.robot_expect_task_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RobotExpectTaskAndState::~RobotExpectTaskAndState() {
  // @@protoc_insertion_point(destructor:LSLAM.RobotExpectTaskAndState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotExpectTaskAndState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RobotExpectTaskAndState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotExpectTaskAndState::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.RobotExpectTaskAndState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.robot_expect_task_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.robot_expect_task_) -
      reinterpret_cast<char*>(&_impl_.robot_expect_task_state_)) + sizeof(_impl_.robot_expect_task_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotExpectTaskAndState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.RobotExpectTaskStateType robot_expect_task_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_robot_expect_task_state(static_cast<::LSLAM::RobotExpectTaskStateType>(val));
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.RobotExpectTaskType robot_expect_task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_robot_expect_task(static_cast<::LSLAM::RobotExpectTaskType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotExpectTaskAndState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.RobotExpectTaskAndState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.RobotExpectTaskStateType robot_expect_task_state = 1;
  if (this->_internal_robot_expect_task_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_robot_expect_task_state(), target);
  }

  // .LSLAM.RobotExpectTaskType robot_expect_task = 2;
  if (this->_internal_robot_expect_task() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_robot_expect_task(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.RobotExpectTaskAndState)
  return target;
}

size_t RobotExpectTaskAndState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.RobotExpectTaskAndState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LSLAM.RobotExpectTaskStateType robot_expect_task_state = 1;
  if (this->_internal_robot_expect_task_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_robot_expect_task_state());
  }

  // .LSLAM.RobotExpectTaskType robot_expect_task = 2;
  if (this->_internal_robot_expect_task() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_robot_expect_task());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotExpectTaskAndState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotExpectTaskAndState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotExpectTaskAndState::GetClassData() const { return &_class_data_; }


void RobotExpectTaskAndState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotExpectTaskAndState*>(&to_msg);
  auto& from = static_cast<const RobotExpectTaskAndState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.RobotExpectTaskAndState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_robot_expect_task_state() != 0) {
    _this->_internal_set_robot_expect_task_state(from._internal_robot_expect_task_state());
  }
  if (from._internal_robot_expect_task() != 0) {
    _this->_internal_set_robot_expect_task(from._internal_robot_expect_task());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotExpectTaskAndState::CopyFrom(const RobotExpectTaskAndState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.RobotExpectTaskAndState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotExpectTaskAndState::IsInitialized() const {
  return true;
}

void RobotExpectTaskAndState::InternalSwap(RobotExpectTaskAndState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotExpectTaskAndState, _impl_.robot_expect_task_)
      + sizeof(RobotExpectTaskAndState::_impl_.robot_expect_task_)
      - PROTOBUF_FIELD_OFFSET(RobotExpectTaskAndState, _impl_.robot_expect_task_state_)>(
          reinterpret_cast<char*>(&_impl_.robot_expect_task_state_),
          reinterpret_cast<char*>(&other->_impl_.robot_expect_task_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotExpectTaskAndState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RobotTaskCommand_2eproto_getter, &descriptor_table_RobotTaskCommand_2eproto_once,
      file_level_metadata_RobotTaskCommand_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::RobotExpectTaskAndState*
Arena::CreateMaybeMessage< ::LSLAM::RobotExpectTaskAndState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::RobotExpectTaskAndState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
