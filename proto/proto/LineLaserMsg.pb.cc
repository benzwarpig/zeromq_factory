// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LineLaserMsg.proto

#include "LineLaserMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR LaserDate::LaserDate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_.intensity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaserDateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaserDateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaserDateDefaultTypeInternal() {}
  union {
    LaserDate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaserDateDefaultTypeInternal _LaserDate_default_instance_;
PROTOBUF_CONSTEXPR LineLaserMsg::LineLaserMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.front_line_laser_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.the_aim_point_)*/nullptr
  , /*decltype(_impl_.effective_points_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LineLaserMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineLaserMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineLaserMsgDefaultTypeInternal() {}
  union {
    LineLaserMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineLaserMsgDefaultTypeInternal _LineLaserMsg_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_LineLaserMsg_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_LineLaserMsg_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_LineLaserMsg_2eproto = nullptr;

const uint32_t TableStruct_LineLaserMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::LaserDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::LaserDate, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::LaserDate, _impl_.angle_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::LaserDate, _impl_.intensity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::LineLaserMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::LineLaserMsg, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::LineLaserMsg, _impl_.front_line_laser_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::LineLaserMsg, _impl_.the_aim_point_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::LineLaserMsg, _impl_.effective_points_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::LaserDate)},
  { 11, -1, -1, sizeof(::LSLAM::LineLaserMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_LaserDate_default_instance_._instance,
  &::LSLAM::_LineLaserMsg_default_instance_._instance,
};

const char descriptor_table_protodef_LineLaserMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022LineLaserMsg.proto\022\005LSLAM\032\014Header.prot"
  "o\"\?\n\tLaserDate\022\020\n\010distance\030\001 \001(\001\022\r\n\005angl"
  "e\030\002 \001(\001\022\021\n\tintensity\030\003 \001(\001\"\234\001\n\014LineLaser"
  "Msg\022\035\n\006header\030\001 \001(\0132\r.LSLAM.Header\022*\n\020fr"
  "ont_line_laser\030\002 \003(\0132\020.LSLAM.LaserDate\022\'"
  "\n\rthe_aim_point\030\003 \001(\0132\020.LSLAM.LaserDate\022"
  "\030\n\020effective_points\030\004 \001(\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_LineLaserMsg_2eproto_deps[1] = {
  &::descriptor_table_Header_2eproto,
};
static ::_pbi::once_flag descriptor_table_LineLaserMsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_LineLaserMsg_2eproto = {
    false, false, 273, descriptor_table_protodef_LineLaserMsg_2eproto,
    "LineLaserMsg.proto",
    &descriptor_table_LineLaserMsg_2eproto_once, descriptor_table_LineLaserMsg_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_LineLaserMsg_2eproto::offsets,
    file_level_metadata_LineLaserMsg_2eproto, file_level_enum_descriptors_LineLaserMsg_2eproto,
    file_level_service_descriptors_LineLaserMsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_LineLaserMsg_2eproto_getter() {
  return &descriptor_table_LineLaserMsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_LineLaserMsg_2eproto(&descriptor_table_LineLaserMsg_2eproto);
namespace LSLAM {

// ===================================================================

class LaserDate::_Internal {
 public:
};

LaserDate::LaserDate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.LaserDate)
}
LaserDate::LaserDate(const LaserDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaserDate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.distance_){}
    , decltype(_impl_.angle_){}
    , decltype(_impl_.intensity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.distance_, &from._impl_.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.intensity_) -
    reinterpret_cast<char*>(&_impl_.distance_)) + sizeof(_impl_.intensity_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.LaserDate)
}

inline void LaserDate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.distance_){0}
    , decltype(_impl_.angle_){0}
    , decltype(_impl_.intensity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaserDate::~LaserDate() {
  // @@protoc_insertion_point(destructor:LSLAM.LaserDate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaserDate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaserDate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaserDate::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.LaserDate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.intensity_) -
      reinterpret_cast<char*>(&_impl_.distance_)) + sizeof(_impl_.intensity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaserDate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double intensity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaserDate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.LaserDate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  // double angle = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_angle(), target);
  }

  // double intensity = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_intensity = this->_internal_intensity();
  uint64_t raw_intensity;
  memcpy(&raw_intensity, &tmp_intensity, sizeof(tmp_intensity));
  if (raw_intensity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_intensity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.LaserDate)
  return target;
}

size_t LaserDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.LaserDate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double distance = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 1 + 8;
  }

  // double angle = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 8;
  }

  // double intensity = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_intensity = this->_internal_intensity();
  uint64_t raw_intensity;
  memcpy(&raw_intensity, &tmp_intensity, sizeof(tmp_intensity));
  if (raw_intensity != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaserDate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaserDate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaserDate::GetClassData() const { return &_class_data_; }


void LaserDate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaserDate*>(&to_msg);
  auto& from = static_cast<const LaserDate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.LaserDate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = from._internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = from._internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_intensity = from._internal_intensity();
  uint64_t raw_intensity;
  memcpy(&raw_intensity, &tmp_intensity, sizeof(tmp_intensity));
  if (raw_intensity != 0) {
    _this->_internal_set_intensity(from._internal_intensity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaserDate::CopyFrom(const LaserDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.LaserDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserDate::IsInitialized() const {
  return true;
}

void LaserDate::InternalSwap(LaserDate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaserDate, _impl_.intensity_)
      + sizeof(LaserDate::_impl_.intensity_)
      - PROTOBUF_FIELD_OFFSET(LaserDate, _impl_.distance_)>(
          reinterpret_cast<char*>(&_impl_.distance_),
          reinterpret_cast<char*>(&other->_impl_.distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaserDate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LineLaserMsg_2eproto_getter, &descriptor_table_LineLaserMsg_2eproto_once,
      file_level_metadata_LineLaserMsg_2eproto[0]);
}

// ===================================================================

class LineLaserMsg::_Internal {
 public:
  static const ::LSLAM::Header& header(const LineLaserMsg* msg);
  static const ::LSLAM::LaserDate& the_aim_point(const LineLaserMsg* msg);
};

const ::LSLAM::Header&
LineLaserMsg::_Internal::header(const LineLaserMsg* msg) {
  return *msg->_impl_.header_;
}
const ::LSLAM::LaserDate&
LineLaserMsg::_Internal::the_aim_point(const LineLaserMsg* msg) {
  return *msg->_impl_.the_aim_point_;
}
void LineLaserMsg::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
LineLaserMsg::LineLaserMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.LineLaserMsg)
}
LineLaserMsg::LineLaserMsg(const LineLaserMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LineLaserMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.front_line_laser_){from._impl_.front_line_laser_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.the_aim_point_){nullptr}
    , decltype(_impl_.effective_points_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::LSLAM::Header(*from._impl_.header_);
  }
  if (from._internal_has_the_aim_point()) {
    _this->_impl_.the_aim_point_ = new ::LSLAM::LaserDate(*from._impl_.the_aim_point_);
  }
  _this->_impl_.effective_points_ = from._impl_.effective_points_;
  // @@protoc_insertion_point(copy_constructor:LSLAM.LineLaserMsg)
}

inline void LineLaserMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.front_line_laser_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.the_aim_point_){nullptr}
    , decltype(_impl_.effective_points_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LineLaserMsg::~LineLaserMsg() {
  // @@protoc_insertion_point(destructor:LSLAM.LineLaserMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineLaserMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.front_line_laser_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.the_aim_point_;
}

void LineLaserMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineLaserMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.LineLaserMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.front_line_laser_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.the_aim_point_ != nullptr) {
    delete _impl_.the_aim_point_;
  }
  _impl_.the_aim_point_ = nullptr;
  _impl_.effective_points_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineLaserMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.LaserDate front_line_laser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_front_line_laser(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.LaserDate the_aim_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_the_aim_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double effective_points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.effective_points_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineLaserMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.LineLaserMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .LSLAM.LaserDate front_line_laser = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_front_line_laser_size()); i < n; i++) {
    const auto& repfield = this->_internal_front_line_laser(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .LSLAM.LaserDate the_aim_point = 3;
  if (this->_internal_has_the_aim_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::the_aim_point(this),
        _Internal::the_aim_point(this).GetCachedSize(), target, stream);
  }

  // double effective_points = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_effective_points = this->_internal_effective_points();
  uint64_t raw_effective_points;
  memcpy(&raw_effective_points, &tmp_effective_points, sizeof(tmp_effective_points));
  if (raw_effective_points != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_effective_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.LineLaserMsg)
  return target;
}

size_t LineLaserMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.LineLaserMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.LaserDate front_line_laser = 2;
  total_size += 1UL * this->_internal_front_line_laser_size();
  for (const auto& msg : this->_impl_.front_line_laser_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .LSLAM.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .LSLAM.LaserDate the_aim_point = 3;
  if (this->_internal_has_the_aim_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.the_aim_point_);
  }

  // double effective_points = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_effective_points = this->_internal_effective_points();
  uint64_t raw_effective_points;
  memcpy(&raw_effective_points, &tmp_effective_points, sizeof(tmp_effective_points));
  if (raw_effective_points != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineLaserMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LineLaserMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineLaserMsg::GetClassData() const { return &_class_data_; }


void LineLaserMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LineLaserMsg*>(&to_msg);
  auto& from = static_cast<const LineLaserMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.LineLaserMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.front_line_laser_.MergeFrom(from._impl_.front_line_laser_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::LSLAM::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_the_aim_point()) {
    _this->_internal_mutable_the_aim_point()->::LSLAM::LaserDate::MergeFrom(
        from._internal_the_aim_point());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_effective_points = from._internal_effective_points();
  uint64_t raw_effective_points;
  memcpy(&raw_effective_points, &tmp_effective_points, sizeof(tmp_effective_points));
  if (raw_effective_points != 0) {
    _this->_internal_set_effective_points(from._internal_effective_points());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineLaserMsg::CopyFrom(const LineLaserMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.LineLaserMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineLaserMsg::IsInitialized() const {
  return true;
}

void LineLaserMsg::InternalSwap(LineLaserMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.front_line_laser_.InternalSwap(&other->_impl_.front_line_laser_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineLaserMsg, _impl_.effective_points_)
      + sizeof(LineLaserMsg::_impl_.effective_points_)
      - PROTOBUF_FIELD_OFFSET(LineLaserMsg, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LineLaserMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LineLaserMsg_2eproto_getter, &descriptor_table_LineLaserMsg_2eproto_once,
      file_level_metadata_LineLaserMsg_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::LaserDate*
Arena::CreateMaybeMessage< ::LSLAM::LaserDate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::LaserDate >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::LineLaserMsg*
Arena::CreateMaybeMessage< ::LSLAM::LineLaserMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::LineLaserMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
