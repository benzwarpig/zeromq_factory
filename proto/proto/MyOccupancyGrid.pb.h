// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyOccupancyGrid.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MyOccupancyGrid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MyOccupancyGrid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "Header.pb.h"
#include "Pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MyOccupancyGrid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MyOccupancyGrid_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MyOccupancyGrid_2eproto;
namespace LSLAM {
class MapMetaData;
struct MapMetaDataDefaultTypeInternal;
extern MapMetaDataDefaultTypeInternal _MapMetaData_default_instance_;
class MyOccupancyGrid;
struct MyOccupancyGridDefaultTypeInternal;
extern MyOccupancyGridDefaultTypeInternal _MyOccupancyGrid_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::MapMetaData* Arena::CreateMaybeMessage<::LSLAM::MapMetaData>(Arena*);
template<> ::LSLAM::MyOccupancyGrid* Arena::CreateMaybeMessage<::LSLAM::MyOccupancyGrid>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class MapMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.MapMetaData) */ {
 public:
  inline MapMetaData() : MapMetaData(nullptr) {}
  ~MapMetaData() override;
  explicit PROTOBUF_CONSTEXPR MapMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapMetaData(const MapMetaData& from);
  MapMetaData(MapMetaData&& from) noexcept
    : MapMetaData() {
    *this = ::std::move(from);
  }

  inline MapMetaData& operator=(const MapMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapMetaData& operator=(MapMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapMetaData* internal_default_instance() {
    return reinterpret_cast<const MapMetaData*>(
               &_MapMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapMetaData& a, MapMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(MapMetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapMetaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapMetaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapMetaData& from) {
    MapMetaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapMetaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.MapMetaData";
  }
  protected:
  explicit MapMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapLoadTimeFieldNumber = 1,
    kOriginFieldNumber = 5,
    kResolutionFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // .google.protobuf.Timestamp map_load_time = 1;
  bool has_map_load_time() const;
  private:
  bool _internal_has_map_load_time() const;
  public:
  void clear_map_load_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& map_load_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_map_load_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_map_load_time();
  void set_allocated_map_load_time(::PROTOBUF_NAMESPACE_ID::Timestamp* map_load_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_map_load_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_map_load_time();
  public:
  void unsafe_arena_set_allocated_map_load_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* map_load_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_map_load_time();

  // .LSLAM.Pose origin = 5;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::LSLAM::Pose& origin() const;
  PROTOBUF_NODISCARD ::LSLAM::Pose* release_origin();
  ::LSLAM::Pose* mutable_origin();
  void set_allocated_origin(::LSLAM::Pose* origin);
  private:
  const ::LSLAM::Pose& _internal_origin() const;
  ::LSLAM::Pose* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::LSLAM::Pose* origin);
  ::LSLAM::Pose* unsafe_arena_release_origin();

  // float resolution = 2;
  void clear_resolution();
  float resolution() const;
  void set_resolution(float value);
  private:
  float _internal_resolution() const;
  void _internal_set_resolution(float value);
  public:

  // uint32 width = 3;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 4;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.MapMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* map_load_time_;
    ::LSLAM::Pose* origin_;
    float resolution_;
    uint32_t width_;
    uint32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyOccupancyGrid_2eproto;
};
// -------------------------------------------------------------------

class MyOccupancyGrid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.MyOccupancyGrid) */ {
 public:
  inline MyOccupancyGrid() : MyOccupancyGrid(nullptr) {}
  ~MyOccupancyGrid() override;
  explicit PROTOBUF_CONSTEXPR MyOccupancyGrid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MyOccupancyGrid(const MyOccupancyGrid& from);
  MyOccupancyGrid(MyOccupancyGrid&& from) noexcept
    : MyOccupancyGrid() {
    *this = ::std::move(from);
  }

  inline MyOccupancyGrid& operator=(const MyOccupancyGrid& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyOccupancyGrid& operator=(MyOccupancyGrid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MyOccupancyGrid& default_instance() {
    return *internal_default_instance();
  }
  static inline const MyOccupancyGrid* internal_default_instance() {
    return reinterpret_cast<const MyOccupancyGrid*>(
               &_MyOccupancyGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MyOccupancyGrid& a, MyOccupancyGrid& b) {
    a.Swap(&b);
  }
  inline void Swap(MyOccupancyGrid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyOccupancyGrid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MyOccupancyGrid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MyOccupancyGrid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MyOccupancyGrid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MyOccupancyGrid& from) {
    MyOccupancyGrid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyOccupancyGrid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.MyOccupancyGrid";
  }
  protected:
  explicit MyOccupancyGrid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kInfoFieldNumber = 2,
    kSavedOriginXFieldNumber = 4,
    kSavedOriginYFieldNumber = 5,
  };
  // repeated int32 data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  int32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_data() const;
  void _internal_add_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_data();
  public:
  int32_t data(int index) const;
  void set_data(int index, int32_t value);
  void add_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_data();

  // .LSLAM.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::LSLAM::Header& header() const;
  PROTOBUF_NODISCARD ::LSLAM::Header* release_header();
  ::LSLAM::Header* mutable_header();
  void set_allocated_header(::LSLAM::Header* header);
  private:
  const ::LSLAM::Header& _internal_header() const;
  ::LSLAM::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::LSLAM::Header* header);
  ::LSLAM::Header* unsafe_arena_release_header();

  // .LSLAM.MapMetaData info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::LSLAM::MapMetaData& info() const;
  PROTOBUF_NODISCARD ::LSLAM::MapMetaData* release_info();
  ::LSLAM::MapMetaData* mutable_info();
  void set_allocated_info(::LSLAM::MapMetaData* info);
  private:
  const ::LSLAM::MapMetaData& _internal_info() const;
  ::LSLAM::MapMetaData* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::LSLAM::MapMetaData* info);
  ::LSLAM::MapMetaData* unsafe_arena_release_info();

  // double saved_origin_x_ = 4;
  void clear_saved_origin_x_();
  double saved_origin_x_() const;
  void set_saved_origin_x_(double value);
  private:
  double _internal_saved_origin_x_() const;
  void _internal_set_saved_origin_x_(double value);
  public:

  // double saved_origin_y_ = 5;
  void clear_saved_origin_y_();
  double saved_origin_y_() const;
  void set_saved_origin_y_(double value);
  private:
  double _internal_saved_origin_y_() const;
  void _internal_set_saved_origin_y_(double value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.MyOccupancyGrid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _data_cached_byte_size_;
    ::LSLAM::Header* header_;
    ::LSLAM::MapMetaData* info_;
    double saved_origin_x__;
    double saved_origin_y__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MyOccupancyGrid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapMetaData

// .google.protobuf.Timestamp map_load_time = 1;
inline bool MapMetaData::_internal_has_map_load_time() const {
  return this != internal_default_instance() && _impl_.map_load_time_ != nullptr;
}
inline bool MapMetaData::has_map_load_time() const {
  return _internal_has_map_load_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MapMetaData::_internal_map_load_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.map_load_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MapMetaData::map_load_time() const {
  // @@protoc_insertion_point(field_get:LSLAM.MapMetaData.map_load_time)
  return _internal_map_load_time();
}
inline void MapMetaData::unsafe_arena_set_allocated_map_load_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* map_load_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_load_time_);
  }
  _impl_.map_load_time_ = map_load_time;
  if (map_load_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.MapMetaData.map_load_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MapMetaData::release_map_load_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.map_load_time_;
  _impl_.map_load_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MapMetaData::unsafe_arena_release_map_load_time() {
  // @@protoc_insertion_point(field_release:LSLAM.MapMetaData.map_load_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.map_load_time_;
  _impl_.map_load_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MapMetaData::_internal_mutable_map_load_time() {
  
  if (_impl_.map_load_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.map_load_time_ = p;
  }
  return _impl_.map_load_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MapMetaData::mutable_map_load_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_map_load_time();
  // @@protoc_insertion_point(field_mutable:LSLAM.MapMetaData.map_load_time)
  return _msg;
}
inline void MapMetaData::set_allocated_map_load_time(::PROTOBUF_NAMESPACE_ID::Timestamp* map_load_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_load_time_);
  }
  if (map_load_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_load_time));
    if (message_arena != submessage_arena) {
      map_load_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_load_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.map_load_time_ = map_load_time;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.MapMetaData.map_load_time)
}

// float resolution = 2;
inline void MapMetaData::clear_resolution() {
  _impl_.resolution_ = 0;
}
inline float MapMetaData::_internal_resolution() const {
  return _impl_.resolution_;
}
inline float MapMetaData::resolution() const {
  // @@protoc_insertion_point(field_get:LSLAM.MapMetaData.resolution)
  return _internal_resolution();
}
inline void MapMetaData::_internal_set_resolution(float value) {
  
  _impl_.resolution_ = value;
}
inline void MapMetaData::set_resolution(float value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:LSLAM.MapMetaData.resolution)
}

// uint32 width = 3;
inline void MapMetaData::clear_width() {
  _impl_.width_ = 0u;
}
inline uint32_t MapMetaData::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t MapMetaData::width() const {
  // @@protoc_insertion_point(field_get:LSLAM.MapMetaData.width)
  return _internal_width();
}
inline void MapMetaData::_internal_set_width(uint32_t value) {
  
  _impl_.width_ = value;
}
inline void MapMetaData::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:LSLAM.MapMetaData.width)
}

// uint32 height = 4;
inline void MapMetaData::clear_height() {
  _impl_.height_ = 0u;
}
inline uint32_t MapMetaData::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t MapMetaData::height() const {
  // @@protoc_insertion_point(field_get:LSLAM.MapMetaData.height)
  return _internal_height();
}
inline void MapMetaData::_internal_set_height(uint32_t value) {
  
  _impl_.height_ = value;
}
inline void MapMetaData::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:LSLAM.MapMetaData.height)
}

// .LSLAM.Pose origin = 5;
inline bool MapMetaData::_internal_has_origin() const {
  return this != internal_default_instance() && _impl_.origin_ != nullptr;
}
inline bool MapMetaData::has_origin() const {
  return _internal_has_origin();
}
inline const ::LSLAM::Pose& MapMetaData::_internal_origin() const {
  const ::LSLAM::Pose* p = _impl_.origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::Pose&>(
      ::LSLAM::_Pose_default_instance_);
}
inline const ::LSLAM::Pose& MapMetaData::origin() const {
  // @@protoc_insertion_point(field_get:LSLAM.MapMetaData.origin)
  return _internal_origin();
}
inline void MapMetaData::unsafe_arena_set_allocated_origin(
    ::LSLAM::Pose* origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_);
  }
  _impl_.origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.MapMetaData.origin)
}
inline ::LSLAM::Pose* MapMetaData::release_origin() {
  
  ::LSLAM::Pose* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::Pose* MapMetaData::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:LSLAM.MapMetaData.origin)
  
  ::LSLAM::Pose* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
  return temp;
}
inline ::LSLAM::Pose* MapMetaData::_internal_mutable_origin() {
  
  if (_impl_.origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::Pose>(GetArenaForAllocation());
    _impl_.origin_ = p;
  }
  return _impl_.origin_;
}
inline ::LSLAM::Pose* MapMetaData::mutable_origin() {
  ::LSLAM::Pose* _msg = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:LSLAM.MapMetaData.origin)
  return _msg;
}
inline void MapMetaData::set_allocated_origin(::LSLAM::Pose* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin));
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.MapMetaData.origin)
}

// -------------------------------------------------------------------

// MyOccupancyGrid

// .LSLAM.Header header = 1;
inline bool MyOccupancyGrid::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool MyOccupancyGrid::has_header() const {
  return _internal_has_header();
}
inline const ::LSLAM::Header& MyOccupancyGrid::_internal_header() const {
  const ::LSLAM::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::Header&>(
      ::LSLAM::_Header_default_instance_);
}
inline const ::LSLAM::Header& MyOccupancyGrid::header() const {
  // @@protoc_insertion_point(field_get:LSLAM.MyOccupancyGrid.header)
  return _internal_header();
}
inline void MyOccupancyGrid::unsafe_arena_set_allocated_header(
    ::LSLAM::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.MyOccupancyGrid.header)
}
inline ::LSLAM::Header* MyOccupancyGrid::release_header() {
  
  ::LSLAM::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::Header* MyOccupancyGrid::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:LSLAM.MyOccupancyGrid.header)
  
  ::LSLAM::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::LSLAM::Header* MyOccupancyGrid::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::LSLAM::Header* MyOccupancyGrid::mutable_header() {
  ::LSLAM::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:LSLAM.MyOccupancyGrid.header)
  return _msg;
}
inline void MyOccupancyGrid::set_allocated_header(::LSLAM::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.MyOccupancyGrid.header)
}

// .LSLAM.MapMetaData info = 2;
inline bool MyOccupancyGrid::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool MyOccupancyGrid::has_info() const {
  return _internal_has_info();
}
inline void MyOccupancyGrid::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::LSLAM::MapMetaData& MyOccupancyGrid::_internal_info() const {
  const ::LSLAM::MapMetaData* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::MapMetaData&>(
      ::LSLAM::_MapMetaData_default_instance_);
}
inline const ::LSLAM::MapMetaData& MyOccupancyGrid::info() const {
  // @@protoc_insertion_point(field_get:LSLAM.MyOccupancyGrid.info)
  return _internal_info();
}
inline void MyOccupancyGrid::unsafe_arena_set_allocated_info(
    ::LSLAM::MapMetaData* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.MyOccupancyGrid.info)
}
inline ::LSLAM::MapMetaData* MyOccupancyGrid::release_info() {
  
  ::LSLAM::MapMetaData* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::MapMetaData* MyOccupancyGrid::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:LSLAM.MyOccupancyGrid.info)
  
  ::LSLAM::MapMetaData* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::LSLAM::MapMetaData* MyOccupancyGrid::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::MapMetaData>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::LSLAM::MapMetaData* MyOccupancyGrid::mutable_info() {
  ::LSLAM::MapMetaData* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:LSLAM.MyOccupancyGrid.info)
  return _msg;
}
inline void MyOccupancyGrid::set_allocated_info(::LSLAM::MapMetaData* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.MyOccupancyGrid.info)
}

// repeated int32 data = 3;
inline int MyOccupancyGrid::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int MyOccupancyGrid::data_size() const {
  return _internal_data_size();
}
inline void MyOccupancyGrid::clear_data() {
  _impl_.data_.Clear();
}
inline int32_t MyOccupancyGrid::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline int32_t MyOccupancyGrid::data(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.MyOccupancyGrid.data)
  return _internal_data(index);
}
inline void MyOccupancyGrid::set_data(int index, int32_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:LSLAM.MyOccupancyGrid.data)
}
inline void MyOccupancyGrid::_internal_add_data(int32_t value) {
  _impl_.data_.Add(value);
}
inline void MyOccupancyGrid::add_data(int32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:LSLAM.MyOccupancyGrid.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MyOccupancyGrid::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MyOccupancyGrid::data() const {
  // @@protoc_insertion_point(field_list:LSLAM.MyOccupancyGrid.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MyOccupancyGrid::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MyOccupancyGrid::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.MyOccupancyGrid.data)
  return _internal_mutable_data();
}

// double saved_origin_x_ = 4;
inline void MyOccupancyGrid::clear_saved_origin_x_() {
  _impl_.saved_origin_x__ = 0;
}
inline double MyOccupancyGrid::_internal_saved_origin_x_() const {
  return _impl_.saved_origin_x__;
}
inline double MyOccupancyGrid::saved_origin_x_() const {
  // @@protoc_insertion_point(field_get:LSLAM.MyOccupancyGrid.saved_origin_x_)
  return _internal_saved_origin_x_();
}
inline void MyOccupancyGrid::_internal_set_saved_origin_x_(double value) {
  
  _impl_.saved_origin_x__ = value;
}
inline void MyOccupancyGrid::set_saved_origin_x_(double value) {
  _internal_set_saved_origin_x_(value);
  // @@protoc_insertion_point(field_set:LSLAM.MyOccupancyGrid.saved_origin_x_)
}

// double saved_origin_y_ = 5;
inline void MyOccupancyGrid::clear_saved_origin_y_() {
  _impl_.saved_origin_y__ = 0;
}
inline double MyOccupancyGrid::_internal_saved_origin_y_() const {
  return _impl_.saved_origin_y__;
}
inline double MyOccupancyGrid::saved_origin_y_() const {
  // @@protoc_insertion_point(field_get:LSLAM.MyOccupancyGrid.saved_origin_y_)
  return _internal_saved_origin_y_();
}
inline void MyOccupancyGrid::_internal_set_saved_origin_y_(double value) {
  
  _impl_.saved_origin_y__ = value;
}
inline void MyOccupancyGrid::set_saved_origin_y_(double value) {
  _internal_set_saved_origin_y_(value);
  // @@protoc_insertion_point(field_set:LSLAM.MyOccupancyGrid.saved_origin_y_)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MyOccupancyGrid_2eproto
