// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: STM32MsgToCostMap.proto

#include "STM32MsgToCostMap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR STM32MsgToCostMap::STM32MsgToCostMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.range_sensor_msg_)*/nullptr
  , /*decltype(_impl_.cliff_sensor_msg_)*/nullptr
  , /*decltype(_impl_.is_along_edge_mode_)*/false
  , /*decltype(_impl_.is_cleaning_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct STM32MsgToCostMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STM32MsgToCostMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STM32MsgToCostMapDefaultTypeInternal() {}
  union {
    STM32MsgToCostMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STM32MsgToCostMapDefaultTypeInternal _STM32MsgToCostMap_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_STM32MsgToCostMap_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_STM32MsgToCostMap_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_STM32MsgToCostMap_2eproto = nullptr;

const uint32_t TableStruct_STM32MsgToCostMap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::STM32MsgToCostMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::STM32MsgToCostMap, _impl_.range_sensor_msg_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::STM32MsgToCostMap, _impl_.cliff_sensor_msg_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::STM32MsgToCostMap, _impl_.is_along_edge_mode_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::STM32MsgToCostMap, _impl_.is_cleaning_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::STM32MsgToCostMap)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_STM32MsgToCostMap_default_instance_._instance,
};

const char descriptor_table_protodef_STM32MsgToCostMap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027STM32MsgToCostMap.proto\022\005LSLAM\032\024RangeS"
  "ensorMsg.proto\032\024CliffSensorMsg.proto\"\246\001\n"
  "\021STM32MsgToCostMap\022/\n\020range_sensor_msg\030\001"
  " \001(\0132\025.LSLAM.RangeSensorMsg\022/\n\020cliff_sen"
  "sor_msg\030\002 \001(\0132\025.LSLAM.CliffSensorMsg\022\032\n\022"
  "is_along_edge_mode\030\003 \001(\010\022\023\n\013is_cleaning\030"
  "\004 \001(\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_STM32MsgToCostMap_2eproto_deps[2] = {
  &::descriptor_table_CliffSensorMsg_2eproto,
  &::descriptor_table_RangeSensorMsg_2eproto,
};
static ::_pbi::once_flag descriptor_table_STM32MsgToCostMap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_STM32MsgToCostMap_2eproto = {
    false, false, 253, descriptor_table_protodef_STM32MsgToCostMap_2eproto,
    "STM32MsgToCostMap.proto",
    &descriptor_table_STM32MsgToCostMap_2eproto_once, descriptor_table_STM32MsgToCostMap_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_STM32MsgToCostMap_2eproto::offsets,
    file_level_metadata_STM32MsgToCostMap_2eproto, file_level_enum_descriptors_STM32MsgToCostMap_2eproto,
    file_level_service_descriptors_STM32MsgToCostMap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_STM32MsgToCostMap_2eproto_getter() {
  return &descriptor_table_STM32MsgToCostMap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_STM32MsgToCostMap_2eproto(&descriptor_table_STM32MsgToCostMap_2eproto);
namespace LSLAM {

// ===================================================================

class STM32MsgToCostMap::_Internal {
 public:
  static const ::LSLAM::RangeSensorMsg& range_sensor_msg(const STM32MsgToCostMap* msg);
  static const ::LSLAM::CliffSensorMsg& cliff_sensor_msg(const STM32MsgToCostMap* msg);
};

const ::LSLAM::RangeSensorMsg&
STM32MsgToCostMap::_Internal::range_sensor_msg(const STM32MsgToCostMap* msg) {
  return *msg->_impl_.range_sensor_msg_;
}
const ::LSLAM::CliffSensorMsg&
STM32MsgToCostMap::_Internal::cliff_sensor_msg(const STM32MsgToCostMap* msg) {
  return *msg->_impl_.cliff_sensor_msg_;
}
void STM32MsgToCostMap::clear_range_sensor_msg() {
  if (GetArenaForAllocation() == nullptr && _impl_.range_sensor_msg_ != nullptr) {
    delete _impl_.range_sensor_msg_;
  }
  _impl_.range_sensor_msg_ = nullptr;
}
void STM32MsgToCostMap::clear_cliff_sensor_msg() {
  if (GetArenaForAllocation() == nullptr && _impl_.cliff_sensor_msg_ != nullptr) {
    delete _impl_.cliff_sensor_msg_;
  }
  _impl_.cliff_sensor_msg_ = nullptr;
}
STM32MsgToCostMap::STM32MsgToCostMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.STM32MsgToCostMap)
}
STM32MsgToCostMap::STM32MsgToCostMap(const STM32MsgToCostMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  STM32MsgToCostMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.range_sensor_msg_){nullptr}
    , decltype(_impl_.cliff_sensor_msg_){nullptr}
    , decltype(_impl_.is_along_edge_mode_){}
    , decltype(_impl_.is_cleaning_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range_sensor_msg()) {
    _this->_impl_.range_sensor_msg_ = new ::LSLAM::RangeSensorMsg(*from._impl_.range_sensor_msg_);
  }
  if (from._internal_has_cliff_sensor_msg()) {
    _this->_impl_.cliff_sensor_msg_ = new ::LSLAM::CliffSensorMsg(*from._impl_.cliff_sensor_msg_);
  }
  ::memcpy(&_impl_.is_along_edge_mode_, &from._impl_.is_along_edge_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_cleaning_) -
    reinterpret_cast<char*>(&_impl_.is_along_edge_mode_)) + sizeof(_impl_.is_cleaning_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.STM32MsgToCostMap)
}

inline void STM32MsgToCostMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.range_sensor_msg_){nullptr}
    , decltype(_impl_.cliff_sensor_msg_){nullptr}
    , decltype(_impl_.is_along_edge_mode_){false}
    , decltype(_impl_.is_cleaning_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

STM32MsgToCostMap::~STM32MsgToCostMap() {
  // @@protoc_insertion_point(destructor:LSLAM.STM32MsgToCostMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STM32MsgToCostMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.range_sensor_msg_;
  if (this != internal_default_instance()) delete _impl_.cliff_sensor_msg_;
}

void STM32MsgToCostMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void STM32MsgToCostMap::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.STM32MsgToCostMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.range_sensor_msg_ != nullptr) {
    delete _impl_.range_sensor_msg_;
  }
  _impl_.range_sensor_msg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cliff_sensor_msg_ != nullptr) {
    delete _impl_.cliff_sensor_msg_;
  }
  _impl_.cliff_sensor_msg_ = nullptr;
  ::memset(&_impl_.is_along_edge_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_cleaning_) -
      reinterpret_cast<char*>(&_impl_.is_along_edge_mode_)) + sizeof(_impl_.is_cleaning_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STM32MsgToCostMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.RangeSensorMsg range_sensor_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_sensor_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LSLAM.CliffSensorMsg cliff_sensor_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cliff_sensor_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_along_edge_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_along_edge_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_cleaning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_cleaning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STM32MsgToCostMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.STM32MsgToCostMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.RangeSensorMsg range_sensor_msg = 1;
  if (this->_internal_has_range_sensor_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::range_sensor_msg(this),
        _Internal::range_sensor_msg(this).GetCachedSize(), target, stream);
  }

  // .LSLAM.CliffSensorMsg cliff_sensor_msg = 2;
  if (this->_internal_has_cliff_sensor_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cliff_sensor_msg(this),
        _Internal::cliff_sensor_msg(this).GetCachedSize(), target, stream);
  }

  // bool is_along_edge_mode = 3;
  if (this->_internal_is_along_edge_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_along_edge_mode(), target);
  }

  // bool is_cleaning = 4;
  if (this->_internal_is_cleaning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_cleaning(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.STM32MsgToCostMap)
  return target;
}

size_t STM32MsgToCostMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.STM32MsgToCostMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LSLAM.RangeSensorMsg range_sensor_msg = 1;
  if (this->_internal_has_range_sensor_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_sensor_msg_);
  }

  // .LSLAM.CliffSensorMsg cliff_sensor_msg = 2;
  if (this->_internal_has_cliff_sensor_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cliff_sensor_msg_);
  }

  // bool is_along_edge_mode = 3;
  if (this->_internal_is_along_edge_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool is_cleaning = 4;
  if (this->_internal_is_cleaning() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STM32MsgToCostMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    STM32MsgToCostMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STM32MsgToCostMap::GetClassData() const { return &_class_data_; }


void STM32MsgToCostMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<STM32MsgToCostMap*>(&to_msg);
  auto& from = static_cast<const STM32MsgToCostMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.STM32MsgToCostMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_range_sensor_msg()) {
    _this->_internal_mutable_range_sensor_msg()->::LSLAM::RangeSensorMsg::MergeFrom(
        from._internal_range_sensor_msg());
  }
  if (from._internal_has_cliff_sensor_msg()) {
    _this->_internal_mutable_cliff_sensor_msg()->::LSLAM::CliffSensorMsg::MergeFrom(
        from._internal_cliff_sensor_msg());
  }
  if (from._internal_is_along_edge_mode() != 0) {
    _this->_internal_set_is_along_edge_mode(from._internal_is_along_edge_mode());
  }
  if (from._internal_is_cleaning() != 0) {
    _this->_internal_set_is_cleaning(from._internal_is_cleaning());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STM32MsgToCostMap::CopyFrom(const STM32MsgToCostMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.STM32MsgToCostMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STM32MsgToCostMap::IsInitialized() const {
  return true;
}

void STM32MsgToCostMap::InternalSwap(STM32MsgToCostMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STM32MsgToCostMap, _impl_.is_cleaning_)
      + sizeof(STM32MsgToCostMap::_impl_.is_cleaning_)
      - PROTOBUF_FIELD_OFFSET(STM32MsgToCostMap, _impl_.range_sensor_msg_)>(
          reinterpret_cast<char*>(&_impl_.range_sensor_msg_),
          reinterpret_cast<char*>(&other->_impl_.range_sensor_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STM32MsgToCostMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_STM32MsgToCostMap_2eproto_getter, &descriptor_table_STM32MsgToCostMap_2eproto_once,
      file_level_metadata_STM32MsgToCostMap_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::STM32MsgToCostMap*
Arena::CreateMaybeMessage< ::LSLAM::STM32MsgToCostMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::STM32MsgToCostMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
