// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SubmapQuery.proto

#include "SubmapQuery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR SubmapQueryRequest::SubmapQueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trajectory_id_)*/0
  , /*decltype(_impl_.submap_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmapQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmapQueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmapQueryRequestDefaultTypeInternal() {}
  union {
    SubmapQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmapQueryRequestDefaultTypeInternal _SubmapQueryRequest_default_instance_;
PROTOBUF_CONSTEXPR SubmapQueryResponse::SubmapQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.textures_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.submap_version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmapQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmapQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmapQueryResponseDefaultTypeInternal() {}
  union {
    SubmapQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmapQueryResponseDefaultTypeInternal _SubmapQueryResponse_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_SubmapQuery_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SubmapQuery_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SubmapQuery_2eproto = nullptr;

const uint32_t TableStruct_SubmapQuery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::SubmapQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::SubmapQueryRequest, _impl_.trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::SubmapQueryRequest, _impl_.submap_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::SubmapQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::SubmapQueryResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::SubmapQueryResponse, _impl_.submap_version_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::SubmapQueryResponse, _impl_.textures_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::SubmapQueryRequest)},
  { 10, -1, -1, sizeof(::LSLAM::SubmapQueryResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_SubmapQueryRequest_default_instance_._instance,
  &::LSLAM::_SubmapQueryResponse_default_instance_._instance,
};

const char descriptor_table_protodef_SubmapQuery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021SubmapQuery.proto\022\005LSLAM\032\024StatusRespon"
  "se.proto\032\023SubmapTexture.proto\"A\n\022SubmapQ"
  "ueryRequest\022\025\n\rtrajectory_id\030\001 \001(\005\022\024\n\014su"
  "bmap_index\030\002 \001(\005\"|\n\023SubmapQueryResponse\022"
  "%\n\006status\030\001 \001(\0132\025.LSLAM.StatusResponse\022\026"
  "\n\016submap_version\030\002 \001(\005\022&\n\010textures\030\003 \003(\013"
  "2\024.LSLAM.SubmapTextureb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_SubmapQuery_2eproto_deps[2] = {
  &::descriptor_table_StatusResponse_2eproto,
  &::descriptor_table_SubmapTexture_2eproto,
};
static ::_pbi::once_flag descriptor_table_SubmapQuery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SubmapQuery_2eproto = {
    false, false, 270, descriptor_table_protodef_SubmapQuery_2eproto,
    "SubmapQuery.proto",
    &descriptor_table_SubmapQuery_2eproto_once, descriptor_table_SubmapQuery_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_SubmapQuery_2eproto::offsets,
    file_level_metadata_SubmapQuery_2eproto, file_level_enum_descriptors_SubmapQuery_2eproto,
    file_level_service_descriptors_SubmapQuery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SubmapQuery_2eproto_getter() {
  return &descriptor_table_SubmapQuery_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SubmapQuery_2eproto(&descriptor_table_SubmapQuery_2eproto);
namespace LSLAM {

// ===================================================================

class SubmapQueryRequest::_Internal {
 public:
};

SubmapQueryRequest::SubmapQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.SubmapQueryRequest)
}
SubmapQueryRequest::SubmapQueryRequest(const SubmapQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmapQueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trajectory_id_){}
    , decltype(_impl_.submap_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.trajectory_id_, &from._impl_.trajectory_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.submap_index_) -
    reinterpret_cast<char*>(&_impl_.trajectory_id_)) + sizeof(_impl_.submap_index_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.SubmapQueryRequest)
}

inline void SubmapQueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trajectory_id_){0}
    , decltype(_impl_.submap_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubmapQueryRequest::~SubmapQueryRequest() {
  // @@protoc_insertion_point(destructor:LSLAM.SubmapQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmapQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubmapQueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmapQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.SubmapQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.submap_index_) -
      reinterpret_cast<char*>(&_impl_.trajectory_id_)) + sizeof(_impl_.submap_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmapQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 submap_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.submap_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmapQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.SubmapQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->_internal_trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // int32 submap_index = 2;
  if (this->_internal_submap_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_submap_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.SubmapQueryRequest)
  return target;
}

size_t SubmapQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.SubmapQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->_internal_trajectory_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trajectory_id());
  }

  // int32 submap_index = 2;
  if (this->_internal_submap_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_submap_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmapQueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmapQueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmapQueryRequest::GetClassData() const { return &_class_data_; }


void SubmapQueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmapQueryRequest*>(&to_msg);
  auto& from = static_cast<const SubmapQueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.SubmapQueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_trajectory_id() != 0) {
    _this->_internal_set_trajectory_id(from._internal_trajectory_id());
  }
  if (from._internal_submap_index() != 0) {
    _this->_internal_set_submap_index(from._internal_submap_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmapQueryRequest::CopyFrom(const SubmapQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.SubmapQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQueryRequest::IsInitialized() const {
  return true;
}

void SubmapQueryRequest::InternalSwap(SubmapQueryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmapQueryRequest, _impl_.submap_index_)
      + sizeof(SubmapQueryRequest::_impl_.submap_index_)
      - PROTOBUF_FIELD_OFFSET(SubmapQueryRequest, _impl_.trajectory_id_)>(
          reinterpret_cast<char*>(&_impl_.trajectory_id_),
          reinterpret_cast<char*>(&other->_impl_.trajectory_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapQueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SubmapQuery_2eproto_getter, &descriptor_table_SubmapQuery_2eproto_once,
      file_level_metadata_SubmapQuery_2eproto[0]);
}

// ===================================================================

class SubmapQueryResponse::_Internal {
 public:
  static const ::LSLAM::StatusResponse& status(const SubmapQueryResponse* msg);
};

const ::LSLAM::StatusResponse&
SubmapQueryResponse::_Internal::status(const SubmapQueryResponse* msg) {
  return *msg->_impl_.status_;
}
void SubmapQueryResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SubmapQueryResponse::clear_textures() {
  _impl_.textures_.Clear();
}
SubmapQueryResponse::SubmapQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.SubmapQueryResponse)
}
SubmapQueryResponse::SubmapQueryResponse(const SubmapQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmapQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.textures_){from._impl_.textures_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.submap_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::LSLAM::StatusResponse(*from._impl_.status_);
  }
  _this->_impl_.submap_version_ = from._impl_.submap_version_;
  // @@protoc_insertion_point(copy_constructor:LSLAM.SubmapQueryResponse)
}

inline void SubmapQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.textures_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.submap_version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubmapQueryResponse::~SubmapQueryResponse() {
  // @@protoc_insertion_point(destructor:LSLAM.SubmapQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmapQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.textures_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SubmapQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmapQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.SubmapQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.textures_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.submap_version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmapQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LSLAM.StatusResponse status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 submap_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.submap_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LSLAM.SubmapTexture textures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_textures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmapQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.SubmapQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LSLAM.StatusResponse status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // int32 submap_version = 2;
  if (this->_internal_submap_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_submap_version(), target);
  }

  // repeated .LSLAM.SubmapTexture textures = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_textures_size()); i < n; i++) {
    const auto& repfield = this->_internal_textures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.SubmapQueryResponse)
  return target;
}

size_t SubmapQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.SubmapQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.SubmapTexture textures = 3;
  total_size += 1UL * this->_internal_textures_size();
  for (const auto& msg : this->_impl_.textures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .LSLAM.StatusResponse status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int32 submap_version = 2;
  if (this->_internal_submap_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_submap_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmapQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmapQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmapQueryResponse::GetClassData() const { return &_class_data_; }


void SubmapQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmapQueryResponse*>(&to_msg);
  auto& from = static_cast<const SubmapQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.SubmapQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.textures_.MergeFrom(from._impl_.textures_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::LSLAM::StatusResponse::MergeFrom(
        from._internal_status());
  }
  if (from._internal_submap_version() != 0) {
    _this->_internal_set_submap_version(from._internal_submap_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmapQueryResponse::CopyFrom(const SubmapQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.SubmapQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQueryResponse::IsInitialized() const {
  return true;
}

void SubmapQueryResponse::InternalSwap(SubmapQueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.textures_.InternalSwap(&other->_impl_.textures_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmapQueryResponse, _impl_.submap_version_)
      + sizeof(SubmapQueryResponse::_impl_.submap_version_)
      - PROTOBUF_FIELD_OFFSET(SubmapQueryResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SubmapQuery_2eproto_getter, &descriptor_table_SubmapQuery_2eproto_once,
      file_level_metadata_SubmapQuery_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::SubmapQueryRequest*
Arena::CreateMaybeMessage< ::LSLAM::SubmapQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::SubmapQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::SubmapQueryResponse*
Arena::CreateMaybeMessage< ::LSLAM::SubmapQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::SubmapQueryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
