// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotTaskCommand.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RobotTaskCommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RobotTaskCommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RobotTaskCommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RobotTaskCommand_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RobotTaskCommand_2eproto;
namespace LSLAM {
class RobotExpectTaskAndState;
struct RobotExpectTaskAndStateDefaultTypeInternal;
extern RobotExpectTaskAndStateDefaultTypeInternal _RobotExpectTaskAndState_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::RobotExpectTaskAndState* Arena::CreateMaybeMessage<::LSLAM::RobotExpectTaskAndState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

enum RobotExpectTaskStateType : int {
  EXPLECT_TASK_UNUSED = 0,
  EXPLECT_TASK_START = 6,
  EXPLECT_TASK_PAUSE = 3,
  EXPLECT_TASK_CONTINUE = 7,
  RobotExpectTaskStateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RobotExpectTaskStateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RobotExpectTaskStateType_IsValid(int value);
constexpr RobotExpectTaskStateType RobotExpectTaskStateType_MIN = EXPLECT_TASK_UNUSED;
constexpr RobotExpectTaskStateType RobotExpectTaskStateType_MAX = EXPLECT_TASK_CONTINUE;
constexpr int RobotExpectTaskStateType_ARRAYSIZE = RobotExpectTaskStateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotExpectTaskStateType_descriptor();
template<typename T>
inline const std::string& RobotExpectTaskStateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RobotExpectTaskStateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RobotExpectTaskStateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RobotExpectTaskStateType_descriptor(), enum_t_value);
}
inline bool RobotExpectTaskStateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RobotExpectTaskStateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RobotExpectTaskStateType>(
    RobotExpectTaskStateType_descriptor(), name, value);
}
enum RobotExpectTaskType : int {
  EXPLECT_EXPLORE_UNUSED = 0,
  EXPLECT_EXPLORE_TASK = 1,
  EXPLECT_SWEEP_TASK = 2,
  EXPLECT_MOP_TASK = 3,
  EXPLECT_SWEEP_AND_MOP_TASK = 4,
  EXPLECT_RECHARGE_TASK = 5,
  RobotExpectTaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RobotExpectTaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RobotExpectTaskType_IsValid(int value);
constexpr RobotExpectTaskType RobotExpectTaskType_MIN = EXPLECT_EXPLORE_UNUSED;
constexpr RobotExpectTaskType RobotExpectTaskType_MAX = EXPLECT_RECHARGE_TASK;
constexpr int RobotExpectTaskType_ARRAYSIZE = RobotExpectTaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotExpectTaskType_descriptor();
template<typename T>
inline const std::string& RobotExpectTaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RobotExpectTaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RobotExpectTaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RobotExpectTaskType_descriptor(), enum_t_value);
}
inline bool RobotExpectTaskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RobotExpectTaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RobotExpectTaskType>(
    RobotExpectTaskType_descriptor(), name, value);
}
// ===================================================================

class RobotExpectTaskAndState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.RobotExpectTaskAndState) */ {
 public:
  inline RobotExpectTaskAndState() : RobotExpectTaskAndState(nullptr) {}
  ~RobotExpectTaskAndState() override;
  explicit PROTOBUF_CONSTEXPR RobotExpectTaskAndState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotExpectTaskAndState(const RobotExpectTaskAndState& from);
  RobotExpectTaskAndState(RobotExpectTaskAndState&& from) noexcept
    : RobotExpectTaskAndState() {
    *this = ::std::move(from);
  }

  inline RobotExpectTaskAndState& operator=(const RobotExpectTaskAndState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotExpectTaskAndState& operator=(RobotExpectTaskAndState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotExpectTaskAndState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotExpectTaskAndState* internal_default_instance() {
    return reinterpret_cast<const RobotExpectTaskAndState*>(
               &_RobotExpectTaskAndState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RobotExpectTaskAndState& a, RobotExpectTaskAndState& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotExpectTaskAndState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotExpectTaskAndState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotExpectTaskAndState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotExpectTaskAndState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotExpectTaskAndState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotExpectTaskAndState& from) {
    RobotExpectTaskAndState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotExpectTaskAndState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.RobotExpectTaskAndState";
  }
  protected:
  explicit RobotExpectTaskAndState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotExpectTaskStateFieldNumber = 1,
    kRobotExpectTaskFieldNumber = 2,
  };
  // .LSLAM.RobotExpectTaskStateType robot_expect_task_state = 1;
  void clear_robot_expect_task_state();
  ::LSLAM::RobotExpectTaskStateType robot_expect_task_state() const;
  void set_robot_expect_task_state(::LSLAM::RobotExpectTaskStateType value);
  private:
  ::LSLAM::RobotExpectTaskStateType _internal_robot_expect_task_state() const;
  void _internal_set_robot_expect_task_state(::LSLAM::RobotExpectTaskStateType value);
  public:

  // .LSLAM.RobotExpectTaskType robot_expect_task = 2;
  void clear_robot_expect_task();
  ::LSLAM::RobotExpectTaskType robot_expect_task() const;
  void set_robot_expect_task(::LSLAM::RobotExpectTaskType value);
  private:
  ::LSLAM::RobotExpectTaskType _internal_robot_expect_task() const;
  void _internal_set_robot_expect_task(::LSLAM::RobotExpectTaskType value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.RobotExpectTaskAndState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int robot_expect_task_state_;
    int robot_expect_task_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RobotTaskCommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotExpectTaskAndState

// .LSLAM.RobotExpectTaskStateType robot_expect_task_state = 1;
inline void RobotExpectTaskAndState::clear_robot_expect_task_state() {
  _impl_.robot_expect_task_state_ = 0;
}
inline ::LSLAM::RobotExpectTaskStateType RobotExpectTaskAndState::_internal_robot_expect_task_state() const {
  return static_cast< ::LSLAM::RobotExpectTaskStateType >(_impl_.robot_expect_task_state_);
}
inline ::LSLAM::RobotExpectTaskStateType RobotExpectTaskAndState::robot_expect_task_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotExpectTaskAndState.robot_expect_task_state)
  return _internal_robot_expect_task_state();
}
inline void RobotExpectTaskAndState::_internal_set_robot_expect_task_state(::LSLAM::RobotExpectTaskStateType value) {
  
  _impl_.robot_expect_task_state_ = value;
}
inline void RobotExpectTaskAndState::set_robot_expect_task_state(::LSLAM::RobotExpectTaskStateType value) {
  _internal_set_robot_expect_task_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotExpectTaskAndState.robot_expect_task_state)
}

// .LSLAM.RobotExpectTaskType robot_expect_task = 2;
inline void RobotExpectTaskAndState::clear_robot_expect_task() {
  _impl_.robot_expect_task_ = 0;
}
inline ::LSLAM::RobotExpectTaskType RobotExpectTaskAndState::_internal_robot_expect_task() const {
  return static_cast< ::LSLAM::RobotExpectTaskType >(_impl_.robot_expect_task_);
}
inline ::LSLAM::RobotExpectTaskType RobotExpectTaskAndState::robot_expect_task() const {
  // @@protoc_insertion_point(field_get:LSLAM.RobotExpectTaskAndState.robot_expect_task)
  return _internal_robot_expect_task();
}
inline void RobotExpectTaskAndState::_internal_set_robot_expect_task(::LSLAM::RobotExpectTaskType value) {
  
  _impl_.robot_expect_task_ = value;
}
inline void RobotExpectTaskAndState::set_robot_expect_task(::LSLAM::RobotExpectTaskType value) {
  _internal_set_robot_expect_task(value);
  // @@protoc_insertion_point(field_set:LSLAM.RobotExpectTaskAndState.robot_expect_task)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LSLAM::RobotExpectTaskStateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::RobotExpectTaskStateType>() {
  return ::LSLAM::RobotExpectTaskStateType_descriptor();
}
template <> struct is_proto_enum< ::LSLAM::RobotExpectTaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::RobotExpectTaskType>() {
  return ::LSLAM::RobotExpectTaskType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RobotTaskCommand_2eproto
