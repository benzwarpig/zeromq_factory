// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CleanMotorMsgState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CleanMotorMsgState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CleanMotorMsgState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CleanMotorMsgState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CleanMotorMsgState_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CleanMotorMsgState_2eproto;
namespace LSLAM {
class ControlMotorAndPartner;
struct ControlMotorAndPartnerDefaultTypeInternal;
extern ControlMotorAndPartnerDefaultTypeInternal _ControlMotorAndPartner_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::ControlMotorAndPartner* Arena::CreateMaybeMessage<::LSLAM::ControlMotorAndPartner>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

enum ControlMotorAndPartner_CleanMode : int {
  ControlMotorAndPartner_CleanMode_CLEAN_MODE_STANDBY = 0,
  ControlMotorAndPartner_CleanMode_CLEAN_MODE_CONVENTION = 1,
  ControlMotorAndPartner_CleanMode_CLEAN_MODE_MUT = 2,
  ControlMotorAndPartner_CleanMode_CLEAN_MODE_STRONG = 3,
  ControlMotorAndPartner_CleanMode_ControlMotorAndPartner_CleanMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ControlMotorAndPartner_CleanMode_ControlMotorAndPartner_CleanMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ControlMotorAndPartner_CleanMode_IsValid(int value);
constexpr ControlMotorAndPartner_CleanMode ControlMotorAndPartner_CleanMode_CleanMode_MIN = ControlMotorAndPartner_CleanMode_CLEAN_MODE_STANDBY;
constexpr ControlMotorAndPartner_CleanMode ControlMotorAndPartner_CleanMode_CleanMode_MAX = ControlMotorAndPartner_CleanMode_CLEAN_MODE_STRONG;
constexpr int ControlMotorAndPartner_CleanMode_CleanMode_ARRAYSIZE = ControlMotorAndPartner_CleanMode_CleanMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMotorAndPartner_CleanMode_descriptor();
template<typename T>
inline const std::string& ControlMotorAndPartner_CleanMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlMotorAndPartner_CleanMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlMotorAndPartner_CleanMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlMotorAndPartner_CleanMode_descriptor(), enum_t_value);
}
inline bool ControlMotorAndPartner_CleanMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlMotorAndPartner_CleanMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlMotorAndPartner_CleanMode>(
    ControlMotorAndPartner_CleanMode_descriptor(), name, value);
}
enum ControlMotorAndPartner_CleanMotorState : int {
  ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_CLOSE = 0,
  ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_OPEN = 1,
  ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_LOW = 2,
  ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_MEDIUM = 3,
  ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_HIGH = 4,
  ControlMotorAndPartner_CleanMotorState_ControlMotorAndPartner_CleanMotorState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ControlMotorAndPartner_CleanMotorState_ControlMotorAndPartner_CleanMotorState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ControlMotorAndPartner_CleanMotorState_IsValid(int value);
constexpr ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner_CleanMotorState_CleanMotorState_MIN = ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_CLOSE;
constexpr ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner_CleanMotorState_CleanMotorState_MAX = ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_HIGH;
constexpr int ControlMotorAndPartner_CleanMotorState_CleanMotorState_ARRAYSIZE = ControlMotorAndPartner_CleanMotorState_CleanMotorState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMotorAndPartner_CleanMotorState_descriptor();
template<typename T>
inline const std::string& ControlMotorAndPartner_CleanMotorState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlMotorAndPartner_CleanMotorState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlMotorAndPartner_CleanMotorState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlMotorAndPartner_CleanMotorState_descriptor(), enum_t_value);
}
inline bool ControlMotorAndPartner_CleanMotorState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlMotorAndPartner_CleanMotorState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlMotorAndPartner_CleanMotorState>(
    ControlMotorAndPartner_CleanMotorState_descriptor(), name, value);
}
enum ControlMotorAndPartner_RemoteControlDirection : int {
  ControlMotorAndPartner_RemoteControlDirection_DEFAIL = 0,
  ControlMotorAndPartner_RemoteControlDirection_FORWARD = 1,
  ControlMotorAndPartner_RemoteControlDirection_BACKWARD = 2,
  ControlMotorAndPartner_RemoteControlDirection_TRUN_LEFT = 3,
  ControlMotorAndPartner_RemoteControlDirection_TURN_RIGHT = 4,
  ControlMotorAndPartner_RemoteControlDirection_STOP = 5,
  ControlMotorAndPartner_RemoteControlDirection_ControlMotorAndPartner_RemoteControlDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ControlMotorAndPartner_RemoteControlDirection_ControlMotorAndPartner_RemoteControlDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ControlMotorAndPartner_RemoteControlDirection_IsValid(int value);
constexpr ControlMotorAndPartner_RemoteControlDirection ControlMotorAndPartner_RemoteControlDirection_RemoteControlDirection_MIN = ControlMotorAndPartner_RemoteControlDirection_DEFAIL;
constexpr ControlMotorAndPartner_RemoteControlDirection ControlMotorAndPartner_RemoteControlDirection_RemoteControlDirection_MAX = ControlMotorAndPartner_RemoteControlDirection_STOP;
constexpr int ControlMotorAndPartner_RemoteControlDirection_RemoteControlDirection_ARRAYSIZE = ControlMotorAndPartner_RemoteControlDirection_RemoteControlDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMotorAndPartner_RemoteControlDirection_descriptor();
template<typename T>
inline const std::string& ControlMotorAndPartner_RemoteControlDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlMotorAndPartner_RemoteControlDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlMotorAndPartner_RemoteControlDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlMotorAndPartner_RemoteControlDirection_descriptor(), enum_t_value);
}
inline bool ControlMotorAndPartner_RemoteControlDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlMotorAndPartner_RemoteControlDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlMotorAndPartner_RemoteControlDirection>(
    ControlMotorAndPartner_RemoteControlDirection_descriptor(), name, value);
}
// ===================================================================

class ControlMotorAndPartner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.ControlMotorAndPartner) */ {
 public:
  inline ControlMotorAndPartner() : ControlMotorAndPartner(nullptr) {}
  ~ControlMotorAndPartner() override;
  explicit PROTOBUF_CONSTEXPR ControlMotorAndPartner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlMotorAndPartner(const ControlMotorAndPartner& from);
  ControlMotorAndPartner(ControlMotorAndPartner&& from) noexcept
    : ControlMotorAndPartner() {
    *this = ::std::move(from);
  }

  inline ControlMotorAndPartner& operator=(const ControlMotorAndPartner& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlMotorAndPartner& operator=(ControlMotorAndPartner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlMotorAndPartner& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlMotorAndPartner* internal_default_instance() {
    return reinterpret_cast<const ControlMotorAndPartner*>(
               &_ControlMotorAndPartner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlMotorAndPartner& a, ControlMotorAndPartner& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlMotorAndPartner* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlMotorAndPartner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlMotorAndPartner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlMotorAndPartner>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlMotorAndPartner& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControlMotorAndPartner& from) {
    ControlMotorAndPartner::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlMotorAndPartner* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.ControlMotorAndPartner";
  }
  protected:
  explicit ControlMotorAndPartner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ControlMotorAndPartner_CleanMode CleanMode;
  static constexpr CleanMode CLEAN_MODE_STANDBY =
    ControlMotorAndPartner_CleanMode_CLEAN_MODE_STANDBY;
  static constexpr CleanMode CLEAN_MODE_CONVENTION =
    ControlMotorAndPartner_CleanMode_CLEAN_MODE_CONVENTION;
  static constexpr CleanMode CLEAN_MODE_MUT =
    ControlMotorAndPartner_CleanMode_CLEAN_MODE_MUT;
  static constexpr CleanMode CLEAN_MODE_STRONG =
    ControlMotorAndPartner_CleanMode_CLEAN_MODE_STRONG;
  static inline bool CleanMode_IsValid(int value) {
    return ControlMotorAndPartner_CleanMode_IsValid(value);
  }
  static constexpr CleanMode CleanMode_MIN =
    ControlMotorAndPartner_CleanMode_CleanMode_MIN;
  static constexpr CleanMode CleanMode_MAX =
    ControlMotorAndPartner_CleanMode_CleanMode_MAX;
  static constexpr int CleanMode_ARRAYSIZE =
    ControlMotorAndPartner_CleanMode_CleanMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CleanMode_descriptor() {
    return ControlMotorAndPartner_CleanMode_descriptor();
  }
  template<typename T>
  static inline const std::string& CleanMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CleanMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CleanMode_Name.");
    return ControlMotorAndPartner_CleanMode_Name(enum_t_value);
  }
  static inline bool CleanMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CleanMode* value) {
    return ControlMotorAndPartner_CleanMode_Parse(name, value);
  }

  typedef ControlMotorAndPartner_CleanMotorState CleanMotorState;
  static constexpr CleanMotorState CLEAN_MOTOR_CLOSE =
    ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_CLOSE;
  static constexpr CleanMotorState CLEAN_MOTOR_OPEN =
    ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_OPEN;
  static constexpr CleanMotorState CLEAN_MOTOR_LOW =
    ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_LOW;
  static constexpr CleanMotorState CLEAN_MOTOR_MEDIUM =
    ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_MEDIUM;
  static constexpr CleanMotorState CLEAN_MOTOR_HIGH =
    ControlMotorAndPartner_CleanMotorState_CLEAN_MOTOR_HIGH;
  static inline bool CleanMotorState_IsValid(int value) {
    return ControlMotorAndPartner_CleanMotorState_IsValid(value);
  }
  static constexpr CleanMotorState CleanMotorState_MIN =
    ControlMotorAndPartner_CleanMotorState_CleanMotorState_MIN;
  static constexpr CleanMotorState CleanMotorState_MAX =
    ControlMotorAndPartner_CleanMotorState_CleanMotorState_MAX;
  static constexpr int CleanMotorState_ARRAYSIZE =
    ControlMotorAndPartner_CleanMotorState_CleanMotorState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CleanMotorState_descriptor() {
    return ControlMotorAndPartner_CleanMotorState_descriptor();
  }
  template<typename T>
  static inline const std::string& CleanMotorState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CleanMotorState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CleanMotorState_Name.");
    return ControlMotorAndPartner_CleanMotorState_Name(enum_t_value);
  }
  static inline bool CleanMotorState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CleanMotorState* value) {
    return ControlMotorAndPartner_CleanMotorState_Parse(name, value);
  }

  typedef ControlMotorAndPartner_RemoteControlDirection RemoteControlDirection;
  static constexpr RemoteControlDirection DEFAIL =
    ControlMotorAndPartner_RemoteControlDirection_DEFAIL;
  static constexpr RemoteControlDirection FORWARD =
    ControlMotorAndPartner_RemoteControlDirection_FORWARD;
  static constexpr RemoteControlDirection BACKWARD =
    ControlMotorAndPartner_RemoteControlDirection_BACKWARD;
  static constexpr RemoteControlDirection TRUN_LEFT =
    ControlMotorAndPartner_RemoteControlDirection_TRUN_LEFT;
  static constexpr RemoteControlDirection TURN_RIGHT =
    ControlMotorAndPartner_RemoteControlDirection_TURN_RIGHT;
  static constexpr RemoteControlDirection STOP =
    ControlMotorAndPartner_RemoteControlDirection_STOP;
  static inline bool RemoteControlDirection_IsValid(int value) {
    return ControlMotorAndPartner_RemoteControlDirection_IsValid(value);
  }
  static constexpr RemoteControlDirection RemoteControlDirection_MIN =
    ControlMotorAndPartner_RemoteControlDirection_RemoteControlDirection_MIN;
  static constexpr RemoteControlDirection RemoteControlDirection_MAX =
    ControlMotorAndPartner_RemoteControlDirection_RemoteControlDirection_MAX;
  static constexpr int RemoteControlDirection_ARRAYSIZE =
    ControlMotorAndPartner_RemoteControlDirection_RemoteControlDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RemoteControlDirection_descriptor() {
    return ControlMotorAndPartner_RemoteControlDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& RemoteControlDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RemoteControlDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RemoteControlDirection_Name.");
    return ControlMotorAndPartner_RemoteControlDirection_Name(enum_t_value);
  }
  static inline bool RemoteControlDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RemoteControlDirection* value) {
    return ControlMotorAndPartner_RemoteControlDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCleanModeFieldNumber = 1,
    kRobotMainBrushFieldNumber = 2,
    kRobotEdgeBrushFieldNumber = 3,
    kRobotMopBrushFieldNumber = 4,
    kRobotFanMotorFieldNumber = 5,
    kRobotWaterboxSwitchFieldNumber = 6,
    kPartnerAbnormalStateFieldNumber = 7,
    kEchoFrontDistanceFieldNumber = 8,
    kDirectionFieldNumber = 9,
  };
  // .LSLAM.ControlMotorAndPartner.CleanMode clean_mode = 1;
  void clear_clean_mode();
  ::LSLAM::ControlMotorAndPartner_CleanMode clean_mode() const;
  void set_clean_mode(::LSLAM::ControlMotorAndPartner_CleanMode value);
  private:
  ::LSLAM::ControlMotorAndPartner_CleanMode _internal_clean_mode() const;
  void _internal_set_clean_mode(::LSLAM::ControlMotorAndPartner_CleanMode value);
  public:

  // .LSLAM.ControlMotorAndPartner.CleanMotorState robot_main_brush = 2;
  void clear_robot_main_brush();
  ::LSLAM::ControlMotorAndPartner_CleanMotorState robot_main_brush() const;
  void set_robot_main_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value);
  private:
  ::LSLAM::ControlMotorAndPartner_CleanMotorState _internal_robot_main_brush() const;
  void _internal_set_robot_main_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value);
  public:

  // .LSLAM.ControlMotorAndPartner.CleanMotorState robot_edge_brush = 3;
  void clear_robot_edge_brush();
  ::LSLAM::ControlMotorAndPartner_CleanMotorState robot_edge_brush() const;
  void set_robot_edge_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value);
  private:
  ::LSLAM::ControlMotorAndPartner_CleanMotorState _internal_robot_edge_brush() const;
  void _internal_set_robot_edge_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value);
  public:

  // .LSLAM.ControlMotorAndPartner.CleanMotorState robot_mop_brush = 4;
  void clear_robot_mop_brush();
  ::LSLAM::ControlMotorAndPartner_CleanMotorState robot_mop_brush() const;
  void set_robot_mop_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value);
  private:
  ::LSLAM::ControlMotorAndPartner_CleanMotorState _internal_robot_mop_brush() const;
  void _internal_set_robot_mop_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value);
  public:

  // .LSLAM.ControlMotorAndPartner.CleanMotorState robot_fan_motor = 5;
  void clear_robot_fan_motor();
  ::LSLAM::ControlMotorAndPartner_CleanMotorState robot_fan_motor() const;
  void set_robot_fan_motor(::LSLAM::ControlMotorAndPartner_CleanMotorState value);
  private:
  ::LSLAM::ControlMotorAndPartner_CleanMotorState _internal_robot_fan_motor() const;
  void _internal_set_robot_fan_motor(::LSLAM::ControlMotorAndPartner_CleanMotorState value);
  public:

  // .LSLAM.ControlMotorAndPartner.CleanMotorState robot_waterbox_switch = 6;
  void clear_robot_waterbox_switch();
  ::LSLAM::ControlMotorAndPartner_CleanMotorState robot_waterbox_switch() const;
  void set_robot_waterbox_switch(::LSLAM::ControlMotorAndPartner_CleanMotorState value);
  private:
  ::LSLAM::ControlMotorAndPartner_CleanMotorState _internal_robot_waterbox_switch() const;
  void _internal_set_robot_waterbox_switch(::LSLAM::ControlMotorAndPartner_CleanMotorState value);
  public:

  // uint32 partner_abnormal_state = 7;
  void clear_partner_abnormal_state();
  uint32_t partner_abnormal_state() const;
  void set_partner_abnormal_state(uint32_t value);
  private:
  uint32_t _internal_partner_abnormal_state() const;
  void _internal_set_partner_abnormal_state(uint32_t value);
  public:

  // int32 echo_front_distance = 8;
  void clear_echo_front_distance();
  int32_t echo_front_distance() const;
  void set_echo_front_distance(int32_t value);
  private:
  int32_t _internal_echo_front_distance() const;
  void _internal_set_echo_front_distance(int32_t value);
  public:

  // .LSLAM.ControlMotorAndPartner.RemoteControlDirection direction = 9;
  void clear_direction();
  ::LSLAM::ControlMotorAndPartner_RemoteControlDirection direction() const;
  void set_direction(::LSLAM::ControlMotorAndPartner_RemoteControlDirection value);
  private:
  ::LSLAM::ControlMotorAndPartner_RemoteControlDirection _internal_direction() const;
  void _internal_set_direction(::LSLAM::ControlMotorAndPartner_RemoteControlDirection value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.ControlMotorAndPartner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int clean_mode_;
    int robot_main_brush_;
    int robot_edge_brush_;
    int robot_mop_brush_;
    int robot_fan_motor_;
    int robot_waterbox_switch_;
    uint32_t partner_abnormal_state_;
    int32_t echo_front_distance_;
    int direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CleanMotorMsgState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlMotorAndPartner

// .LSLAM.ControlMotorAndPartner.CleanMode clean_mode = 1;
inline void ControlMotorAndPartner::clear_clean_mode() {
  _impl_.clean_mode_ = 0;
}
inline ::LSLAM::ControlMotorAndPartner_CleanMode ControlMotorAndPartner::_internal_clean_mode() const {
  return static_cast< ::LSLAM::ControlMotorAndPartner_CleanMode >(_impl_.clean_mode_);
}
inline ::LSLAM::ControlMotorAndPartner_CleanMode ControlMotorAndPartner::clean_mode() const {
  // @@protoc_insertion_point(field_get:LSLAM.ControlMotorAndPartner.clean_mode)
  return _internal_clean_mode();
}
inline void ControlMotorAndPartner::_internal_set_clean_mode(::LSLAM::ControlMotorAndPartner_CleanMode value) {
  
  _impl_.clean_mode_ = value;
}
inline void ControlMotorAndPartner::set_clean_mode(::LSLAM::ControlMotorAndPartner_CleanMode value) {
  _internal_set_clean_mode(value);
  // @@protoc_insertion_point(field_set:LSLAM.ControlMotorAndPartner.clean_mode)
}

// .LSLAM.ControlMotorAndPartner.CleanMotorState robot_main_brush = 2;
inline void ControlMotorAndPartner::clear_robot_main_brush() {
  _impl_.robot_main_brush_ = 0;
}
inline ::LSLAM::ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner::_internal_robot_main_brush() const {
  return static_cast< ::LSLAM::ControlMotorAndPartner_CleanMotorState >(_impl_.robot_main_brush_);
}
inline ::LSLAM::ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner::robot_main_brush() const {
  // @@protoc_insertion_point(field_get:LSLAM.ControlMotorAndPartner.robot_main_brush)
  return _internal_robot_main_brush();
}
inline void ControlMotorAndPartner::_internal_set_robot_main_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value) {
  
  _impl_.robot_main_brush_ = value;
}
inline void ControlMotorAndPartner::set_robot_main_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value) {
  _internal_set_robot_main_brush(value);
  // @@protoc_insertion_point(field_set:LSLAM.ControlMotorAndPartner.robot_main_brush)
}

// .LSLAM.ControlMotorAndPartner.CleanMotorState robot_edge_brush = 3;
inline void ControlMotorAndPartner::clear_robot_edge_brush() {
  _impl_.robot_edge_brush_ = 0;
}
inline ::LSLAM::ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner::_internal_robot_edge_brush() const {
  return static_cast< ::LSLAM::ControlMotorAndPartner_CleanMotorState >(_impl_.robot_edge_brush_);
}
inline ::LSLAM::ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner::robot_edge_brush() const {
  // @@protoc_insertion_point(field_get:LSLAM.ControlMotorAndPartner.robot_edge_brush)
  return _internal_robot_edge_brush();
}
inline void ControlMotorAndPartner::_internal_set_robot_edge_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value) {
  
  _impl_.robot_edge_brush_ = value;
}
inline void ControlMotorAndPartner::set_robot_edge_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value) {
  _internal_set_robot_edge_brush(value);
  // @@protoc_insertion_point(field_set:LSLAM.ControlMotorAndPartner.robot_edge_brush)
}

// .LSLAM.ControlMotorAndPartner.CleanMotorState robot_mop_brush = 4;
inline void ControlMotorAndPartner::clear_robot_mop_brush() {
  _impl_.robot_mop_brush_ = 0;
}
inline ::LSLAM::ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner::_internal_robot_mop_brush() const {
  return static_cast< ::LSLAM::ControlMotorAndPartner_CleanMotorState >(_impl_.robot_mop_brush_);
}
inline ::LSLAM::ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner::robot_mop_brush() const {
  // @@protoc_insertion_point(field_get:LSLAM.ControlMotorAndPartner.robot_mop_brush)
  return _internal_robot_mop_brush();
}
inline void ControlMotorAndPartner::_internal_set_robot_mop_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value) {
  
  _impl_.robot_mop_brush_ = value;
}
inline void ControlMotorAndPartner::set_robot_mop_brush(::LSLAM::ControlMotorAndPartner_CleanMotorState value) {
  _internal_set_robot_mop_brush(value);
  // @@protoc_insertion_point(field_set:LSLAM.ControlMotorAndPartner.robot_mop_brush)
}

// .LSLAM.ControlMotorAndPartner.CleanMotorState robot_fan_motor = 5;
inline void ControlMotorAndPartner::clear_robot_fan_motor() {
  _impl_.robot_fan_motor_ = 0;
}
inline ::LSLAM::ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner::_internal_robot_fan_motor() const {
  return static_cast< ::LSLAM::ControlMotorAndPartner_CleanMotorState >(_impl_.robot_fan_motor_);
}
inline ::LSLAM::ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner::robot_fan_motor() const {
  // @@protoc_insertion_point(field_get:LSLAM.ControlMotorAndPartner.robot_fan_motor)
  return _internal_robot_fan_motor();
}
inline void ControlMotorAndPartner::_internal_set_robot_fan_motor(::LSLAM::ControlMotorAndPartner_CleanMotorState value) {
  
  _impl_.robot_fan_motor_ = value;
}
inline void ControlMotorAndPartner::set_robot_fan_motor(::LSLAM::ControlMotorAndPartner_CleanMotorState value) {
  _internal_set_robot_fan_motor(value);
  // @@protoc_insertion_point(field_set:LSLAM.ControlMotorAndPartner.robot_fan_motor)
}

// .LSLAM.ControlMotorAndPartner.CleanMotorState robot_waterbox_switch = 6;
inline void ControlMotorAndPartner::clear_robot_waterbox_switch() {
  _impl_.robot_waterbox_switch_ = 0;
}
inline ::LSLAM::ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner::_internal_robot_waterbox_switch() const {
  return static_cast< ::LSLAM::ControlMotorAndPartner_CleanMotorState >(_impl_.robot_waterbox_switch_);
}
inline ::LSLAM::ControlMotorAndPartner_CleanMotorState ControlMotorAndPartner::robot_waterbox_switch() const {
  // @@protoc_insertion_point(field_get:LSLAM.ControlMotorAndPartner.robot_waterbox_switch)
  return _internal_robot_waterbox_switch();
}
inline void ControlMotorAndPartner::_internal_set_robot_waterbox_switch(::LSLAM::ControlMotorAndPartner_CleanMotorState value) {
  
  _impl_.robot_waterbox_switch_ = value;
}
inline void ControlMotorAndPartner::set_robot_waterbox_switch(::LSLAM::ControlMotorAndPartner_CleanMotorState value) {
  _internal_set_robot_waterbox_switch(value);
  // @@protoc_insertion_point(field_set:LSLAM.ControlMotorAndPartner.robot_waterbox_switch)
}

// uint32 partner_abnormal_state = 7;
inline void ControlMotorAndPartner::clear_partner_abnormal_state() {
  _impl_.partner_abnormal_state_ = 0u;
}
inline uint32_t ControlMotorAndPartner::_internal_partner_abnormal_state() const {
  return _impl_.partner_abnormal_state_;
}
inline uint32_t ControlMotorAndPartner::partner_abnormal_state() const {
  // @@protoc_insertion_point(field_get:LSLAM.ControlMotorAndPartner.partner_abnormal_state)
  return _internal_partner_abnormal_state();
}
inline void ControlMotorAndPartner::_internal_set_partner_abnormal_state(uint32_t value) {
  
  _impl_.partner_abnormal_state_ = value;
}
inline void ControlMotorAndPartner::set_partner_abnormal_state(uint32_t value) {
  _internal_set_partner_abnormal_state(value);
  // @@protoc_insertion_point(field_set:LSLAM.ControlMotorAndPartner.partner_abnormal_state)
}

// int32 echo_front_distance = 8;
inline void ControlMotorAndPartner::clear_echo_front_distance() {
  _impl_.echo_front_distance_ = 0;
}
inline int32_t ControlMotorAndPartner::_internal_echo_front_distance() const {
  return _impl_.echo_front_distance_;
}
inline int32_t ControlMotorAndPartner::echo_front_distance() const {
  // @@protoc_insertion_point(field_get:LSLAM.ControlMotorAndPartner.echo_front_distance)
  return _internal_echo_front_distance();
}
inline void ControlMotorAndPartner::_internal_set_echo_front_distance(int32_t value) {
  
  _impl_.echo_front_distance_ = value;
}
inline void ControlMotorAndPartner::set_echo_front_distance(int32_t value) {
  _internal_set_echo_front_distance(value);
  // @@protoc_insertion_point(field_set:LSLAM.ControlMotorAndPartner.echo_front_distance)
}

// .LSLAM.ControlMotorAndPartner.RemoteControlDirection direction = 9;
inline void ControlMotorAndPartner::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::LSLAM::ControlMotorAndPartner_RemoteControlDirection ControlMotorAndPartner::_internal_direction() const {
  return static_cast< ::LSLAM::ControlMotorAndPartner_RemoteControlDirection >(_impl_.direction_);
}
inline ::LSLAM::ControlMotorAndPartner_RemoteControlDirection ControlMotorAndPartner::direction() const {
  // @@protoc_insertion_point(field_get:LSLAM.ControlMotorAndPartner.direction)
  return _internal_direction();
}
inline void ControlMotorAndPartner::_internal_set_direction(::LSLAM::ControlMotorAndPartner_RemoteControlDirection value) {
  
  _impl_.direction_ = value;
}
inline void ControlMotorAndPartner::set_direction(::LSLAM::ControlMotorAndPartner_RemoteControlDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:LSLAM.ControlMotorAndPartner.direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LSLAM::ControlMotorAndPartner_CleanMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::ControlMotorAndPartner_CleanMode>() {
  return ::LSLAM::ControlMotorAndPartner_CleanMode_descriptor();
}
template <> struct is_proto_enum< ::LSLAM::ControlMotorAndPartner_CleanMotorState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::ControlMotorAndPartner_CleanMotorState>() {
  return ::LSLAM::ControlMotorAndPartner_CleanMotorState_descriptor();
}
template <> struct is_proto_enum< ::LSLAM::ControlMotorAndPartner_RemoteControlDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::ControlMotorAndPartner_RemoteControlDirection>() {
  return ::LSLAM::ControlMotorAndPartner_RemoteControlDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CleanMotorMsgState_2eproto
