// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotPose.proto

#include "RobotPose.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace LSLAM {
PROTOBUF_CONSTEXPR RobotPose::RobotPose(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.theta_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RobotPoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotPoseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotPoseDefaultTypeInternal() {}
  union {
    RobotPose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotPoseDefaultTypeInternal _RobotPose_default_instance_;
PROTOBUF_CONSTEXPR RobotPoses::RobotPoses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.robotpose_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RobotPosesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotPosesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotPosesDefaultTypeInternal() {}
  union {
    RobotPoses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotPosesDefaultTypeInternal _RobotPoses_default_instance_;
}  // namespace LSLAM
static ::_pb::Metadata file_level_metadata_RobotPose_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_RobotPose_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_RobotPose_2eproto = nullptr;

const uint32_t TableStruct_RobotPose_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotPose, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotPose, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotPose, _impl_.theta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotPoses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::LSLAM::RobotPoses, _impl_.robotpose_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LSLAM::RobotPose)},
  { 11, -1, -1, sizeof(::LSLAM::RobotPoses)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::LSLAM::_RobotPose_default_instance_._instance,
  &::LSLAM::_RobotPoses_default_instance_._instance,
};

const char descriptor_table_protodef_RobotPose_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017RobotPose.proto\022\005LSLAM\"0\n\tRobotPose\022\t\n"
  "\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005theta\030\003 \001(\005\"1\n\nRo"
  "botPoses\022#\n\trobotpose\030\001 \003(\0132\020.LSLAM.Robo"
  "tPoseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_RobotPose_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RobotPose_2eproto = {
    false, false, 133, descriptor_table_protodef_RobotPose_2eproto,
    "RobotPose.proto",
    &descriptor_table_RobotPose_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_RobotPose_2eproto::offsets,
    file_level_metadata_RobotPose_2eproto, file_level_enum_descriptors_RobotPose_2eproto,
    file_level_service_descriptors_RobotPose_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RobotPose_2eproto_getter() {
  return &descriptor_table_RobotPose_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RobotPose_2eproto(&descriptor_table_RobotPose_2eproto);
namespace LSLAM {

// ===================================================================

class RobotPose::_Internal {
 public:
};

RobotPose::RobotPose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.RobotPose)
}
RobotPose::RobotPose(const RobotPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RobotPose* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.theta_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.theta_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.theta_));
  // @@protoc_insertion_point(copy_constructor:LSLAM.RobotPose)
}

inline void RobotPose::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.theta_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RobotPose::~RobotPose() {
  // @@protoc_insertion_point(destructor:LSLAM.RobotPose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotPose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RobotPose::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotPose::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.RobotPose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.theta_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.theta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotPose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotPose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.RobotPose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 theta = 3;
  if (this->_internal_theta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_theta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.RobotPose)
  return target;
}

size_t RobotPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.RobotPose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 theta = 3;
  if (this->_internal_theta() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_theta());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotPose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotPose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotPose::GetClassData() const { return &_class_data_; }


void RobotPose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotPose*>(&to_msg);
  auto& from = static_cast<const RobotPose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.RobotPose)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_theta() != 0) {
    _this->_internal_set_theta(from._internal_theta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotPose::CopyFrom(const RobotPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.RobotPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPose::IsInitialized() const {
  return true;
}

void RobotPose::InternalSwap(RobotPose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotPose, _impl_.theta_)
      + sizeof(RobotPose::_impl_.theta_)
      - PROTOBUF_FIELD_OFFSET(RobotPose, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotPose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RobotPose_2eproto_getter, &descriptor_table_RobotPose_2eproto_once,
      file_level_metadata_RobotPose_2eproto[0]);
}

// ===================================================================

class RobotPoses::_Internal {
 public:
};

RobotPoses::RobotPoses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LSLAM.RobotPoses)
}
RobotPoses::RobotPoses(const RobotPoses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RobotPoses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.robotpose_){from._impl_.robotpose_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LSLAM.RobotPoses)
}

inline void RobotPoses::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.robotpose_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RobotPoses::~RobotPoses() {
  // @@protoc_insertion_point(destructor:LSLAM.RobotPoses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotPoses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.robotpose_.~RepeatedPtrField();
}

void RobotPoses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotPoses::Clear() {
// @@protoc_insertion_point(message_clear_start:LSLAM.RobotPoses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.robotpose_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotPoses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .LSLAM.RobotPose robotpose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robotpose(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotPoses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LSLAM.RobotPoses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LSLAM.RobotPose robotpose = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_robotpose_size()); i < n; i++) {
    const auto& repfield = this->_internal_robotpose(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LSLAM.RobotPoses)
  return target;
}

size_t RobotPoses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LSLAM.RobotPoses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LSLAM.RobotPose robotpose = 1;
  total_size += 1UL * this->_internal_robotpose_size();
  for (const auto& msg : this->_impl_.robotpose_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotPoses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotPoses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotPoses::GetClassData() const { return &_class_data_; }


void RobotPoses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotPoses*>(&to_msg);
  auto& from = static_cast<const RobotPoses&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LSLAM.RobotPoses)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.robotpose_.MergeFrom(from._impl_.robotpose_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotPoses::CopyFrom(const RobotPoses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LSLAM.RobotPoses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPoses::IsInitialized() const {
  return true;
}

void RobotPoses::InternalSwap(RobotPoses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.robotpose_.InternalSwap(&other->_impl_.robotpose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotPoses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RobotPose_2eproto_getter, &descriptor_table_RobotPose_2eproto_once,
      file_level_metadata_RobotPose_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LSLAM::RobotPose*
Arena::CreateMaybeMessage< ::LSLAM::RobotPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::RobotPose >(arena);
}
template<> PROTOBUF_NOINLINE ::LSLAM::RobotPoses*
Arena::CreateMaybeMessage< ::LSLAM::RobotPoses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LSLAM::RobotPoses >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
