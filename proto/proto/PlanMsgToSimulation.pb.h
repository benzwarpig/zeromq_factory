// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlanMsgToSimulation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PlanMsgToSimulation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PlanMsgToSimulation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PlanMsgToSimulation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PlanMsgToSimulation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PlanMsgToSimulation_2eproto;
namespace LSLAM {
class PlanMsgToSimulation;
struct PlanMsgToSimulationDefaultTypeInternal;
extern PlanMsgToSimulationDefaultTypeInternal _PlanMsgToSimulation_default_instance_;
class Point32;
struct Point32DefaultTypeInternal;
extern Point32DefaultTypeInternal _Point32_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::PlanMsgToSimulation* Arena::CreateMaybeMessage<::LSLAM::PlanMsgToSimulation>(Arena*);
template<> ::LSLAM::Point32* Arena::CreateMaybeMessage<::LSLAM::Point32>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

// ===================================================================

class Point32 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.Point32) */ {
 public:
  inline Point32() : Point32(nullptr) {}
  ~Point32() override;
  explicit PROTOBUF_CONSTEXPR Point32(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point32(const Point32& from);
  Point32(Point32&& from) noexcept
    : Point32() {
    *this = ::std::move(from);
  }

  inline Point32& operator=(const Point32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point32& operator=(Point32&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point32& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point32* internal_default_instance() {
    return reinterpret_cast<const Point32*>(
               &_Point32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point32& a, Point32& b) {
    a.Swap(&b);
  }
  inline void Swap(Point32* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point32>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point32& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point32& from) {
    Point32::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point32* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.Point32";
  }
  protected:
  explicit Point32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 data = 3;
  void clear_data();
  int32_t data() const;
  void set_data(int32_t value);
  private:
  int32_t _internal_data() const;
  void _internal_set_data(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.Point32)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    int32_t data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PlanMsgToSimulation_2eproto;
};
// -------------------------------------------------------------------

class PlanMsgToSimulation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.PlanMsgToSimulation) */ {
 public:
  inline PlanMsgToSimulation() : PlanMsgToSimulation(nullptr) {}
  ~PlanMsgToSimulation() override;
  explicit PROTOBUF_CONSTEXPR PlanMsgToSimulation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanMsgToSimulation(const PlanMsgToSimulation& from);
  PlanMsgToSimulation(PlanMsgToSimulation&& from) noexcept
    : PlanMsgToSimulation() {
    *this = ::std::move(from);
  }

  inline PlanMsgToSimulation& operator=(const PlanMsgToSimulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanMsgToSimulation& operator=(PlanMsgToSimulation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanMsgToSimulation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanMsgToSimulation* internal_default_instance() {
    return reinterpret_cast<const PlanMsgToSimulation*>(
               &_PlanMsgToSimulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlanMsgToSimulation& a, PlanMsgToSimulation& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanMsgToSimulation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanMsgToSimulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanMsgToSimulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanMsgToSimulation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanMsgToSimulation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlanMsgToSimulation& from) {
    PlanMsgToSimulation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanMsgToSimulation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.PlanMsgToSimulation";
  }
  protected:
  explicit PlanMsgToSimulation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointDataFieldNumber = 1,
  };
  // repeated .LSLAM.Point32 point_data = 1;
  int point_data_size() const;
  private:
  int _internal_point_data_size() const;
  public:
  void clear_point_data();
  ::LSLAM::Point32* mutable_point_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point32 >*
      mutable_point_data();
  private:
  const ::LSLAM::Point32& _internal_point_data(int index) const;
  ::LSLAM::Point32* _internal_add_point_data();
  public:
  const ::LSLAM::Point32& point_data(int index) const;
  ::LSLAM::Point32* add_point_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point32 >&
      point_data() const;

  // @@protoc_insertion_point(class_scope:LSLAM.PlanMsgToSimulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point32 > point_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PlanMsgToSimulation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point32

// int32 x = 1;
inline void Point32::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Point32::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Point32::x() const {
  // @@protoc_insertion_point(field_get:LSLAM.Point32.x)
  return _internal_x();
}
inline void Point32::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Point32::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:LSLAM.Point32.x)
}

// int32 y = 2;
inline void Point32::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Point32::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Point32::y() const {
  // @@protoc_insertion_point(field_get:LSLAM.Point32.y)
  return _internal_y();
}
inline void Point32::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Point32::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:LSLAM.Point32.y)
}

// int32 data = 3;
inline void Point32::clear_data() {
  _impl_.data_ = 0;
}
inline int32_t Point32::_internal_data() const {
  return _impl_.data_;
}
inline int32_t Point32::data() const {
  // @@protoc_insertion_point(field_get:LSLAM.Point32.data)
  return _internal_data();
}
inline void Point32::_internal_set_data(int32_t value) {
  
  _impl_.data_ = value;
}
inline void Point32::set_data(int32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:LSLAM.Point32.data)
}

// -------------------------------------------------------------------

// PlanMsgToSimulation

// repeated .LSLAM.Point32 point_data = 1;
inline int PlanMsgToSimulation::_internal_point_data_size() const {
  return _impl_.point_data_.size();
}
inline int PlanMsgToSimulation::point_data_size() const {
  return _internal_point_data_size();
}
inline void PlanMsgToSimulation::clear_point_data() {
  _impl_.point_data_.Clear();
}
inline ::LSLAM::Point32* PlanMsgToSimulation::mutable_point_data(int index) {
  // @@protoc_insertion_point(field_mutable:LSLAM.PlanMsgToSimulation.point_data)
  return _impl_.point_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point32 >*
PlanMsgToSimulation::mutable_point_data() {
  // @@protoc_insertion_point(field_mutable_list:LSLAM.PlanMsgToSimulation.point_data)
  return &_impl_.point_data_;
}
inline const ::LSLAM::Point32& PlanMsgToSimulation::_internal_point_data(int index) const {
  return _impl_.point_data_.Get(index);
}
inline const ::LSLAM::Point32& PlanMsgToSimulation::point_data(int index) const {
  // @@protoc_insertion_point(field_get:LSLAM.PlanMsgToSimulation.point_data)
  return _internal_point_data(index);
}
inline ::LSLAM::Point32* PlanMsgToSimulation::_internal_add_point_data() {
  return _impl_.point_data_.Add();
}
inline ::LSLAM::Point32* PlanMsgToSimulation::add_point_data() {
  ::LSLAM::Point32* _add = _internal_add_point_data();
  // @@protoc_insertion_point(field_add:LSLAM.PlanMsgToSimulation.point_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LSLAM::Point32 >&
PlanMsgToSimulation::point_data() const {
  // @@protoc_insertion_point(field_list:LSLAM.PlanMsgToSimulation.point_data)
  return _impl_.point_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PlanMsgToSimulation_2eproto
