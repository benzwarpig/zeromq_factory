// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CleanMsgToState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CleanMsgToState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CleanMsgToState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CleanMsgToState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CleanMsgToState_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CleanMsgToState_2eproto;
namespace LSLAM {
class CleanMsgToState;
struct CleanMsgToStateDefaultTypeInternal;
extern CleanMsgToStateDefaultTypeInternal _CleanMsgToState_default_instance_;
class VehicleSpeed;
struct VehicleSpeedDefaultTypeInternal;
extern VehicleSpeedDefaultTypeInternal _VehicleSpeed_default_instance_;
}  // namespace LSLAM
PROTOBUF_NAMESPACE_OPEN
template<> ::LSLAM::CleanMsgToState* Arena::CreateMaybeMessage<::LSLAM::CleanMsgToState>(Arena*);
template<> ::LSLAM::VehicleSpeed* Arena::CreateMaybeMessage<::LSLAM::VehicleSpeed>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LSLAM {

enum VehicleSpeed_RobotExpection : int {
  VehicleSpeed_RobotExpection_kNormalMovementAction = 0,
  VehicleSpeed_RobotExpection_kChargeBackAction = 1,
  VehicleSpeed_RobotExpection_kTurnAroundAction = 2,
  VehicleSpeed_RobotExpection_kGoStraightAction = 3,
  VehicleSpeed_RobotExpection_kTurnRadiusAction = 4,
  VehicleSpeed_RobotExpection_kCollideEdgeAction = 5,
  VehicleSpeed_RobotExpection_kLidarEdgeAction = 6,
  VehicleSpeed_RobotExpection_kInfraredChargeAction = 7,
  VehicleSpeed_RobotExpection_kHelpOutAction = 8,
  VehicleSpeed_RobotExpection_VehicleSpeed_RobotExpection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VehicleSpeed_RobotExpection_VehicleSpeed_RobotExpection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VehicleSpeed_RobotExpection_IsValid(int value);
constexpr VehicleSpeed_RobotExpection VehicleSpeed_RobotExpection_RobotExpection_MIN = VehicleSpeed_RobotExpection_kNormalMovementAction;
constexpr VehicleSpeed_RobotExpection VehicleSpeed_RobotExpection_RobotExpection_MAX = VehicleSpeed_RobotExpection_kHelpOutAction;
constexpr int VehicleSpeed_RobotExpection_RobotExpection_ARRAYSIZE = VehicleSpeed_RobotExpection_RobotExpection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleSpeed_RobotExpection_descriptor();
template<typename T>
inline const std::string& VehicleSpeed_RobotExpection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleSpeed_RobotExpection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleSpeed_RobotExpection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleSpeed_RobotExpection_descriptor(), enum_t_value);
}
inline bool VehicleSpeed_RobotExpection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehicleSpeed_RobotExpection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleSpeed_RobotExpection>(
    VehicleSpeed_RobotExpection_descriptor(), name, value);
}
// ===================================================================

class VehicleSpeed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.VehicleSpeed) */ {
 public:
  inline VehicleSpeed() : VehicleSpeed(nullptr) {}
  ~VehicleSpeed() override;
  explicit PROTOBUF_CONSTEXPR VehicleSpeed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleSpeed(const VehicleSpeed& from);
  VehicleSpeed(VehicleSpeed&& from) noexcept
    : VehicleSpeed() {
    *this = ::std::move(from);
  }

  inline VehicleSpeed& operator=(const VehicleSpeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleSpeed& operator=(VehicleSpeed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleSpeed& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleSpeed* internal_default_instance() {
    return reinterpret_cast<const VehicleSpeed*>(
               &_VehicleSpeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleSpeed& a, VehicleSpeed& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleSpeed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleSpeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleSpeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleSpeed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleSpeed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleSpeed& from) {
    VehicleSpeed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleSpeed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.VehicleSpeed";
  }
  protected:
  explicit VehicleSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleSpeed_RobotExpection RobotExpection;
  static constexpr RobotExpection kNormalMovementAction =
    VehicleSpeed_RobotExpection_kNormalMovementAction;
  static constexpr RobotExpection kChargeBackAction =
    VehicleSpeed_RobotExpection_kChargeBackAction;
  static constexpr RobotExpection kTurnAroundAction =
    VehicleSpeed_RobotExpection_kTurnAroundAction;
  static constexpr RobotExpection kGoStraightAction =
    VehicleSpeed_RobotExpection_kGoStraightAction;
  static constexpr RobotExpection kTurnRadiusAction =
    VehicleSpeed_RobotExpection_kTurnRadiusAction;
  static constexpr RobotExpection kCollideEdgeAction =
    VehicleSpeed_RobotExpection_kCollideEdgeAction;
  static constexpr RobotExpection kLidarEdgeAction =
    VehicleSpeed_RobotExpection_kLidarEdgeAction;
  static constexpr RobotExpection kInfraredChargeAction =
    VehicleSpeed_RobotExpection_kInfraredChargeAction;
  static constexpr RobotExpection kHelpOutAction =
    VehicleSpeed_RobotExpection_kHelpOutAction;
  static inline bool RobotExpection_IsValid(int value) {
    return VehicleSpeed_RobotExpection_IsValid(value);
  }
  static constexpr RobotExpection RobotExpection_MIN =
    VehicleSpeed_RobotExpection_RobotExpection_MIN;
  static constexpr RobotExpection RobotExpection_MAX =
    VehicleSpeed_RobotExpection_RobotExpection_MAX;
  static constexpr int RobotExpection_ARRAYSIZE =
    VehicleSpeed_RobotExpection_RobotExpection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RobotExpection_descriptor() {
    return VehicleSpeed_RobotExpection_descriptor();
  }
  template<typename T>
  static inline const std::string& RobotExpection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RobotExpection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RobotExpection_Name.");
    return VehicleSpeed_RobotExpection_Name(enum_t_value);
  }
  static inline bool RobotExpection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RobotExpection* value) {
    return VehicleSpeed_RobotExpection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLineSpeedFieldNumber = 1,
    kAngularVelocityFieldNumber = 2,
    kRobotExpectionActionFieldNumber = 3,
  };
  // int32 line_speed = 1;
  void clear_line_speed();
  int32_t line_speed() const;
  void set_line_speed(int32_t value);
  private:
  int32_t _internal_line_speed() const;
  void _internal_set_line_speed(int32_t value);
  public:

  // int32 angular_velocity = 2;
  void clear_angular_velocity();
  int32_t angular_velocity() const;
  void set_angular_velocity(int32_t value);
  private:
  int32_t _internal_angular_velocity() const;
  void _internal_set_angular_velocity(int32_t value);
  public:

  // .LSLAM.VehicleSpeed.RobotExpection robot_expection_action = 3;
  void clear_robot_expection_action();
  ::LSLAM::VehicleSpeed_RobotExpection robot_expection_action() const;
  void set_robot_expection_action(::LSLAM::VehicleSpeed_RobotExpection value);
  private:
  ::LSLAM::VehicleSpeed_RobotExpection _internal_robot_expection_action() const;
  void _internal_set_robot_expection_action(::LSLAM::VehicleSpeed_RobotExpection value);
  public:

  // @@protoc_insertion_point(class_scope:LSLAM.VehicleSpeed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t line_speed_;
    int32_t angular_velocity_;
    int robot_expection_action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CleanMsgToState_2eproto;
};
// -------------------------------------------------------------------

class CleanMsgToState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LSLAM.CleanMsgToState) */ {
 public:
  inline CleanMsgToState() : CleanMsgToState(nullptr) {}
  ~CleanMsgToState() override;
  explicit PROTOBUF_CONSTEXPR CleanMsgToState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CleanMsgToState(const CleanMsgToState& from);
  CleanMsgToState(CleanMsgToState&& from) noexcept
    : CleanMsgToState() {
    *this = ::std::move(from);
  }

  inline CleanMsgToState& operator=(const CleanMsgToState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanMsgToState& operator=(CleanMsgToState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CleanMsgToState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CleanMsgToState* internal_default_instance() {
    return reinterpret_cast<const CleanMsgToState*>(
               &_CleanMsgToState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CleanMsgToState& a, CleanMsgToState& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanMsgToState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CleanMsgToState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CleanMsgToState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CleanMsgToState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CleanMsgToState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CleanMsgToState& from) {
    CleanMsgToState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CleanMsgToState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LSLAM.CleanMsgToState";
  }
  protected:
  explicit CleanMsgToState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVSpeedFieldNumber = 1,
  };
  // .LSLAM.VehicleSpeed v_speed = 1;
  bool has_v_speed() const;
  private:
  bool _internal_has_v_speed() const;
  public:
  void clear_v_speed();
  const ::LSLAM::VehicleSpeed& v_speed() const;
  PROTOBUF_NODISCARD ::LSLAM::VehicleSpeed* release_v_speed();
  ::LSLAM::VehicleSpeed* mutable_v_speed();
  void set_allocated_v_speed(::LSLAM::VehicleSpeed* v_speed);
  private:
  const ::LSLAM::VehicleSpeed& _internal_v_speed() const;
  ::LSLAM::VehicleSpeed* _internal_mutable_v_speed();
  public:
  void unsafe_arena_set_allocated_v_speed(
      ::LSLAM::VehicleSpeed* v_speed);
  ::LSLAM::VehicleSpeed* unsafe_arena_release_v_speed();

  // @@protoc_insertion_point(class_scope:LSLAM.CleanMsgToState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::LSLAM::VehicleSpeed* v_speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CleanMsgToState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleSpeed

// int32 line_speed = 1;
inline void VehicleSpeed::clear_line_speed() {
  _impl_.line_speed_ = 0;
}
inline int32_t VehicleSpeed::_internal_line_speed() const {
  return _impl_.line_speed_;
}
inline int32_t VehicleSpeed::line_speed() const {
  // @@protoc_insertion_point(field_get:LSLAM.VehicleSpeed.line_speed)
  return _internal_line_speed();
}
inline void VehicleSpeed::_internal_set_line_speed(int32_t value) {
  
  _impl_.line_speed_ = value;
}
inline void VehicleSpeed::set_line_speed(int32_t value) {
  _internal_set_line_speed(value);
  // @@protoc_insertion_point(field_set:LSLAM.VehicleSpeed.line_speed)
}

// int32 angular_velocity = 2;
inline void VehicleSpeed::clear_angular_velocity() {
  _impl_.angular_velocity_ = 0;
}
inline int32_t VehicleSpeed::_internal_angular_velocity() const {
  return _impl_.angular_velocity_;
}
inline int32_t VehicleSpeed::angular_velocity() const {
  // @@protoc_insertion_point(field_get:LSLAM.VehicleSpeed.angular_velocity)
  return _internal_angular_velocity();
}
inline void VehicleSpeed::_internal_set_angular_velocity(int32_t value) {
  
  _impl_.angular_velocity_ = value;
}
inline void VehicleSpeed::set_angular_velocity(int32_t value) {
  _internal_set_angular_velocity(value);
  // @@protoc_insertion_point(field_set:LSLAM.VehicleSpeed.angular_velocity)
}

// .LSLAM.VehicleSpeed.RobotExpection robot_expection_action = 3;
inline void VehicleSpeed::clear_robot_expection_action() {
  _impl_.robot_expection_action_ = 0;
}
inline ::LSLAM::VehicleSpeed_RobotExpection VehicleSpeed::_internal_robot_expection_action() const {
  return static_cast< ::LSLAM::VehicleSpeed_RobotExpection >(_impl_.robot_expection_action_);
}
inline ::LSLAM::VehicleSpeed_RobotExpection VehicleSpeed::robot_expection_action() const {
  // @@protoc_insertion_point(field_get:LSLAM.VehicleSpeed.robot_expection_action)
  return _internal_robot_expection_action();
}
inline void VehicleSpeed::_internal_set_robot_expection_action(::LSLAM::VehicleSpeed_RobotExpection value) {
  
  _impl_.robot_expection_action_ = value;
}
inline void VehicleSpeed::set_robot_expection_action(::LSLAM::VehicleSpeed_RobotExpection value) {
  _internal_set_robot_expection_action(value);
  // @@protoc_insertion_point(field_set:LSLAM.VehicleSpeed.robot_expection_action)
}

// -------------------------------------------------------------------

// CleanMsgToState

// .LSLAM.VehicleSpeed v_speed = 1;
inline bool CleanMsgToState::_internal_has_v_speed() const {
  return this != internal_default_instance() && _impl_.v_speed_ != nullptr;
}
inline bool CleanMsgToState::has_v_speed() const {
  return _internal_has_v_speed();
}
inline void CleanMsgToState::clear_v_speed() {
  if (GetArenaForAllocation() == nullptr && _impl_.v_speed_ != nullptr) {
    delete _impl_.v_speed_;
  }
  _impl_.v_speed_ = nullptr;
}
inline const ::LSLAM::VehicleSpeed& CleanMsgToState::_internal_v_speed() const {
  const ::LSLAM::VehicleSpeed* p = _impl_.v_speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::LSLAM::VehicleSpeed&>(
      ::LSLAM::_VehicleSpeed_default_instance_);
}
inline const ::LSLAM::VehicleSpeed& CleanMsgToState::v_speed() const {
  // @@protoc_insertion_point(field_get:LSLAM.CleanMsgToState.v_speed)
  return _internal_v_speed();
}
inline void CleanMsgToState::unsafe_arena_set_allocated_v_speed(
    ::LSLAM::VehicleSpeed* v_speed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v_speed_);
  }
  _impl_.v_speed_ = v_speed;
  if (v_speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LSLAM.CleanMsgToState.v_speed)
}
inline ::LSLAM::VehicleSpeed* CleanMsgToState::release_v_speed() {
  
  ::LSLAM::VehicleSpeed* temp = _impl_.v_speed_;
  _impl_.v_speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LSLAM::VehicleSpeed* CleanMsgToState::unsafe_arena_release_v_speed() {
  // @@protoc_insertion_point(field_release:LSLAM.CleanMsgToState.v_speed)
  
  ::LSLAM::VehicleSpeed* temp = _impl_.v_speed_;
  _impl_.v_speed_ = nullptr;
  return temp;
}
inline ::LSLAM::VehicleSpeed* CleanMsgToState::_internal_mutable_v_speed() {
  
  if (_impl_.v_speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::LSLAM::VehicleSpeed>(GetArenaForAllocation());
    _impl_.v_speed_ = p;
  }
  return _impl_.v_speed_;
}
inline ::LSLAM::VehicleSpeed* CleanMsgToState::mutable_v_speed() {
  ::LSLAM::VehicleSpeed* _msg = _internal_mutable_v_speed();
  // @@protoc_insertion_point(field_mutable:LSLAM.CleanMsgToState.v_speed)
  return _msg;
}
inline void CleanMsgToState::set_allocated_v_speed(::LSLAM::VehicleSpeed* v_speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.v_speed_;
  }
  if (v_speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v_speed);
    if (message_arena != submessage_arena) {
      v_speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v_speed, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.v_speed_ = v_speed;
  // @@protoc_insertion_point(field_set_allocated:LSLAM.CleanMsgToState.v_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSLAM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LSLAM::VehicleSpeed_RobotExpection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSLAM::VehicleSpeed_RobotExpection>() {
  return ::LSLAM::VehicleSpeed_RobotExpection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CleanMsgToState_2eproto
